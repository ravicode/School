/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LicenseAgreement.java
 *
 * Created on Sep 28, 2009, 1:03:18 PM
 */

package SchoolPlus;

import java.text.MessageFormat;
import javax.swing.JOptionPane;
import javax.swing.JTable.PrintMode;

/**
 *
 * @author Ravi Dangaich
 */
public class LicenseAgreement extends javax.swing.JFrame {

    /** Creates new form LicenseAgreement */
    public LicenseAgreement() {
        initComponents();
        pack();
        this.setLocationRelativeTo(null);
        buttonGroup1.add(notAgreeRadio);
        buttonGroup1.add(agreeRadio);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        notAgreeRadio = new javax.swing.JRadioButton();
        agreeRadio = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextPane1.setText("                                                    License Agreement");
        jScrollPane1.setViewportView(jTextPane1);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(jTextPane2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("PLEASE READ: BY DOWNLOADING, USING OUR SOFTWARE, OR PURCHASING SERVICES \nRELATED TO THE SOFTWARE, YOU ACCEPT THE TERMS AND CONDITIONS STATED BELOW \nIN A LEGALLY BINDING MANNER.\n\nIf you are obtaining the software as defined below, then you must accept\nthe terms and conditions of the agreement as per the policy of the DUCC\nSystems.  If the company you represent or you (collectively \"you\") do not\nagree to the terms and conditions of this agreement, do not download \nor install the software.\n\nPROPRIETARY RIGHTS AND CONDITIONS:\nAll right, title and interest including, but not limited to, copyright and\nother intellectual property rights in and to the software (including but \nnot limited to all graphic/image, and text files) are owned by DUCC Systems.\nSuch rights are protected by Indian Government copyright laws, other applicable\ncopyright laws, and international treaty provisions. DUCC Systems retains \nall rights not expressly granted herein. \nYou may not redistribute, sell, decompile, reverse engineer, or disassemble\nthe software. The software, including any modified or customized versions, \ncannot be resold, redistributed, or offered as a service without explicit\nwritten permission from DUCC Systems. DUCC Systems, reserves the right to \nrefuse permission to use this software product to any individual or company \nfor any reason, and may do so without notice. \n\nLICENSES:\nEach copy of the software must have it's own (separate) license and be registered\nwith DUCC Systems.You are not permitted to make copies of the software without \nfirst purchasing the appropriate additional licenses.  Individual software licenses\nare only valid when registered to a domain/Organization.  This license does not\ngrant any reseller privileges. \n\nOPTIONAL SERVER LICENSES: \nIf a \"server\" license is purchased, the software is considered licensed only\nwhen it resides on the licensed server, which must be registered with DUCC \nSystems. Each server license is issued to one (1) physical computer/server/computers\nwithin the same location organization. Each server that contains the software,\nor any portion thereof, must have it's own license. Server licenses are not \nequivalent to individual licenses, meaning the software must remain on the \nlicensed server at all times. This license does not grant any reseller \nprivileges. \n\nDISCLAIMER OF WARRANTIES:\nTo the extent allowed by local law, this software is provided to you \"as is\" without \nwarranties or conditions of any kind, whether oral or written, express or implied. \nDUCC Systems specifically disclaims any implied warranties or conditions of \nmerchantability, satisfactory quality, non-infringement and fitness for a particular\npurpose. \n\nLIMITATION OF LIABILITY: \nExcept to the extent prohibited by local law, in no event will DUCC Systems, or it’s\nemployees or officers be liable for direct, special, incidental, consequential or \nother damages (including lost profit, lost data, or downtime costs), arising out of \nthe use, inability to use, or the results of use of the software, whether based \nin warranty, contract, tort or other legal theory, and whether or not advised of \nthe possibility of such damages. \nYour use of the software is entirely at your own risk. Should the software prove \ndefective, you assume the entire cost of all service, repair, or correction.\n\nRETURN POLICY:\nSoftware (including but not limited to graphic/image, and text files) that is not \nspecifically referred to as \"trial software\", or that includes the \"source code\", \ncannot be returned for a refund. Should you experience a problem with any purchased \nsoftware, DUCC Systems, offers support services to assist with any technical issues. \nThere are no refunds on installation services or any software that has been installed, \ndownloaded, or emailed to you.\n\nSUPPORT SERVICES:\nSome software and services purchased from DUCC Systems may include limited free support \n(technical support, re-downloads, and free updates may be limited to 6 months from date \nof original qualifying purchase). Unless stated otherwise, the free support is only \navailable through our website/email.  If you require more advanced technical support or\nrequire telephone assistance, additional consulting services or a support plan may be \nrequired.  \nWe reserve the right to change our support policy at anytime.  To contact our support \ndept. for assistance, click on \"www.duccsystems.com/contacts.html\" and click on mail\".\n\nINSTALLATION: \nYou must make every attempt to safeguard your data and other files during installation, \nwhen upgrading, or when installing an update. DUCC Systems does not assume responsibility \nfor loss of data or any other losses that result from installation, upgrading, or updating \nof the software. Hard disks (including but not limited to all data or files \nrelated to SchoolPlus+) should be backed up on a regular basis and should always be backed \nup before you begin any installation tasks. \n\nOPTIONAL INSTALLATION SERVICE:\nIf you have purchased the optional installation service, DUCC Systems will install\nthe software onto your one PC as server. Installation includes basic configuration\nonly, unless stated in writing prior to installation. We will not setup your items, \ncategories, gateways, or any other elements. After we determine that the installation\nwas successful, technical support is provided at the current technical support department\nhourly rate. While we will make every attempt to safeguard data during installation or \nservice, we do not assume responsibility for loss of data. Hard disks and all data on \nyour server should be backed up on a regular basis and should always be backed up before \nDUCC Systems is called for service or installation.\n\nGENERAL DISCLAIMER:\nDUCC Systems  neither assumes nor accepts any liability for any loss, damage, theft, misuse,\nmalfunction, etc. of your hardware or data or anything else that you may own regardless of \nthe cause or reason for any such misfortune. DUCC Systems, it’s officers, and employees will \nnot be liable for lost profits, loss of business or other consequential, special, indirect \nor punitive damages, even if advised of the possibility of such damages, or for any claim by \nany third party . These policies, terms, and conditions may be subject to change without notice.\nBut this is sure we are at your door with the best.\n");
        jScrollPane3.setViewportView(jTextArea1);

        jLabel1.setText("Please read the folllowing license agreement,To continue with the setup, you must the accept the agreement.");

        notAgreeRadio.setBackground(new java.awt.Color(0, 153, 153));
        notAgreeRadio.setText("I don't agree");

        agreeRadio.setBackground(new java.awt.Color(0, 153, 153));
        agreeRadio.setText("I agree");

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Next");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(47, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(notAgreeRadio)
                        .addGap(28, 28, 28)
                        .addComponent(agreeRadio)
                        .addGap(27, 27, 27)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(304, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(notAgreeRadio)
                    .addComponent(agreeRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try
{
    jTextArea1.print();
}catch(Exception e)
{
    e.printStackTrace();
}// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
chooseNext(r);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
int select=JOptionPane.showConfirmDialog(null,"Do you want to abort the setup","Abort Setup",JOptionPane.OK_CANCEL_OPTION);
if(select==JOptionPane.OK_OPTION)
{
this.dispose();
}// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
public void chooseNext(LoginScreen r)
{
    if(agreeRadio.isSelected())
    {
        this.dispose();
        ConnectionFrame.man(r);
    }else JOptionPane.showConfirmDialog(null,"Agree and then click Next");
}
    /**
    * @param args the command line arguments
    */
    public static void man(LoginScreen r1) {
        r=r1;
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LicenseAgreement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton agreeRadio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JRadioButton notAgreeRadio;
    // End of variables declaration//GEN-END:variables
public static LoginScreen r;
}
