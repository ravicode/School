/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DatabaseBackup1.java
 *
 * Created on Dec 21, 2009, 10:13:30 PM
 */

package com.duc.Accessories;
import java.io.*;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.Timer;
import java.util.*;



/**
 *
 * @author Ravi
 */
public class DatabaseBackup extends javax.swing.JInternalFrame {
DefaultTableModel dm;
public static  String filename;
    /** Creates new form DatabaseBackup1 */
    public DatabaseBackup() {
        initComponents();
         pack();
       // this.setLocationRelativeTo(null);
       // dbBackup();
         dm = (DefaultTableModel)jTable1.getModel();
        dm.setRowCount(0);
        databaseConnectionproperties();
         showList();
    }
  public void  databaseConnectionproperties()
    {
        try
        {
              Properties props=new Properties();
            FileInputStream in=new FileInputStream("database.properties");
            props.load(in);
            in.close();
           url=props.getProperty("jdbc.url");
            username=props.getProperty("jdbc.username");
            password=props.getProperty("jdbc.password");
        }catch(Exception e)
        {
e.printStackTrace();
        }
    }

    public void dbBackup()
    {


  try {

      System.out.println("database connect");
String todayDate=new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date());


File d1=new File("dbBackup");
if(!d1.isDirectory())
d1.mkdir();

Runtime rt = Runtime.getRuntime();
System.out.println("hhhhhhhhhhhhhhhhkkkkkkkkkkkk");
  rt.exec("mysqldump -u"+username+" -p"+password+" --opt --databases duccschooldb -r dbBackup/"+todayDate+".SQL");
System.out.println("hhhhhhhhhhhhhhhhlllllllllllllllll");
  }
 catch(Exception e) {
  e.printStackTrace();
  System.out.println("hhhhhhhhhhhhhhhh");
 }



    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();

        setClosable(true);
        setIconifiable(true);
        setTitle("Backup and Recovery Form");

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jButton1.setForeground(new java.awt.Color(0, 0, 255));
        jButton1.setText("Backup");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jButton2.setForeground(new java.awt.Color(0, 0, 255));
        jButton2.setText("Recovery");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jButton3.setForeground(new java.awt.Color(0, 0, 255));
        jButton3.setText("Show Backed");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                " List of Backup Files                     "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jTextPane1.setText("                    Backup and Recovery");
        jScrollPane2.setViewportView(jTextPane1);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setEditable(false);
        jTextPane2.setText("Backup will save the current data in your working directory with the date wise list and hence create restores point...To recover, select the file and then click recover...After Recover Restart the software(recommended).");
        jScrollPane3.setViewportView(jTextPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //dbBackup();
        //backUpProgress();
        ProgressBarTest.man1();// TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //dbRecovery();
        int currentrow=jTable1.getSelectedRow();
        String SQLfileName=dm.getValueAt(currentrow,0).toString();
        filename=SQLfileName;
        ProgressBarTest1.man1();// TODO add your handling code here:
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        showList();        // TODO add your handling code here:
}//GEN-LAST:event_jButton3ActionPerformed
 public void showList()
    {
        String dirname="dbBackup";
        File f1=new File(dirname);
        if(f1.exists())
        {
        String s[]=f1.list();

         dm.setRowCount(s.length);
         System.out.println(s.length);
        for(int i=0;i<s.length;i++)
        {
            System.out.println(s[i]);
            System.out.println("ddddddd");
             dm.setValueAt(s[i], i, 0);
        }
        } else JOptionPane.showConfirmDialog(null,"No Backed Data File","No Backed File",JOptionPane.OK_CANCEL_OPTION);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables
static String url=null;
static String username=null;
static String password=null;
}
class ProgressBarTest {

    public static void man1()
    {
        JFrame f=new ProgressBarFrame();
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        f.setVisible(true);
        t1=f;
    }
 public static JFrame t1;
}

class ProgressBarFrame extends JFrame
{
    public ProgressBarFrame()
    {
        this.setLocationRelativeTo(null);
        setTitle("Backup Progress");
        setSize(DEFAULT_WIDTH,DEFAULT_HEIGHT);
        textarea=new JTextArea();
        JPanel panel=new JPanel();
        sb=new JButton("start");
        pb=new JProgressBar();
        pb.setStringPainted(true);
        panel.add(sb);
        panel.add(pb);

       // checkbox=new JCheckBox("indeterminate");
       /* checkbox.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                pb.setIndeterminate(checkbox.isSelected());
            }
        });*/
       // panel.add(checkbox);

        add(new JScrollPane(textarea),BorderLayout.CENTER);
        add(panel,BorderLayout.SOUTH);

        sb.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                pb.setMaximum(10);//set the bar
                activity=new SimulatedActivity(10); //set the function


                new Thread(activity).start();
                activitymonitor.start();
                sb.setEnabled(false);
            }

        });

        activitymonitor=new Timer(50,new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                int current=activity.getCurrent();
                textarea.append(current+"0% completed..."+"\n");
                //textarea.p
current1=current;
                pb.setStringPainted(pb.isIndeterminate());
                pb.setValue(current);
                if(current==activity.getTarget())
                {
                    activitymonitor.stop();
                    sb.setEnabled(true);
                     ProgressBarTest.t1.dispose();
                }
            }

        });

        if(current1==10)
            this.dispose();
      //  System.out.println("ffffffffffffffffffff");
    }

    private Timer activitymonitor;
    private JButton sb;
    private JProgressBar pb;
    private JCheckBox checkbox;
    private JTextArea textarea;
    private SimulatedActivity activity;
    public static final int DEFAULT_WIDTH=300;
     public static final int DEFAULT_HEIGHT=100;
     public int current1;
}

class SimulatedActivity implements Runnable
{
    public SimulatedActivity(int t)
    {
        current =0;
        target=t;
         new DatabaseBackup().dbBackup();
         System.out.println("gggggggggggggggg");
    }

    public int getTarget()
    {
        return target;
    }

    public int getCurrent()
    {
        return current;
    }

    public void run()
    {
        try
        {
            while(current<target)
            {
                Thread.sleep(1000);
                current++;
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        //System.out.println("returning after 10 secs...");
    }

    private volatile int current;
    private int target;
}

class ProgressBarTest1 {

    public static void man1()
    {
        JFrame f=new ProgressBarFrame1();
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        f.setVisible(true);
     // closeRecoveryFrame(f);
        t1=f;
    }
 
   public static JFrame t1;
}
class ProgressBarFrame1 extends JFrame
{

    public ProgressBarFrame1()
    {
        this.setLocationRelativeTo(null);
        setTitle("Recovery Progress");
        setSize(DEFAULT_WIDTH,DEFAULT_HEIGHT);
        textarea=new JTextArea();
        JPanel panel=new JPanel();
        sb=new JButton("start");
        pb=new JProgressBar();
        pb.setStringPainted(true);
        panel.add(sb);
        panel.add(pb);

       // checkbox=new JCheckBox("indeterminate");
       /* checkbox.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                pb.setIndeterminate(checkbox.isSelected());
            }
        });*/
       // panel.add(checkbox);

        add(new JScrollPane(textarea),BorderLayout.CENTER);
        add(panel,BorderLayout.SOUTH);

        sb.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                pb.setMaximum(10);//set the bar
                activity=new SimulatedActivity1(10); //set the function


                new Thread(activity).start();
                activitymonitor.start();
                sb.setEnabled(false);
            }

        });

        activitymonitor=new Timer(50,new ActionListener()
        {
            public void actionPerformed(ActionEvent event)
            {
                int current=activity.getCurrent();
                textarea.append(current+"0% completed..."+"\n");
                //textarea.p
current1=current;
                pb.setStringPainted(pb.isIndeterminate());
                pb.setValue(current);
                if(current==activity.getTarget())
                {
                    activitymonitor.stop();
                    sb.setEnabled(true);
                    ProgressBarTest1.t1.dispose();
                    int k=JOptionPane.showConfirmDialog(null,"Restart the System ( Recommended )","Do u want to restart now?",JOptionPane.OK_OPTION);
                    if(k==JOptionPane.OK_OPTION)
                    {
                       
                        SchoolPlus.Launcher.rd.dispose();
                    }
                }
            }

        });
        if(current1==10)
        {
            this.dispose();
       
    }
       // this.dispose();
    }

    private Timer activitymonitor;
    private JButton sb;
    private JProgressBar pb;
    private JCheckBox checkbox;
    private JTextArea textarea;
    private SimulatedActivity1 activity;
    public static final int DEFAULT_WIDTH=300;
     public static final int DEFAULT_HEIGHT=100;
     public int current1;
}

class SimulatedActivity1 implements Runnable
{
    public SimulatedActivity1(int t)
    {
        current =0;
        target=t;
        System.out.println("ddddddddddddddd");
        // new DatabaseBackup().dbRecovery();
dbRecovery();
         System.out.println("gggggggggggggggg1111");
    }

    public int getTarget()
    {
        return target;
    }

    public int getCurrent()
    {
        return current;
    }

    public void run()
    {
        try
        {
            while(current<target)
            {
                Thread.sleep(1000);
                current++;
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        //System.out.println("returning after 10 secs...");
    }
 public void dbRecovery()
    {

         File d1=new File("currentDb");
         File p1=new File("penultimateDb");
         if(p1.exists())
         {
             String s[]=p1.list();
        for(int i=0;i<s.length;i++)
        {
         System.out.println(s[i]);

             File d21=new File("penultimateDb/"+s[i]);
             d21.delete();
         }
         }
         if(p1.exists())
            p1.delete();
        p1.mkdir();
         if(d1.exists())
         {

        String s[]=d1.list();
        for(int i=0;i<s.length;i++)
        {
         System.out.println(s[i]);
         File d2=new File("currentDb/"+s[i]);
            File d21=new File("penultimateDb/"+s[i]);

             try
         {
             InputStream in = new FileInputStream(d2);


//For Append the file.
//OutputStream out = new FileOutputStream(f2,true);

//For Overwrite the file.
      OutputStream out = new FileOutputStream(d21);
      //OutputStream out1 = new FileOutputStream(f3);



        byte[] buf = new byte[1024];

    int len;

     while ((len = in.read(buf)) > 0){

         {   out.write(buf, 0, len);

       //out.write(buf, 0, len);
         }
      //File currentSQLFile=new File(f2);

     }

     in.close();

      out.close();

     System.out.println("File copied into penultimateDb folder.");

         }catch(Exception e)
         {
              System.out.println("File not copied into penultimateDb folder.");
e.printStackTrace();

         }


         d2.delete();
        }
         }
         SQLfileName=DatabaseBackup.filename;
        System.out.println("sssssss"+SQLfileName);
       try
       {

        if(d1.exists())
            d1.delete();
        d1.mkdir();

Runtime rt = Runtime.getRuntime();

File f1 = new File("dbBackup/"+SQLfileName);

      File f2 = new File("currentDb/"+SQLfileName);
      File f3=new File("currentDb/duccschooldb.SQL");

      InputStream in = new FileInputStream(f1);


//For Append the file.
//OutputStream out = new FileOutputStream(f2,true);

//For Overwrite the file.
      OutputStream out = new FileOutputStream(f2);
      OutputStream out1 = new FileOutputStream(f3);



        byte[] buf = new byte[1024];

    int len;

     while ((len = in.read(buf)) > 0){

         {   out.write(buf, 0, len);

       out1.write(buf, 0, len);  }
      //File currentSQLFile=new File(f2);

     }

     in.close();

      out.close();

     System.out.println("File copied into currentDb Folder.");

rt.exec("dbInstaller.bat");

System.out.println("Selected file is recovered.");
        // ProgressBarTest.man1();



         //this.dispose();

    }catch(Exception e)
    {
        System.out.println("Selected file is not recovered.");
     e.printStackTrace();

    }
    }
    private volatile int current;
    private int target;
    String SQLfileName;

}

