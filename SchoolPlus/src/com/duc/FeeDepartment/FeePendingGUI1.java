/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FeePendingGUI1.java
 *
 * Created on Sep 26, 2009, 5:19:53 PM
 */

package com.duc.FeeDepartment;
import java.net.InetAddress;
import java.sql.*;
import java.text.MessageFormat;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JTable.PrintMode;
import javax.swing.table.DefaultTableModel;
import static com.duc.DatabaseConnection.DatabaseConnection.*;
/**
 *
 * @author Ravi Dangaich
 */
public class FeePendingGUI1 extends javax.swing.JInternalFrame {
DefaultTableModel dm;
//MapForIndex mp=new MapForIndex();


    HashMap month=mp.mapMonth();
 HashMap classmap=mp.getClassIndexName();
 HashMap classmap1=mp.getClassIndexFromName();
  HashMap sectionmap=mp.getSectionIndexName();
 HashMap admissionfeemap=mp.getAdmissionFeeIndexToName();
    HashMap periodicfeemap=mp.getPeriodicFeeIndexToName();

    HashMap monthlyfeemap=mp.getMonthlyFeeIndexToName();
    HashMap otherfeemap=mp.getLedgerOtherFeeIndexToName();
    HashMap sessionmap1=mp.getSessionIndexFromName();
    /** Creates new form FeePendingGUI1 */
    public FeePendingGUI1() {
        initComponents();
        pack();
        //this.setLocationRelativeTo(null);
        dm = (DefaultTableModel) jXTable1.getModel();
        dm.setRowCount(0);
        fromClass();
        fromSession();
         aggregateOfDefaultersList();
    }

    public void fromClass()
    {
         try
    {

System.out.println("con of Fee Customization Section="+con);
         ps = con.prepareStatement("select * from classsetup");

             rs = ps.executeQuery();


            while (rs.next())
            {
        jComboBox1.addItem(rs.getString(1));

            }

 // con.close();
         }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        printButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        admissionno = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        showAllButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        sessionCombo = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        closeButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        jMenuItem1.setText("jMenuItem1");
        jPopupMenu1.add(jMenuItem1);

        setClosable(true);
        setIconifiable(true);
        setTitle("Defaulters List");

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        jTextPane1.setBackground(new java.awt.Color(204, 204, 255));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 0, 24));
        jTextPane1.setText("                                     Defaulters List ( Fee Pendings )");
        jScrollPane2.setViewportView(jTextPane1);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 255));
        jTextPane2.setEditable(false);
        jTextPane2.setFont(new java.awt.Font("Tahoma", 0, 12));
        jTextPane2.setText("It will show the list of all the advance payments made by the student as on monthly basis");
        jScrollPane3.setViewportView(jTextPane2);

        printButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        printButton.setForeground(new java.awt.Color(0, 0, 255));
        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        closeButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        closeButton.setForeground(new java.awt.Color(255, 0, 0));
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        admissionno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                admissionnoKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Admission No.");

        showAllButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        showAllButton.setForeground(new java.awt.Color(0, 0, 255));
        showAllButton.setText("Show Detail");
        showAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setText("Session");

        sessionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        sessionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sessionComboActionPerformed(evt);
            }
        });

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "", null, null, null, new Double(0.0), null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Adm. No.", "Class", "Name", "Father's Name", "Head", "Dues", "Month", "last updated", "Address", "Ph no."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jXTable1.setColumnControlVisible(true);
        jXTable1.setHorizontalScrollEnabled(true);
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jXTable1);

        closeButton1.setFont(new java.awt.Font("Tahoma", 1, 12));
        closeButton1.setForeground(new java.awt.Color(0, 0, 255));
        closeButton1.setText("SMS");
        closeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Class");

        jComboBox1.setForeground(new java.awt.Color(153, 0, 51));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose", "All" }));
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(admissionno, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sessionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(closeButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(showAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(printButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sessionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(admissionno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(showAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try {

             String s="Defaulters List";
        MessageFormat header=new MessageFormat(s);
        jXTable1.print(PrintMode.FIT_WIDTH, header, null);
        }catch(Exception e) {
            e.printStackTrace();
        }// TODO add your handling code here:
}//GEN-LAST:event_printButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();        // TODO add your handling code here:
}//GEN-LAST:event_closeButtonActionPerformed

    private void admissionnoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_admissionnoKeyPressed
        if(!admissionno.getText().isEmpty())viewDefaultersList();     // TODO add your handling code here:
}//GEN-LAST:event_admissionnoKeyPressed

    private void showAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllButtonActionPerformed
        showAllDefaultersList();      // TODO add your handling code here:
}//GEN-LAST:event_showAllButtonActionPerformed

    private void sessionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sessionComboActionPerformed
        sessionWiseDefaulters();
}//GEN-LAST:event_sessionComboActionPerformed

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
      
    }//GEN-LAST:event_jXTable1MouseClicked

    private void closeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButton1ActionPerformed
        sendSmsToDefaulter();
    }//GEN-LAST:event_closeButton1ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked

}//GEN-LAST:event_jComboBox1MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //change=0;
       // showAllSpecialFeeStudentListByClass();
        // TODO add your handling code here:
        //viewDefaultersListByClass();

        showAllByClass();
}//GEN-LAST:event_jComboBox1ActionPerformed

    public void sendSmsToDefaulter()
    {
        try
 {
        ps=con.prepareStatement("select access from smsaccess where module=? ");
    ps.setString(1,"Defaulters List");
    rs=ps.executeQuery();
    if(rs.next())
    {
    if(rs.getInt(1)==1)
       sendSmsDefaulter();
      else JOptionPane.showConfirmDialog(null,"Add SMS package access from Accessories","Contact Administrator",JOptionPane.OK_OPTION);
       // jCheckBox1.setSelected(false);

    }else JOptionPane.showConfirmDialog(null,"Add SMS package access from Accessories","Contact Administrator",JOptionPane.OK_OPTION);
      }catch(Exception e)
{
    e.printStackTrace();
}

    }

    public void sendSmsDefaulter()
    {
          int crow=jXTable1.getSelectedRow();
        // if(Boolean.parseBoolean(dm.getValueAt(crow,10).toString()))
         {
             String id;
         
    //  String inputLine;

   String msg="Pay Your Dues Amount of Rs"+dm.getValueAt(crow,5).toString().trim();
    System.out.println("message"+msg);

    //if(jCheckBox1.isSelected())
     //   id=jTextField2.getText().trim();
    //else
        System.out.println("ravi"+dm.getValueAt(crow,9));
    String newmsg=msg.replace(" ","%20");
    System.out.println("New message"+newmsg);
    try
    {
 /*  if(dm.getValueAt(crow,9).equals("null"))
      {
          JOptionPane.showConfirmDialog(null,"Mobile no. Field is empty","Mobile Empty",JOptionPane.OK_OPTION);
      }
      else
      {*/
         id=dm.getValueAt(crow,9).toString().trim();
       //   System.out.println("number"+id);
         /* if(dm.getValueAt(crow,9).toString().trim().length()!=10)
          {
          JOptionPane.showConfirmDialog(null,"Mobile no. is not valid","Mobile No. Invalid",JOptionPane.OK_OPTION);
      }
      else*/
          InetAddress thisIp =InetAddress.getLocalHost();
            String ip=thisIp.getHostAddress();
      new com.duc.Accessories.SendSms().SmsCommon(dm.getValueAt(crow,0).toString(),id,newmsg,ip);
     // }
    }catch(Exception e)
    {
        JOptionPane.showConfirmDialog(null,"Mobile no. Field is empty","Mobile Empty",JOptionPane.OK_OPTION);

        e.printStackTrace();
    }
    /*String ul="http://abulksms.com/pushsms.php?username=ravis&password=921695&sender=DUCC%20Sys&cdmasender=mycdmasenderid&to="+id+"&message="+newmsg;
    System.out.println("url="+ul);
        try
        {
        URL yahoo = new URL(ul);
        URLConnection yc = yahoo.openConnection();
        BufferedReader in = new BufferedReader(
                                new InputStreamReader(
                                yc.getInputStream()));


        while ((inputLine = in.readLine()) != null)
            System.out.println(inputLine);
             JOptionPane.showConfirmDialog(null,"Message sent successfully...","SMS Sender",JOptionPane.PLAIN_MESSAGE);
        in.close();
        }catch(Exception e)
        {
            e.printStackTrace();
        }*/
         }
    }
    public void sessionWiseDefaulters()
    {
         int i=0,j=0;
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         ps=con.prepareStatement("select distinct studentid from feedues where dues!=0 and session=? order by studentid");
        //ps.setInt(1,Integer.parseInt(admissionno.getText()));
         ps.setInt(1,Integer.parseInt(sessionmap1.get(sessionCombo.getSelectedItem()).toString()));
        rs=ps.executeQuery();

        while(rs.next())
            {
                j++;

            }
            rs.first();
            rs.previous();

            System.out.println("rd"+j);

            dm.setRowCount(j);

            while(rs.next())
            {

            dm.setValueAt(rs.getString(1), i, 0);


            i++;
        }
    }catch(Exception e)
        {
e.printStackTrace();
        }
    int r;
     try
    {
         for(r=0;r<dm.getRowCount();r++)
         {
         ps=con.prepareStatement("select sum(dues)sum from feedues where studentid=? and session=? and dues!=0");
        ps.setString(1,dm.getValueAt(r, 0).toString());
        ps.setInt(2,Integer.parseInt(sessionmap1.get(sessionCombo.getSelectedItem()).toString()));
        rs=ps.executeQuery();
        rs.next();
dm.setValueAt(rs.getDouble(1), r,5);

        }
     }
    catch(Exception e)
        {
        e.printStackTrace();

        }
try
    {
         for(r=0;r<dm.getRowCount();r++)
         {
         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,date from feedues left join studententry on studentid=id  where studentid=? and session=? and dues!=0 order by studentid");
        ps.setString(1,dm.getValueAt(r, 0).toString());
        ps.setInt(2,Integer.parseInt(sessionmap1.get(sessionCombo.getSelectedItem()).toString()));
        rs=ps.executeQuery();
        rs.next();
dm.setValueAt(classmap.get(rs.getInt(2)), r, 1);
            dm.setValueAt(sectionmap.get(rs.getInt(3)), r, 2);
           dm.setValueAt(rs.getInt(4), r, 3);
            dm.setValueAt("Total Dues", r, 4);
            dm.setValueAt("", r, 6);
          //  dm.setValueAt(0, r, 7);
           dm.setValueAt(rs.getString(8), r, 7);

        }
     }
    catch(Exception e)
        {
        e.printStackTrace();

        }
    }

public void showAllDefaultersList()
{
 
    //con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         ps=con.prepareStatement("select studentid,class,name,fathername,head,dues,month,date,feetype,address,phone from feedues left join studententry on studentid=id where dues!=0 and session=? order by studentid");
       ps.setInt(1,sessionValue);
        rs=ps.executeQuery();

        showAllDues(rs);
    }catch(Exception e)
    {
e.printStackTrace();
    }
}

public void showAllByClass()
{

    //con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         ps=con.prepareStatement("select studentid,class,name,fathername,head,dues,month,date,feetype,address,phone from feedues left join studententry on studentid=id where dues!=0 and session=? and class=? order by studentid");
       ps.setInt(1,sessionValue);
       ps.setInt(2,Integer.parseInt(classmap1.get(jComboBox1.getSelectedItem().toString()).toString()));

        rs=ps.executeQuery();

        showAllDues(rs);
    }catch(Exception e)
    {
e.printStackTrace();
    }
}

public void showAllDues(ResultSet rs)
{
        int i=0,j=0,feetype=0;
    try
    {
        if(rs.next())
        {
        rs.first();
        rs.previous();
        while(rs.next())
            {
                j++;

            }
            rs.first();
            rs.previous();
           System.out.println("rd"+j);

            dm.setRowCount(j);
           // System.out.println(rs.getString(2));
            while(rs.next())
            {
feetype=rs.getInt(9);

            dm.setValueAt(rs.getString(1), i, 0);
            dm.setValueAt(classmap.get(rs.getInt(2)), i, 1);
           // dm.setValueAt(sectionmap.get(rs.getInt(3)), i, 2);
           // dm.setValueAt(rs.getInt(4), i, 3);
             dm.setValueAt(rs.getString(3), i, 2);
              dm.setValueAt(rs.getString(4), i, 3);
           if(feetype==0)
            dm.setValueAt(monthlyfeemap.get(rs.getInt(5)), i, 4);
            if(feetype==1)
            dm.setValueAt(admissionfeemap.get(rs.getInt(5)), i, 4);
            if(feetype==2)
            dm.setValueAt(periodicfeemap.get(rs.getInt(5)), i, 4);
            if(feetype==3)
            dm.setValueAt(otherfeemap.get(rs.getInt(5)), i, 4);
            dm.setValueAt(rs.getDouble(6), i, 5);
             dm.setValueAt(month.get(rs.getInt(7)), i, 6);
          //    dm.setValueAt(0, i, 7);
            dm.setValueAt(rs.getString(8), i, 7);
dm.setValueAt(rs.getString(10), i, 8);
dm.setValueAt(rs.getString(11), i, 9);
            i++;

        }
   double total=0.0;
   int count=0;

for(int k=j;k>1;k--)
{
    if(dm.getValueAt(k-1, 0).toString().equals(dm.getValueAt(k-2, 0).toString()))
    {
        total+=Double.parseDouble(dm.getValueAt(k-1, 5).toString());
        dm.setValueAt("", k-1, 0);
        dm.setValueAt("", k-1, 1);
        dm.setValueAt("", k-1, 2);
        dm.setValueAt("", k-1, 3);
        dm.setValueAt("", k-1, 8);
        dm.setValueAt("", k-1, 9);
}
    else
    {total+=Double.parseDouble(dm.getValueAt(k-1, 5).toString());
     System.out.println("total"+total);
     total=0.0;
}
    if(k==2)
    {total=total+Double.parseDouble(dm.getValueAt(0, 5).toString());
         System.out.println("total"+total);
    }
}
        } else
            dm.setRowCount(0);
    }catch(Exception e)
    {
        e.printStackTrace();
    }
}

    public void viewDefaultersList()
{
    
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         ps=con.prepareStatement("select studentid,class,name,fathername,head,dues,month,date,feetype,address,phone from feedues left join studententry on studentid=id  where studentid=? and dues!=0 order by studentid");
        ps.setString(1,admissionno.getText());
        rs=ps.executeQuery();
loadDefaulters(rs);
     

    }catch(Exception e)
    {
e.printStackTrace();
    }
}

    public void viewDefaultersListByClass()
{

   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         if(!((jComboBox1.getSelectedItem().toString().equals("choose")) || (jComboBox1.getSelectedItem().toString().equals("All"))) )
        {

        ps=con.prepareStatement("select studentid,class,name,fathername,head,dues,month,date,feetype,address,phone from feedues left join studententry on studentid=id  where studentid=? and class=? and dues!=0 order by studentid");
        ps.setString(1,admissionno.getText());
        ps.setInt(2,Integer.parseInt(classmap1.get(jComboBox1.getSelectedItem().toString()).toString()));

        rs=ps.executeQuery();
loadDefaulters(rs);
         }

    }catch(Exception e)
    {
e.printStackTrace();
    }
}
    public void loadDefaulters(ResultSet rs)
    {
    int i=0,j=0,feetype=0;
        try
        {
            if(rs.next())
            {
                rs.first();
                rs.previous();
               while(rs.next())
            {
                j++;
               // System.out.println("gender"+rs);
              //  System.out.println("rd2");
            }
            rs.first();
            rs.previous();
           // System.out.println(daybookdatechooser.getText());

            System.out.println("rd"+j);

            dm.setRowCount(j);
           // System.out.println(rs.getString(2));
            while(rs.next())
            {
feetype=rs.getInt(9);

            dm.setValueAt(rs.getString(1), i, 0);
            dm.setValueAt(classmap.get(rs.getInt(2)), i, 1);
            dm.setValueAt(rs.getString(3), i, 2);
            dm.setValueAt(rs.getString(4), i, 3);
          if(feetype==0)
            dm.setValueAt(monthlyfeemap.get(rs.getInt(5)), i, 4);
            if(feetype==1)
            dm.setValueAt(admissionfeemap.get(rs.getInt(5)), i, 4);
            if(feetype==2)
            dm.setValueAt(periodicfeemap.get(rs.getInt(5)), i, 4);
            if(feetype==3)
            dm.setValueAt(otherfeemap.get(rs.getInt(5)), i, 4);
            dm.setValueAt(rs.getDouble(6), i, 5);
            dm.setValueAt(month.get(rs.getInt(7)), i, 6);
         //   dm.setValueAt(0, i, 7);
dm.setValueAt(rs.getString(8), i, 7);
dm.setValueAt(rs.getString(10), i, 8);
dm.setValueAt(rs.getString(11), i, 9);
            i++;
        }
 double total=0.0;
   int count=0;

for(int k=j;k>1;k--)
{
    if(dm.getValueAt(k-1, 0).toString().equals(dm.getValueAt(k-2, 0).toString()))
    {
        total+=Double.parseDouble(dm.getValueAt(k-1, 5).toString());
        dm.setValueAt("", k-1, 0);
        dm.setValueAt("", k-1, 1);
        dm.setValueAt("", k-1, 2);
        dm.setValueAt("", k-1, 3);
        dm.setValueAt("", k-1, 8);
        dm.setValueAt("", k-1, 9);
}
    else
    {total+=Double.parseDouble(dm.getValueAt(k-1, 5).toString());
     System.out.println("total"+total);
     total=0.0;
}
    if(k==2)
    {total=total+Double.parseDouble(dm.getValueAt(0, 5).toString());
         System.out.println("total"+total);
    }
}
        }
            else
                dm.setRowCount(0);
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
 public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");

           rs = ps.executeQuery();
           // int i = 0,j=0;
          while(rs.next())
            {
                //j++;
              sessionCombo.addItem(rs.getString(1));

              if(rs.getInt(3)==1)
                 sessionValue=rs.getInt(2);

            }

         }
         catch(Exception e)
         {
             e.printStackTrace();
    }
   }
public void aggregateOfDefaultersList()
{
      int i=0,j=0;
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         ps=con.prepareStatement("select distinct studentid from feedues where dues!=0 and session=? order by studentid");
       ps.setInt(1,sessionValue);
        rs=ps.executeQuery();

        while(rs.next())
            {
                j++;

            }
            rs.first();
            rs.previous();

            System.out.println("rd"+j);

            dm.setRowCount(j);

            while(rs.next())
            {

            dm.setValueAt(rs.getString(1), i, 0);


            i++;
        }
    }catch(Exception e)
        {
e.printStackTrace();
        }
    int r;
     try
    {
         for(r=0;r<dm.getRowCount();r++)
         {
         ps=con.prepareStatement("select sum(dues)sum from feedues where studentid=? and dues!=0");
        ps.setString(1,dm.getValueAt(r, 0).toString());
        rs=ps.executeQuery();
        rs.next();
dm.setValueAt(rs.getDouble(1), r,5);

        }
     }
    catch(Exception e)
        {
        e.printStackTrace();

        }
try
    {
         for(r=0;r<dm.getRowCount();r++)
         {
         ps=con.prepareStatement("select studentid,class,name,fathername,head,dues,month,date,address,phone from feedues left join studententry on studentid=id  where studentid=? and dues!=0 order by studentid");
        ps.setString(1,dm.getValueAt(r, 0).toString());
        rs=ps.executeQuery();
        rs.next();
dm.setValueAt(classmap.get(rs.getInt(2)), r, 1);
            //dm.setValueAt(sectionmap.get(rs.getInt(3)), r, 2);
           //dm.setValueAt(rs.getInt(4), r, 3);
 dm.setValueAt(rs.getString(3), r, 2);
 dm.setValueAt(rs.getString(4), r, 3);
            dm.setValueAt("Total Dues", r, 4);
            dm.setValueAt("", r, 6);
           // dm.setValueAt(0, r, 7);
           dm.setValueAt(rs.getString(8), r, 7);
           dm.setValueAt(rs.getString(9), r, 8);
dm.setValueAt(rs.getString(10), r, 9);
System.out.println("jjgjh"+rs.getString(10));
        }
     }
    catch(Exception e)
        {
        e.printStackTrace();

        }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField admissionno;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton closeButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private javax.swing.JButton printButton;
    private javax.swing.JComboBox sessionCombo;
    private javax.swing.JButton showAllButton;
    // End of variables declaration//GEN-END:variables
//Connection con;
ResultSet rs;
PreparedStatement ps;
public Integer sessionValue;

}
