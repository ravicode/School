/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PaymentDues.java
 *
 * Created on Jan 9, 2009, 10:33:53 PM
 */

package com.duc.FeeDepartment.LedgerSection;
import java.sql.*;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import com.duc.ImportSection.MapForIndex;
import static com.duc.DatabaseConnection.DatabaseConnection.*;
/**
 *
 * @author Ravi Dangaich
 */
public class PaymentDues extends javax.swing.JInternalFrame {
DefaultTableModel dm;
//DateFormat df;
//MapForIndex mp=new MapForIndex();

HashMap monthmap=mp.mapMonth();
    HashMap monthmap1=mp.mapMonth1();
HashMap classmap=mp.getClassIndexName();
    HashMap sectionmap=mp.getSectionIndexName();

    HashMap classmap1=mp.getClassIndexFromName();
    HashMap sectionmap1=mp.getSectionIndexFromName();

    HashMap admissionfeemap=mp.getAdmissionFeeIndexToName();
    HashMap periodicfeemap= mp.getPeriodicFeeIndexToName();

    HashMap monthlyfeemap=mp.getMonthlyFeeIndexToName();
    HashMap otherfeemap=mp.getLedgerOtherFeeIndexToName();

   // HashMap headfeetypemap=new HashMap();
HashMap admissionfeemap1=mp.getAdmissionFeeIndexFromName();
    HashMap periodicfeemap1= mp.getPeriodicFeeIndexFromName();

    HashMap monthlyfeemap1=mp.getMonthlyFeeIndexFromName();
    HashMap otherfeemap1=mp.getLedgerOtherFeeIndexFromName();
    /** Creates new form PaymentDues */
    public PaymentDues() {
        initComponents();
        pack();
      
        dm = (DefaultTableModel) jTable1.getModel();
        dm.setRowCount(0);
       // df=new SimpleDateFormat("yyyy-MM-dd");
         datefrom.setDateFormat(df);
          dateto.setDateFormat(df);


         fromClass();
         fromFeeDuesHead();
         fromFeeHead();
         //fromFeePaidHead();
         fromLedgerHeadSetup();
    }

     
public void fromLedgerHeadSetup()
    {
          try
    {
     ps = con.prepareStatement("select * from ledgerheadsetup");

             rs = ps.executeQuery();


            while (rs.next())
            {
        ledgerCombo.addItem(rs.getString(1));

 ledgerCombo1.addItem(rs.getString(1));
            }

 // con.close();
         }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        ledgerCombo = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        feeCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        monthCombo = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        datefrom = new datechooser.beans.DateChooserCombo();
        jLabel6 = new javax.swing.JLabel();
        dateto = new datechooser.beans.DateChooserCombo();
        classCombo = new javax.swing.JComboBox();
        feeCombo1 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        classCombo1 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        monthCombo1 = new javax.swing.JComboBox();
        ledgerCombo1 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        totaldues = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        totalpaid = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();

        setClosable(true);
        setIconifiable(true);
        setTitle("Ledger Payment-Dues Window");

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jTextPane1.setText("                                                               Ledger Collection and Dues");
        jScrollPane2.setViewportView(jTextPane1);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        ledgerCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose" }));
        ledgerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledgerComboActionPerformed(evt);
            }
        });

        jLabel7.setText("Ledger");

        jLabel8.setText("Fee Head");

        feeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose" }));
        feeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feeComboActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Ledger", "Class", "Section", "Fee Head", "Dues", "Month", "Paid", "Last Updated"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        monthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboActionPerformed(evt);
            }
        });

        jLabel12.setText("Month");

        jLabel10.setText("Class");

        jLabel5.setText("Date From");

        jLabel6.setText("Date To");

        classCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose" }));
        classCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classComboActionPerformed(evt);
            }
        });

        feeCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose" }));
        feeCombo1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feeCombo1MouseClicked(evt);
            }
        });
        feeCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feeCombo1ActionPerformed(evt);
            }
        });

        jLabel9.setText("Fee Head");

        jLabel11.setText("Class");

        classCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose" }));
        classCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classCombo1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Month");

        monthCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        monthCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthCombo1ActionPerformed(evt);
            }
        });

        ledgerCombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose" }));
        ledgerCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledgerCombo1ActionPerformed(evt);
            }
        });

        jLabel14.setText("Ledger");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Ledger Debit (Payment)");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Ledger Credit(Dues)");

        jButton1.setText("Dues");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Payments");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel15.setText("Total Dues");

        jLabel16.setText("Total Paid");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Ledger Credit and Debits");

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setEditable(false);
        jTextPane2.setText("choose the respective options for desired report display...");
        jScrollPane3.setViewportView(jTextPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(418, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(totaldues, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)
                        .addComponent(totalpaid, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(165, 165, 165))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(60, 60, 60)
                        .addComponent(ledgerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                                .addComponent(ledgerCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(25, 25, 25)
                                .addComponent(datefrom, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)))
                        .addGap(101, 101, 101))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(monthCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(classCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(feeCombo, 0, 127, Short.MAX_VALUE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(feeCombo1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addComponent(monthCombo1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(classCombo1, 0, 124, Short.MAX_VALUE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(37, 37, 37)
                                .addComponent(dateto, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)))
                        .addGap(101, 101, 101))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 828, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ledgerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ledgerCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(feeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(feeCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9))
                                    .addGap(3, 3, 3)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(datefrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(classCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addComponent(classCombo1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel11))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(monthCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalpaid)
                    .addComponent(totaldues))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void classComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classComboActionPerformed

viewOnClassBasis();
sumOfPaid();
sumOfDues();// TODO add your handling code here:
    }//GEN-LAST:event_classComboActionPerformed

    private void feeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feeComboActionPerformed
       viewOnFeeHeadBasis();
       sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_feeComboActionPerformed

    private void ledgerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledgerComboActionPerformed
       viewOnLedgerBasis();
       sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_ledgerComboActionPerformed

    private void feeCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feeCombo1ActionPerformed
         viewDuesOnFeeHeadBasis();
          sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_feeCombo1ActionPerformed

    private void classCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classCombo1ActionPerformed
        viewDuesOnClassBasis();
        sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_classCombo1ActionPerformed

    private void ledgerCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledgerCombo1ActionPerformed
        viewDuesOnLedgerBasis();
        sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_ledgerCombo1ActionPerformed

    private void monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboActionPerformed
        viewOnMonthBasis();
        sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_monthComboActionPerformed

    private void monthCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthCombo1ActionPerformed
        viewDuesOnMonthBasis();
        sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_monthCombo1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dateDurationLedgerPayment();
          sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dateDurationLedgerDues();
          sumOfPaid();
sumOfDues();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void feeCombo1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feeCombo1MouseClicked
/*  viewDuesOnFeeHeadBasis();
          sumOfPaid();
sumOfDues();*/        // TODO add your handling code here:
    }//GEN-LAST:event_feeCombo1MouseClicked

     public void dateDurationLedgerDues()
  {
      /// con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();

     try
     {
         // ps=con.prepareStatement("select * from feedues where dues!=0 order by studentid");
      ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,date,ledgercode,feetype from feedues left join studententry on studentid=id where dues!=0 and date>=? and date<=? order by studentid") ;
      ps.setString(1,datefrom.getText());
      ps.setString(2,dateto.getText());
      System.out.println("n");
       rs=ps.executeQuery();
     // System.out.println("gender"+rs);

ledgerDetailForDues(rs);
 //con.close();
     }catch(Exception e)
   {
e.printStackTrace();
   }
  }


    public void dateDurationLedgerPayment()
    {

      // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();

     try
     {
       ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,paid,date,remaining,ledgercode,feetype from feepaid left join studententry on studentid=id where date>=? and date<=? order by studentid") ;
      ps.setString(1,datefrom.getText());
      ps.setString(2,dateto.getText());
      System.out.println("n");
       rs=ps.executeQuery();
     // System.out.println("gender"+rs);

ledgerDetailForPayment(rs);
 //con.close();
     }catch(Exception e)
   {
e.printStackTrace();
   }

    }

    public void ledgerDetailForPayment(ResultSet rs)
{
     int i=0,j=0,feetype=0;
    try{
                     while(rs.next())
            {
                j++;

            }
            rs.first();
            rs.previous();
            System.out.println("rd"+j);

            dm.setRowCount(j);

            while(rs.next())
            {

feetype=rs.getInt(12);

            dm.setValueAt(classmap.get(rs.getInt(2)), i, 1);
            dm.setValueAt(sectionmap.get(rs.getInt(3)), i, 2);

            if(feetype==0)
            dm.setValueAt(monthlyfeemap.get(rs.getInt(5)), i, 3);
            if(feetype==1)
            dm.setValueAt(admissionfeemap.get(rs.getInt(5)), i, 3);
            if(feetype==2)
            dm.setValueAt(periodicfeemap.get(rs.getInt(5)), i, 3);
            if(feetype==3)
            dm.setValueAt(otherfeemap.get(rs.getInt(5)), i, 3);
            dm.setValueAt(rs.getDouble(6), i, 4);
            dm.setValueAt(monthmap.get(rs.getInt(7)), i, 5);
            dm.setValueAt(rs.getDouble(8), i, 6);
            dm.setValueAt(rs.getString(9), i, 7);
   ps = con.prepareStatement("select * from ledgerheadsetup where ledgercode=?");
ps.setInt(1,rs.getInt(11));
rs1 = ps.executeQuery();
rs1.next();

dm.setValueAt(rs1.getString(1), i, 0);
            i++;
        }


    }catch(Exception e)
    {
e.printStackTrace();
    }

}
 public void sumOfPaid()
{
    Double totalpaid=0.0;
    int rowcount=dm.getRowCount();
    for(int i=0;i<rowcount;i++)
    {
        System.out.println("rd");
        totalpaid+=Double.parseDouble(dm.getValueAt(i,6).toString());

    }   this.totalpaid.setText(String.valueOf(totalpaid));
}
        public void sumOfDues()
{
    Double totaldues=0.0;
    int rowcount=dm.getRowCount();
    for(int i=0;i<rowcount;i++)
    {
        System.out.println("rd");
        totaldues+=Double.parseDouble(dm.getValueAt(i,4).toString());

    }   this.totaldues.setText(String.valueOf(totaldues));
}

    public void viewOnMonthBasis()
    {
          int i=0,j=0;
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         try
    {


         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,paid,date,remaining,ledgercode,feetype from feepaid left join studententry on studentid=id where month=? and paid!=0 order by studentid");
        ps.setInt(1,Integer.parseInt(monthmap1.get(monthCombo.getSelectedItem()).toString()));
        rs=ps.executeQuery();
ledgerDetailForPayment(rs);


    }catch(Exception e)
    {
e.printStackTrace();
    }


    }

    public void viewOnClassBasis()
    {
          int i=0,j=0;
    //con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         try
    {


         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,paid,date,remaining,ledgercode,feetype from feepaid left join studententry on studentid=id where class=? and paid!=0 order by studentid");
        ps.setInt(1,Integer.parseInt(classmap1.get(classCombo.getSelectedItem()).toString()));
        rs=ps.executeQuery();

      ledgerDetailForPayment(rs);


    }catch(Exception e)
    {
e.printStackTrace();
    }


    }

     public void viewOnLedgerBasis()
    {
          int i=0,j=0;
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();

    try
    {

         ps = con.prepareStatement("select * from ledgerheadsetup where ledgertitle=?");
ps.setString(1,ledgerCombo.getSelectedItem().toString());
rs1 = ps.executeQuery();
rs1.next();
         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,paid,date,remaining,ledgercode,feetype from feepaid left join studententry on studentid=id where ledgercode=? and paid!=0 order by studentid");
        ps.setInt(1,rs1.getInt(2));
        rs=ps.executeQuery();

        ledgerDetailForPayment(rs);


    }catch(Exception e)
    {
e.printStackTrace();
    }


    }


    public void viewOnFeeHeadBasis()
    {
          int i=0,j=0;
          int feetype=getFeetypeOfFeeHead(feeCombo.getSelectedItem().toString());
    //con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,paid,date,remaining,ledgercode,feetype from feepaid left join studententry on studentid=id where head=? and feetype=? and paid!=0 order by studentid");
       if(feetype==0)
       {
         ps.setInt(1,Integer.parseInt(monthlyfeemap1.get(feeCombo.getSelectedItem()).toString()));
          ps.setInt(2,feetype);
       }
           if(feetype==1)
           {
         ps.setInt(1,Integer.parseInt(admissionfeemap1.get(feeCombo.getSelectedItem()).toString()));
          ps.setInt(2,feetype);
           }
           if(feetype==2)
           {
         ps.setInt(1,Integer.parseInt(periodicfeemap1.get(feeCombo.getSelectedItem()).toString()));
          ps.setInt(2,feetype);
           }
           if(feetype==3)
           {
         ps.setInt(1,Integer.parseInt(otherfeemap1.get(feeCombo.getSelectedItem()).toString()));
          ps.setInt(2,feetype);
           }
        rs=ps.executeQuery();

       ledgerDetailForPayment(rs);

    }catch(Exception e)
    {
e.printStackTrace();
    }


    }


    public int getFeetypeOfFeeHead(String head)
    {
     //   con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        int feeid=0;
        int feetype1=0;
        try
        {
            ps=con.prepareStatement("select * from monthlyfeehead where head=?");
                                   ps.setString(1,head);
                                   rs=ps.executeQuery();
                                   if(rs.next())
                                   {
                                       feeid=rs.getInt(1);
                                       feetype1=0;
                                       System.out.println("ffffffffffffffff");
                                       return feetype1;
                                   }

                                  ps=con.prepareStatement("select * from admissionfeehead where head=?");
                                   ps.setString(1,head);
                                   rs=ps.executeQuery();
                                   if(rs.next())
                                   {
                                       feeid=rs.getInt(1);
                                       feetype1=1;
                                       System.out.println("in admission");
                                   }

                                    ps=con.prepareStatement("select * from periodicfeehead where head=?");
                                   ps.setString(1,head);
                                   rs=ps.executeQuery();
                                   if(rs.next())
                                   {
                                       feeid=rs.getInt(1);
                                       feetype1=2;
                                       System.out.println("in periodic");
                                   }

                                    ps=con.prepareStatement("select * from ledgerotherfeeheadcode where feehead=?");
                                   ps.setString(1,head);
                                   rs=ps.executeQuery();
                                   if(rs.next())
                                   {
                                       feeid=rs.getInt(3);
                                       feetype1=3;
                                       System.out.println("in Ledger");
                                   }

        }catch(Exception e)
        {
            e.printStackTrace();
        }
             return feetype1;
    }

    public void ledgerDetailForDues(ResultSet rs)
    {
         int i=0,j=0,feetype=0;
         try
         {
          while(rs.next())
            {
                j++;

            }
            rs.first();
            rs.previous();
            System.out.println("rd"+j);

            dm.setRowCount(j);

            while(rs.next())
            {

feetype=rs.getInt(10);

            dm.setValueAt(rs.getString(2), i, 1);
            dm.setValueAt(rs.getString(3), i, 2);

            if(feetype==0)
            dm.setValueAt(monthlyfeemap.get(rs.getInt(5)), i, 3);
            if(feetype==1)
            dm.setValueAt(admissionfeemap.get(rs.getInt(5)), i, 3);
            if(feetype==2)
            dm.setValueAt(periodicfeemap.get(rs.getInt(5)), i, 3);
            if(feetype==3)
            dm.setValueAt(otherfeemap.get(rs.getInt(5)), i, 3);
            dm.setValueAt(rs.getDouble(6), i, 4);
            dm.setValueAt(monthmap.get(rs.getInt(7)), i, 5);
            dm.setValueAt(0, i, 6);
            dm.setValueAt(rs.getString(8), i, 7);
   ps = con.prepareStatement("select * from ledgerheadsetup where ledgercode=?");
ps.setInt(1,rs.getInt(9));
rs1 = ps.executeQuery();
rs1.next();

dm.setValueAt(rs1.getString(1), i, 0);
            i++;
        }

         }catch(Exception e)
         {
             e.printStackTrace();
         }

    }

     public void viewDuesOnMonthBasis()
    {
          int i=0,j=0;
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         try
    {


         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,date,ledgercode,feetype from feedues left join studententry on studentid=id where month=? and dues!=0 order by studentid");
        ps.setInt(1,Integer.parseInt(monthmap1.get(monthCombo1.getSelectedItem()).toString()));
        rs=ps.executeQuery();
ledgerDetailForDues(rs);
      
    }catch(Exception e)
    {
e.printStackTrace();
    }


    }

    public void viewDuesOnClassBasis()
    {
          int i=0,j=0;
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         try
    {


         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,date,ledgercode,feetype from feedues left join studententry on studentid=id where class=? and dues!=0 order by studentid");
        ps.setInt(1,Integer.parseInt(classmap1.get(classCombo1.getSelectedItem()).toString()));
        rs=ps.executeQuery();

      ledgerDetailForDues(rs);

    }catch(Exception e)
    {
e.printStackTrace();
    }


    }

     public void viewDuesOnLedgerBasis()
    {
          int i=0,j=0;
  //  con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();

    try
    {


         ps = con.prepareStatement("select * from ledgerheadsetup where ledgertitle=?");
ps.setString(1,ledgerCombo1.getSelectedItem().toString());
rs1 = ps.executeQuery();
rs1.next();

         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,date,ledgercode,feetype from feedues left join studententry on studentid=id where ledgercode=? and dues!=0 order by studentid");
        ps.setInt(1,rs1.getInt(2));
        rs=ps.executeQuery();
ledgerDetailForDues(rs);

    }catch(Exception e)
    {
e.printStackTrace();
    }


    }


    public void viewDuesOnFeeHeadBasis()
    {
          int i=0,j=0;
          int feetype=getFeetypeOfFeeHead(feeCombo1.getSelectedItem().toString());
          System.out.println("Feetype="+feetype);
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,date,ledgercode,feetype from feedues left join studententry on studentid=id where head=? and feetype=? and dues!=0 order by studentid");
       if(feetype==0)
       {
         ps.setInt(1,Integer.parseInt(monthlyfeemap1.get(feeCombo1.getSelectedItem()).toString()));
          ps.setInt(2,feetype);
       }
           if(feetype==1)
           {
         ps.setInt(1,Integer.parseInt(admissionfeemap1.get(feeCombo1.getSelectedItem()).toString()));
          ps.setInt(2,feetype);
           }
           if(feetype==2)
           {
         ps.setInt(1,Integer.parseInt(periodicfeemap1.get(feeCombo1.getSelectedItem()).toString()));
          ps.setInt(2,feetype);
           }
           if(feetype==3)
           {
         ps.setInt(1,Integer.parseInt(otherfeemap1.get(feeCombo1.getSelectedItem()).toString()));
         System.out.println("head="+Integer.parseInt(otherfeemap1.get(feeCombo1.getSelectedItem()).toString()));
          ps.setInt(2,feetype);
           System.out.println("type="+feetype);
           }
        rs=ps.executeQuery();
        //rs=ps.executeQuery();
ledgerDetailForDues(rs);
    }catch(Exception e)
    {
e.printStackTrace();
    }
    }


    public void fromClass()
    {
         try
    {

// con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();


         ps = con.prepareStatement("select * from classsetup");

             rs = ps.executeQuery();


            while (rs.next())
            {
        classCombo.addItem(rs.getString(1));

 classCombo1.addItem(rs.getString(1));

            }
 // con.close();
         }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }

    }

    

    public void fromFeeHead()
    {
         try
    {

              ps = con.prepareStatement("select distinct head from feepaid where feetype=0");

             rs = ps.executeQuery();


            while (rs.next())
            {

         feeCombo.addItem(monthlyfeemap.get(rs.getInt(1)));
       
            }

                ps = con.prepareStatement("select distinct head from feepaid where feetype=1");

             rs = ps.executeQuery();


            while (rs.next())
            {

         feeCombo.addItem(admissionfeemap.get(rs.getInt(1)));

            }

              ps = con.prepareStatement("select distinct head from feepaid where feetype=2");

             rs = ps.executeQuery();


            while (rs.next())
            {

         feeCombo.addItem(periodicfeemap.get(rs.getInt(1)));

            }

              ps = con.prepareStatement("select distinct head from feepaid where feetype=3");

             rs = ps.executeQuery();


            while (rs.next())
            {

         feeCombo.addItem(otherfeemap.get(rs.getInt(1)));

            }

 // con.close();
         }

 
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }

    }

public void fromFeeDuesHead()
    {
         try
    {

// con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();


          ps = con.prepareStatement("select distinct head from feedues where feetype=0");

             rs = ps.executeQuery();


            while (rs.next())
            {

         feeCombo1.addItem(monthlyfeemap.get(rs.getInt(1)));
        
            }

                ps = con.prepareStatement("select distinct head from feedues where feetype=1");

             rs = ps.executeQuery();


            while (rs.next())
            {

         feeCombo1.addItem(admissionfeemap.get(rs.getInt(1)));

            }

              ps = con.prepareStatement("select distinct head from feedues where feetype=2");

             rs = ps.executeQuery();


            while (rs.next())
            {

         feeCombo1.addItem(periodicfeemap.get(rs.getInt(1)));

            }

              ps = con.prepareStatement("select distinct head from feedues where feetype=3");

             rs = ps.executeQuery();


            while (rs.next())
            {

         feeCombo1.addItem(otherfeemap.get(rs.getInt(1)));

            }

 // con.close();
         }

    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }

    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox classCombo;
    private javax.swing.JComboBox classCombo1;
    private datechooser.beans.DateChooserCombo datefrom;
    private datechooser.beans.DateChooserCombo dateto;
    private javax.swing.JComboBox feeCombo;
    private javax.swing.JComboBox feeCombo1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JComboBox ledgerCombo;
    private javax.swing.JComboBox ledgerCombo1;
    private javax.swing.JComboBox monthCombo;
    private javax.swing.JComboBox monthCombo1;
    private javax.swing.JLabel totaldues;
    private javax.swing.JLabel totalpaid;
    // End of variables declaration//GEN-END:variables
//Connection con;
ResultSet rs,rs1;
PreparedStatement ps;
}
