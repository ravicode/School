/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DayBookGUI1.java
 *
 * Created on Sep 26, 2009, 5:19:40 PM
 */

package com.duc.FeeDepartment;
import com.duc.ImportSection.MapForIndex;
import java.sql.*;
import javax.swing.table.DefaultTableModel;

import java.util.HashMap;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.engine.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.MessageFormat;
import javax.imageio.ImageIO;
import javax.swing.JTable.PrintMode;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import static com.duc.DatabaseConnection.DatabaseConnection.*;

/**
 *
 * @author Ravi Dangaich
 */
public class DayBookGUI1 extends javax.swing.JInternalFrame {
//DateFormat df;
DefaultTableModel dm;
 //MapForIndex mp=new MapForIndex();
         HashMap classmap=mp.getClassIndexName();
         HashMap sectionmap=mp.getSectionIndexName();
         HashMap month=mp.mapMonth();
         HashMap sessionmap1=mp.getSessionIndexFromName();
    /** Creates new form DayBookGUI1 */
    public DayBookGUI1() {
        initComponents();
       // con= com.duc.DatabaseConnection.DatabaseConnection.con;
         System.out.println("con of DayBookGUI1="+con);
        pack();
        //this.setLocationRelativeTo(null);
       // df=new SimpleDateFormat("yyyy-MM-dd");
         startdate.setDateFormat(df);
         //enddate.setDateFormat(df);
         dm = (DefaultTableModel)jXTable1.getModel();
        dm.setRowCount(0);
totalDayBook();
fromSession();
      
    }
     public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");

           rs = ps.executeQuery();
           // int i = 0,j=0;
          while(rs.next())
            {
                //j++;
    //          sessionCombo.addItem(rs.getString(1));

              if(rs.getInt(3)==1)
                 sessionValue=rs.getInt(2);

            }

         }
         catch(Exception e)
         {
             e.printStackTrace();
    }
   }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        viewButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        startdate = new datechooser.beans.DateChooserCombo();
        jLabel4 = new javax.swing.JLabel();
        todaycollection = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        waiverused = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        schoolexpenditure = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        surplusreceived = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel10 = new javax.swing.JLabel();
        charityobtained = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        charitygiven = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        transportcost = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        netvalue1 = new javax.swing.JLabel();
        netValue = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        surplusused = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel13 = new javax.swing.JLabel();
        refund1 = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("Daily Fee Collection Report");

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        viewButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        viewButton.setForeground(new java.awt.Color(0, 0, 255));
        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        jTextPane2.setBackground(new java.awt.Color(204, 204, 255));
        jTextPane2.setEditable(false);
        jTextPane2.setFont(new java.awt.Font("Tahoma", 0, 24));
        jTextPane2.setText("                                            Daily Total Collection Register");
        jTextPane2.setAutoscrolls(false);
        jScrollPane3.setViewportView(jTextPane2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setText("Date ");

        jLabel4.setText("Total Collection");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 255));
        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Total waiver");

        jLabel6.setText("Total School Expenditure");

        jLabel8.setText("Total Surplus");

        surplusreceived.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surplusreceivedActionPerformed(evt);
            }
        });

        jTextPane3.setBackground(new java.awt.Color(204, 204, 255));
        jTextPane3.setEditable(false);
        jTextPane3.setFont(new java.awt.Font("Tahoma", 0, 12));
        jTextPane3.setText("It will show the total ingoings and outgoings of the institute on a particular day of the session.It includes Students Fee, Staffs payment, Library Fines, Inventory and any other monetary issues related to institute...");
        jScrollPane4.setViewportView(jTextPane3);

        jLabel10.setText("Total Charity Obtained");

        jLabel9.setText("Total Charity given");

        jLabel11.setText("Transport Fuel & Maintenance");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jButton2.setForeground(new java.awt.Color(0, 0, 255));
        jButton2.setText("Table Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jButton3.setForeground(new java.awt.Color(0, 0, 255));
        jButton3.setText("Total");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        netvalue1.setFont(new java.awt.Font("Tahoma", 1, 14));
        netvalue1.setText("Net Total");

        jLabel12.setText("Used Surplus");

        surplusused.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surplususedActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Money In");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setText("Money Out");

        jLabel7.setText("(Money In - MoneyOut)");

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "", null, null, null, new Double(0.0), null, new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), new Double(0.0), null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Adm. No.", "Class", "Section", "Roll", "Head", "Dues", "Month", "Paid", "Balance", "Surplus", "Used Surplus", "Waiver", "Net", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jXTable1.setColumnControlVisible(true);
        jXTable1.setHorizontalScrollEnabled(true);
        jScrollPane2.setViewportView(jXTable1);

        jTextPane1.setText("\"View\" button will show total fee transaction(Fee-head wise) within the table on a particular date and total Surplus will be shown in the text box below.\"Total\" button will show the net transaction of a student on a particular date.It willn't consider the surplus deposited on the same date as on surplus used.So, In other day book format,you will have every transaction receipt no.wise.");
        jScrollPane1.setViewportView(jTextPane1);

        jLabel13.setText("Refund Amount");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(todaycollection, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(charityobtained, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                    .addComponent(surplusreceived, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))))
                        .addGap(43, 43, 43))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(netvalue1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(netValue, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(refund1)
                    .addComponent(transportcost, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(waiverused, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(schoolexpenditure, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(charitygiven, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(surplusused, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(370, 370, 370))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(234, 234, 234)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(505, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(482, 482, 482))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                        .addGap(10, 10, 10))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 954, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(startdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(todaycollection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(waiverused, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(schoolexpenditure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(charitygiven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12)
                                    .addComponent(surplusused, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(transportcost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(refund1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(surplusreceived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(charityobtained, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(netValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(netvalue1))
                                .addGap(4, 4, 4)
                                .addComponent(jLabel7))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        totalDayBook();

        // TODO add your handling code here:
}//GEN-LAST:event_viewButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        printFeeCollection();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
        String s="Student Day-Book Result";
        MessageFormat header=new MessageFormat(s);
        jXTable1.print(PrintMode.FIT_WIDTH, header, null);
        }

        catch(Exception e)
        {
         System.err.println("Error in printing Day book");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void surplusreceivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surplusreceivedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surplusreceivedActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        netTotal();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void surplususedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surplususedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surplususedActionPerformed
 
public void netTotal()
{
   // dm.setRowCount(0);
    int i=0,j=0;
   // con=new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
    {
         ps=con.prepareStatement("select distinct studentid from feepaid where date=? and dues!=0 order by studentid");
      ps.setString(1,startdate.getText());
         //ps.setInt(2,sessionValue);
        rs=ps.executeQuery();

        //System.out.println
        while(rs.next())
            {
                j++;

            }
            rs.first();
            rs.previous();

            System.out.println("rd"+j);

            dm.setRowCount(j);

            while(rs.next())
            {

            dm.setValueAt(rs.getString(1), i, 0);

dm.setValueAt(0.0, i, 7);
dm.setValueAt(0.0, i, 9);
dm.setValueAt(0.0, i, 10);
dm.setValueAt(0.0, i, 11);

            i++;
        }
            System.out.println("ffffffhhhhhhhhhhhhhh");
    }catch(Exception e)
        {
e.printStackTrace();
        }
    int r;
     try
    {
         for(r=0;r<dm.getRowCount();r++)
         {
         ps=con.prepareStatement("select sum(dues)sum1,sum(paid)sum from feepaid where studentid=? and dues!=0 and date=?");
        ps.setString(1,dm.getValueAt(r, 0).toString());
        ps.setString(2,startdate.getText());
        rs=ps.executeQuery();
        rs.next();
dm.setValueAt(rs.getDouble(1), r,5);
dm.setValueAt(rs.getDouble(2), r,7);

        }
         System.out.println("ffffffkkkkkkkkkkkkk");



     }

    catch(Exception e)
        {
        e.printStackTrace();

        }
    
try
    {
         for(r=0;r<dm.getRowCount();r++)
         {
         ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,paid,date,remaining,feetype from feepaid left join studententry on studentid=id  where studentid=? and date=? and dues!=0 order by studentid");
        ps.setString(1,dm.getValueAt(r, 0).toString());
        ps.setString(2,startdate.getText());
        rs=ps.executeQuery();
        rs.next();
dm.setValueAt(classmap.get(rs.getInt(2)), r, 1);
            dm.setValueAt(sectionmap.get(rs.getInt(3)), r, 2);
           dm.setValueAt(rs.getInt(4), r, 3);
            dm.setValueAt("Total", r, 4);
            dm.setValueAt("", r, 6);
            //dm.setValueAt(0, r, 7);
           dm.setValueAt(rs.getDouble(10), r, 8);
           dm.setValueAt(rs.getString(9), r, 13);


            ps=con.prepareStatement("select surplus from studenttodaysurplus where studentid=? and date=?");
        ps.setString(1,dm.getValueAt(r, 0).toString());
         ps.setString(2,startdate.getText());
         rs=ps.executeQuery();
         if(rs.next())
             dm.setValueAt(rs.getDouble(1), r,9);

         ps=con.prepareStatement("select surplus from studentusedsurplus where studentid=? and date=?");
        ps.setString(1,dm.getValueAt(r, 0).toString());
         ps.setString(2,startdate.getText());
         rs=ps.executeQuery();
         if(rs.next())
             dm.setValueAt(rs.getDouble(1), r,10);

         Double waiver=0.0;
          ps=con.prepareStatement("select waivergiven from feewaiver where studentid=? and date=?");
        ps.setString(1,dm.getValueAt(r, 0).toString());
         ps.setString(2,startdate.getText());
         rs=ps.executeQuery();
         while(rs.next())
         {
             waiver+=rs.getDouble(1);
         }
             dm.setValueAt(waiver, r,11);
             
Double net=(Double.parseDouble(dm.getValueAt(r, 7).toString())+Double.parseDouble(dm.getValueAt(r, 9).toString()))-(Double.parseDouble(dm.getValueAt(r, 10).toString())+Double.parseDouble(dm.getValueAt(r, 11).toString()));
       dm.setValueAt(net, r,12);
         }
         System.out.println("ffffff");
     }

//System.out.println("ffffff");
    catch(Exception e)
        {
        e.printStackTrace();

        }
}


   public void totalDayBook()
   {
       dayBook();
        todayCollection();
        todayWaiverCollection();
        todaySchoolExpenditure();
        totalSurplusCollected();
        totalSurplusUsed();
        totalCharityGiven();
        totalCharityObtained();
        totalTransportFuelCost();
       // totalSurplusUsed();
        totalRefundAmount();
        netValue();
        System.out.println("tttt"+startdate.getText());
   }

   public void totalRefundAmount()
   {
       Double balance=0.0;
       try
       {
           ps=con.prepareStatement("select * from studentrefund where date=? order by studentid");
           ps.setString(1,startdate.getText());
       //  ps.setString(2,enddate.getText());

        rs=ps.executeQuery();
        while(rs.next())
            {
                balance=balance+rs.getDouble(2);
            }
        refund1.setText(String.valueOf(balance));
       }catch(Exception e)
       {
           e.printStackTrace();
       }
   }
public void totalSurplusCollected()
{
     int i=0,j=0;
    Double balance=0.0;
   // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select * from studenttodaysurplus where date=?  order by studentid");
        ps.setString(1,startdate.getText());
       //  ps.setString(2,enddate.getText());

        rs=ps.executeQuery();
       // System.out.println("value"+rs.next());
        while(rs.next())
            {
                j++;
               // System.out.println("gender"+rs);
              //  System.out.println("rd2");
            }
            rs.first();
            rs.previous();
            System.out.println(startdate.getText());
            //dm.setRowCount(j);
            //System.out.println(j);
            //rs.next();
            while(rs.next())
            {
                balance=balance+rs.getDouble(2);
            }
    }       catch(Exception e)
            {
        e.printStackTrace();
            }
     surplusreceived.setText(String.valueOf(balance));

}


public void totalSurplusUsed()
{
     int i=0,j=0;
    Double balance=0.0;
   // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select * from studentusedsurplus where date=?  order by studentid");
        ps.setString(1,startdate.getText());
       //  ps.setString(2,enddate.getText());

        rs=ps.executeQuery();
       // System.out.println("value"+rs.next());
        while(rs.next())
            {
                j++;
               // System.out.println("gender"+rs);
              //  System.out.println("rd2");
            }
            rs.first();
            rs.previous();
            System.out.println(startdate.getText());
            //dm.setRowCount(j);
            //System.out.println(j);
            //rs.next();
            while(rs.next())
            {
                balance=balance+rs.getDouble(2);
            }
    }       catch(Exception e)
            {
        e.printStackTrace();
            }
     surplusused.setText(String.valueOf(balance));

}

public void getClassIndexName()
    {
        try
        {
           // con= com.duc.DatabaseConnection.DatabaseConnection.con;
            ps=con.prepareStatement("select classid,classtitle from classsetup");
            rs=ps.executeQuery();
            while(rs.next())
            {
                classmap.put(rs.getInt(1),rs.getString(2));
            }

        }catch(Exception e)
        {
            e.printStackTrace();
        }

    }

     public void getSectionIndexName()
    {
         try
        {
             // con= com.duc.DatabaseConnection.DatabaseConnection.con;
            ps=con.prepareStatement("select sectionid,sectiontitle from sectionsetuplist");
            rs=ps.executeQuery();
            while(rs.next())
            {
                sectionmap.put(rs.getInt(1),rs.getString(2));
            }

        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
/*public void totalSurplusUsed()
{
     int i=0,j=0;
    Double balance=0.0;
  // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select * from studentusedsurplus where date=?  order by studentid");
        ps.setString(1,startdate.getText());
         //ps.setString(2,enddate.getText());

        rs=ps.executeQuery();
       // System.out.println("value"+rs.next());
        while(rs.next())
            {
                j++;
               // System.out.println("gender"+rs);
              //  System.out.println("rd2");
            }
            rs.first();
            rs.previous();
            System.out.println(startdate.getText());
            //dm.setRowCount(j);
            //System.out.println(j);
            //rs.next();
            while(rs.next())
            {
                balance=balance+rs.getDouble(2);
            }
    }       catch(Exception e)
            {
        e.printStackTrace();
            }
    // surplusused.setText(String.valueOf(balance));

}*/
    public void todayWaiverCollection()
    {
         int i=0,j=0;
    Double balance=0.0;
   // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select * from feewaiver where date=? order by studentid");
        ps.setString(1,startdate.getText());
       //  ps.setString(2,enddate.getText());

        rs=ps.executeQuery();
       // System.out.println("value"+rs.next());
        while(rs.next())
            {
                j++;
               // System.out.println("gender"+rs);
              //  System.out.println("rd2");
            }
            rs.first();
            rs.previous();
            System.out.println(startdate.getText());
            //dm.setRowCount(j);
            //System.out.println(j);
            //rs.next();
            while(rs.next())
            {
                balance=balance+rs.getDouble(6);
            }
    }       catch(Exception e)
            {
        e.printStackTrace();
            }
     waiverused.setText(String.valueOf(balance));
   
    }


    public void todaySchoolExpenditure()
    {
         int i=0,j=0;
    Double balance=0.0;
    // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select * from schoolexpenditure where date=? ");
        ps.setString(1,startdate.getText());
        // ps.setString(2,enddate.getText());

        rs=ps.executeQuery();
       // System.out.println("value"+rs.next());
        while(rs.next())
            {
                j++;
               // System.out.println("gender"+rs);
              //  System.out.println("rd2");
            }
            rs.first();
            rs.previous();
            System.out.println(startdate.getText());
            //dm.setRowCount(j);
            //System.out.println(j);
            //rs.next();
            while(rs.next())
            {
               balance=balance+(rs.getDouble(5)-rs.getDouble(6));
            }
    }       catch(Exception e)
            {
        e.printStackTrace();
            }
     schoolexpenditure.setText(String.valueOf(balance));
    }

 public void printFeeCollection()
{
String sd=startdate.getText();
//String ed=enddate.getText();

try
{
// con= com.duc.DatabaseConnection.DatabaseConnection.con;
             HashMap map = new HashMap();

          ps=con.prepareStatement("select institutename, instituteaddress from instituteregistration" );
          rs = ps.executeQuery();
          rs.next();
          map.put("schoolname",rs.getString(1));
          map.put("schooladdress",rs.getString(2));
          map.put("startdate", sd);
         // map.put("enddate", ed);
          map.put("net",netValue.getText());
          map.put("total_c",todaycollection.getText());
          map.put("total_e",schoolexpenditure.getText());
          map.put("total_w", waiverused.getText());
          map.put("surplus", surplusreceived.getText());
          map.put("charity_O", charityobtained.getText());
          map.put("charity_G", charitygiven.getText());
          map.put("transportcost", transportcost.getText());

           BufferedImage bimg = null;
           bimg = ImageIO.read(new File("images/logo.jpg"));
           map.put("logo",bimg);

           ps=con.prepareStatement("select studentid,name,feepaid.`class`,feepaid.`section`,feepaid.`roll`,SUM(paid) as paid from `feepaid` left join studententry on studentid=id where date=? group by studentid;");
           ps.setString(1, sd);
           //ps.setString(2, ed);
           rs=ps.executeQuery();

                JRResultSetDataSource src = new JRResultSetDataSource(rs);
                JasperReport js = JasperCompileManager.compileReport("reports/fee/fee_collection.jrxml");
                JasperPrint pr = JasperFillManager.fillReport(js,map,src);
                JasperViewer jv = new JasperViewer(pr, false);
               // jv.setTitle("Fee Collection Report of "+sd+" to "+ed);
                 jv.setTitle("Fee Collection Report of "+sd);
                jv.setVisible(true);
                

}
catch(Exception e)
{
 System.out.println(" Error is ..."+e);
}

}



public void todayCollection()
{
     Double totaldues=0.0;
    int rowcount=dm.getRowCount();
    for(int i=0;i<rowcount;i++)
    {
        System.out.println("rd");
        totaldues+=Double.parseDouble(dm.getValueAt(i,7).toString());

    }   todaycollection.setText(String.valueOf(totaldues));
}
 public void totalTransportFuelCost()
{
    int i=0,j=0;
    Double balance=0.0;
   // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select * from transportfuel where date=?");

ps.setString(1,startdate.getText());
        rs=ps.executeQuery();
       // System.out.println("value"+rs.next());
        while(rs.next())
            {
                j++;
               // System.out.println("gender"+rs);
              //  System.out.println("rd2");
            }
            rs.first();
            rs.previous();

            //dm.setRowCount(j);
            //System.out.println(j);
            //rs.next();
            while(rs.next())
            {
                balance=balance+rs.getDouble(4);
            }

             ps=con.prepareStatement("select * from transportmaintenance where date=?");
             ps.setString(1,startdate.getText());
             rs=ps.executeQuery();
             while(rs.next())
                 balance=balance+rs.getDouble(4);
    }       catch(Exception e)
            {
        e.printStackTrace();
            }  transportcost.setText(String.valueOf(balance));
}


     public void  totalCharityObtained()
{
    int i=0,j=0;
    Double balance=0.0;
    // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select * from charityobtained where date=?");
ps.setString(1,startdate.getText());

        rs=ps.executeQuery();
       // System.out.println("value"+rs.next());
        while(rs.next())
            {
                j++;

            }
            rs.first();
            rs.previous();

            while(rs.next())
            {
                balance=balance+rs.getDouble(3);
            }
    }       catch(Exception e)
            {
        e.printStackTrace();
            }  charityobtained.setText(String.valueOf(balance));
}


      public void  totalCharityGiven()
{
    int i=0,j=0;
    Double balance=0.0;
   // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select * from charitygiven where date=?");

ps.setString(1,startdate.getText());
        rs=ps.executeQuery();
       // System.out.println("value"+rs.next());
        while(rs.next())
            {
                j++;

            }
            rs.first();
            rs.previous();

            while(rs.next())
            {
                balance=balance+rs.getDouble(3);
            }
    }       catch(Exception e)
            {
        e.printStackTrace();
            }  charitygiven.setText(String.valueOf(balance));
}

      public void loadTable(ResultSet rs)
           {
          int i=0,j=0;
           int feeid=0;
          try
          {
              if(rs.next())
              {
              rs.first();
              rs.previous();

              while(rs.next())
            {
                j++;
             
            }
            rs.first();
            rs.previous();
            System.out.println(startdate.getText());
            dm.setRowCount(j);
            System.out.println(j);
            //rs.next();
            while(rs.next())
            {
            dm.setValueAt(rs.getString(1), i, 0);
                dm.setValueAt(classmap.get(rs.getInt(2)), i, 1);
                 dm.setValueAt(sectionmap.get(rs.getInt(3)), i, 2);
                 dm.setValueAt(rs.getInt(4), i, 3);
                //dm.setValueAt(rs.getString(5), i, 4);
                 dm.setValueAt(rs.getDouble(6), i, 5);
                  dm.setValueAt(month.get(rs.getInt(7)), i, 6);
                 dm.setValueAt(rs.getDouble(8), i, 7);
                         dm.setValueAt(rs.getDouble(10), i, 8);
                 dm.setValueAt(rs.getString(9), i, 13);
                  dm.setValueAt(0.0, i, 9);
                   dm.setValueAt(0.0, i, 10);
                    dm.setValueAt(0.0, i, 11);
                     dm.setValueAt(0.0, i, 12);

                 if(rs.getInt(11)==0)
                 {
                  ps=con.prepareStatement("select * from monthlyfeehead where feeid=?");
                                   ps.setInt(1,rs.getInt(5));
                                   rs1=ps.executeQuery();
                                   if(rs1.next())
                                   {
                                       feeid=rs1.getInt(1);
                                      dm.setValueAt(rs1.getString(2), i, 4);
                                       System.out.println("ffffffffffffffff");
                                   }
                 }
                 if(rs.getInt(11)==1)
                 {
                                  ps=con.prepareStatement("select * from admissionfeehead where feeid=?");
                                   ps.setInt(1,rs.getInt(5));
                                   rs1=ps.executeQuery();
                                   if(rs1.next())
                                   {
                                       feeid=rs1.getInt(1);
                                       dm.setValueAt(rs1.getString(2), i, 4);
                                       System.out.println("in admission");
                                   }
                 }
                  if(rs.getInt(11)==2)
                 {
                                    ps=con.prepareStatement("select * from periodicfeehead where feeid=?");
                                   ps.setInt(1,rs.getInt(5));
                                   rs1=ps.executeQuery();
                                   if(rs1.next())
                                   {
                                       feeid=rs1.getInt(1);
                                       dm.setValueAt(rs1.getString(2), i, 4);
                                       System.out.println("in periodic");
                                   }
                  }
                            if(rs.getInt(11)==3)
                 {         ps=con.prepareStatement("select * from ledgerotherfeeheadcode where feeid=?");
                                   ps.setInt(1,rs.getInt(5));
                                   rs1=ps.executeQuery();
                                   if(rs1.next())
                                   {
                                       feeid=rs1.getInt(3);
                                        dm.setValueAt(rs1.getString(1), i, 4);
                                       System.out.println("in Ledger");
                                   }
                            }
                 i++;
        }
          }
              else dm.setRowCount(0);
          }catch(Exception e)
          {
              e.printStackTrace();
          }
      }

    public void dayBook()
{
    int i=0,j=0;
    int feeid=0;
   // con= com.duc.DatabaseConnection.DatabaseConnection.con;
    try
    {
        ps=con.prepareStatement("select studentid,class,section,roll,head,dues,month,paid,date,remaining,feetype from feepaid left join studententry on studentid=id where date=?and dues!=0 order by studentid");
        ps.setString(1,startdate.getText());
     
        rs=ps.executeQuery();
        loadTable(rs);
      
    }catch(Exception e)
    {
e.printStackTrace();
    }
}
public void netValue()
    {
    Double totalcollection=Double.parseDouble(todaycollection.getText());
    Double totalsurplus=Double.parseDouble(surplusreceived.getText());

     Double totalcharityobtained=Double.parseDouble(charityobtained.getText());
    Double totalschoolex=Double.parseDouble(schoolexpenditure.getText());

     Double totalcharitygiven=Double.parseDouble(charitygiven.getText());
    Double totalwaiver=Double.parseDouble(waiverused.getText());

     Double totaltransport=Double.parseDouble(transportcost.getText());
     Double totalusedsurplus=Double.parseDouble(surplusused.getText());
     Double totalrefund=Double.parseDouble(refund1.getText());
    Double netvalue1=totalcollection+totalsurplus+totalcharityobtained-(totalschoolex+totalcharitygiven+totalwaiver+totaltransport+totalusedsurplus+totalrefund);

 netValue.setText(netvalue1.toString());
    }
   // public void netValue()
   // {
   //     netValue.setText(String.valueOf((Double.parseDouble(todaycollection.getText())+Double.parseDouble(surplusreceived.getText())-(Double.parseDouble(schoolexpenditure.getText())+Double.parseDouble(waiverused.getText())))));
   // }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField charitygiven;
    private javax.swing.JTextField charityobtained;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private org.jdesktop.swingx.JXTable jXTable1;
    private javax.swing.JTextField netValue;
    private javax.swing.JLabel netvalue1;
    private javax.swing.JTextField refund1;
    private javax.swing.JTextField schoolexpenditure;
    private datechooser.beans.DateChooserCombo startdate;
    private javax.swing.JTextField surplusreceived;
    private javax.swing.JTextField surplusused;
    private javax.swing.JTextField todaycollection;
    private javax.swing.JTextField transportcost;
    private javax.swing.JButton viewButton;
    private javax.swing.JTextField waiverused;
    // End of variables declaration//GEN-END:variables
//Connection con;
ResultSet rs,rs1;
PreparedStatement ps;
public Integer sessionValue;

}
