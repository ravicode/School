/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InventorySearch1.java
 *
 * Created on Sep 30, 2009, 9:36:21 AM
 */

package com.duc.SpecialDepartment.InventorySection.InventoryDepartment.search;
import com.duc.ImportSection.MapForIndex;
import com.duc.ImportSection.MapForInventoryIndex;
import java.awt.image.BufferedImage;
import java.io.File;
import java.sql.*;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.engine.*;
import static com.duc.DatabaseConnection.DatabaseConnection.*;
/**
 *
 * @author Ravi Dangaich
 */
public class InventorySearch1 extends javax.swing.JInternalFrame {
DefaultTableModel dm;

//MapForIndex mp=new MapForIndex();
//MapForInventoryIndex mpi=new MapForInventoryIndex();
    HashMap categoryc=mpi.getCategoryIndexToName();
    HashMap modem=mpi.getModeIndexToName();
    HashMap schoolpurchasers=mpi.getSchoolPurchaserIndexToName();
    HashMap vendornamev=mpi.getVendorNameIndexToName();
    HashMap unitu=mpi.getUnitIndexToName();
    HashMap classmap=mp.getClassIndexName();

    HashMap category1=mpi.getCategoryIndexFromName();
    HashMap mode1=mpi.getModeIndexFromName();
    HashMap schoolpurchaser1=mpi.getSchoolPurchaserIndexFromName();
    HashMap vendorname1=mpi.getVendorNameIndexFromName();
    HashMap unit1=mpi.getUnitIndexFromName();
    HashMap classmap1=mp.getClassIndexFromName();
    /** Creates new form InventorySearch1 */
    public InventorySearch1() {
        initComponents();
        pack();
       // this.setLocationRelativeTo(null);
        dm = (DefaultTableModel) jXTable1.getModel();
        dm.setRowCount(0);

        //this.setSize(1024,740);
        addClass();
        addinventorycategory();
        addVendor();
        addInventoryName();
        addMode();
        addProperty1();
        addProperty2();
                addProperty3();

                 showAllInventory();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        name = new javax.swing.JComboBox();
        schoolclass = new javax.swing.JComboBox();
        mode = new javax.swing.JComboBox();
        vendor = new javax.swing.JComboBox();
        property1 = new javax.swing.JComboBox();
        property2 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        showAllInventory = new javax.swing.JButton();
        printStockList = new javax.swing.JButton();
        searchStock = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        property3 = new javax.swing.JComboBox();
        namecheck = new javax.swing.JCheckBox();
        idcheck = new javax.swing.JCheckBox();
        modecheck = new javax.swing.JCheckBox();
        vendorcheck = new javax.swing.JCheckBox();
        property1check = new javax.swing.JCheckBox();
        property2check = new javax.swing.JCheckBox();
        property3check = new javax.swing.JCheckBox();
        category = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        categorycheck = new javax.swing.JCheckBox();
        printStockList1 = new javax.swing.JButton();

        jMenuItem1.setText("Delete Inventory Records");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setClosable(true);
        setIconifiable(true);
        setTitle("Inventory Quest");

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.setForeground(new java.awt.Color(0, 153, 255));

        name.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        schoolclass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        schoolclass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schoolclassActionPerformed(evt);
            }
        });

        mode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeActionPerformed(evt);
            }
        });

        vendor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        vendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vendorActionPerformed(evt);
            }
        });

        property1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        property1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                property1ActionPerformed(evt);
            }
        });

        property2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        property2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                property2ActionPerformed(evt);
            }
        });

        jLabel7.setText("     Extensive Search"); // NOI18N

        showAllInventory.setText("Show All"); // NOI18N
        showAllInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllInventoryActionPerformed(evt);
            }
        });

        printStockList.setText("Print Table"); // NOI18N
        printStockList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printStockListActionPerformed(evt);
            }
        });

        searchStock.setText("Search"); // NOI18N
        searchStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchStockActionPerformed(evt);
            }
        });

        exitButton.setText("Exit"); // NOI18N
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        property3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        property3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                property3ActionPerformed(evt);
            }
        });

        namecheck.setBackground(new java.awt.Color(0, 204, 204));
        namecheck.setText("Name"); // NOI18N

        idcheck.setBackground(new java.awt.Color(0, 204, 204));
        idcheck.setText("Class"); // NOI18N

        modecheck.setBackground(new java.awt.Color(0, 204, 204));
        modecheck.setText("Mode"); // NOI18N

        vendorcheck.setBackground(new java.awt.Color(0, 204, 204));
        vendorcheck.setText("Vendor"); // NOI18N

        property1check.setBackground(new java.awt.Color(0, 204, 204));
        property1check.setText("Prop1"); // NOI18N

        property2check.setBackground(new java.awt.Color(0, 204, 204));
        property2check.setText("Prop2"); // NOI18N

        property3check.setBackground(new java.awt.Color(0, 204, 204));
        property3check.setText("Prop3"); // NOI18N

        category.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });

        jXTable1.setBackground(new java.awt.Color(204, 204, 255));
        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Category", "Name", "Qty", "Opening Balance", "Mode", "C.P.", "S.P.", "Vendor", "Class", "Prop1", "Prop2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.setComponentPopupMenu(jPopupMenu1);
        jScrollPane1.setViewportView(jXTable1);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 0, 24));
        jTextPane1.setText("                                        Inventory Search"); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        categorycheck.setBackground(new java.awt.Color(0, 204, 204));
        categorycheck.setText("Category");

        printStockList1.setText("Show Asset"); // NOI18N
        printStockList1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printStockList1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 979, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(760, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(property3check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(property2check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(namecheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(idcheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(property1check, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(modecheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(vendorcheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(property3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(property2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(property1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(vendor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(schoolclass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(name, 0, 163, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(categorycheck)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(category, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(showAllInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(printStockList1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchStock, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(printStockList, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(property3check)
                            .addComponent(property3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(namecheck))
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idcheck)
                                    .addComponent(schoolclass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(modecheck)
                                    .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(vendorcheck)
                                    .addComponent(vendor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(property1check)
                                    .addComponent(property1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(property2check)
                                    .addComponent(property2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(categorycheck)
                                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(showAllInventory)
                                    .addComponent(printStockList1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchStock)
                                    .addComponent(printStockList))
                                .addGap(18, 18, 18)
                                .addComponent(exitButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        if(namecheck.isSelected())
            createQuery();
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void schoolclassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schoolclassActionPerformed
        if(idcheck.isSelected())
            createQuery();              // TODO add your handling code here:
}//GEN-LAST:event_schoolclassActionPerformed

    private void modeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeActionPerformed
        if(modecheck.isSelected())
            createQuery();         // TODO add your handling code here:
}//GEN-LAST:event_modeActionPerformed

    private void vendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vendorActionPerformed
        if(vendorcheck.isSelected())
            createQuery();               // TODO add your handling code here:
}//GEN-LAST:event_vendorActionPerformed

    private void property1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_property1ActionPerformed
        if(property1check.isSelected())
            createQuery();             // TODO add your handling code here:
}//GEN-LAST:event_property1ActionPerformed

    private void property2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_property2ActionPerformed
        if(property2check.isSelected())
            createQuery();             // TODO add your handling code here:
}//GEN-LAST:event_property2ActionPerformed

    private void showAllInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllInventoryActionPerformed

        showAllInventory();

        // TODO add your handling code here:
}//GEN-LAST:event_showAllInventoryActionPerformed

    private void printStockListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printStockListActionPerformed

        inventoryStockSearch();
}//GEN-LAST:event_printStockListActionPerformed

    private void searchStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStockActionPerformed
        createQuery();        // TODO add your handling code here:
        //each include name field upto 6th if
        //

    }//GEN-LAST:event_searchStockActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();        // TODO add your handling code here:
}//GEN-LAST:event_exitButtonActionPerformed

    private void property3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_property3ActionPerformed
        if(property3check.isSelected())
            createQuery();            // TODO add your handling code here:
}//GEN-LAST:event_property3ActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
        if(categorycheck.isSelected())
            createQuery();                // TODO add your handling code here:
}//GEN-LAST:event_categoryActionPerformed

    private void printStockList1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printStockList1ActionPerformed
       showAsset();
      // printStockList2.setEnabled(false);
    }//GEN-LAST:event_printStockList1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       deleteInventory();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void deleteInventory()
    {
       int choose=JOptionPane.showConfirmDialog(null,"Do you Delete this student permanently?","Delete Student",JOptionPane.OK_OPTION);
         if(choose==JOptionPane.OK_OPTION)
         {
         int crow=jXTable1.getSelectedRow();
        String id=dm.getValueAt(crow,0).toString();
  // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
    try
     {

        ps=con.prepareStatement("select * from studentinventorypurchase where inventoryid=?") ;
      ps.setInt(1,Integer.parseInt(id));
      rs=ps.executeQuery();
      if(!rs.next())
      {
      ps=con.prepareStatement("delete from inventorydeposit where InventoryId=?") ;
      ps.setInt(1,Integer.parseInt(id));
      ps.executeUpdate();

       ps=con.prepareStatement("delete from invclasswise where invid=?") ;
      ps.setInt(1,Integer.parseInt(id));
      ps.executeUpdate();

       ps=con.prepareStatement("delete from involddeposit where invname=?") ;
      ps.setInt(1,Integer.parseInt(id));
      ps.executeUpdate();

      showAllInventory();
      }
      else
      {
          int select=JOptionPane.showConfirmDialog(null,"Sold Out Inventory Record Present,On OK Record will be also deleted");
         if(select==JOptionPane.OK_OPTION)
         {
             ps=con.prepareStatement("delete from inventorydeposit where InventoryId=?") ;
      ps.setInt(1,Integer.parseInt(id));
      ps.executeUpdate();

       ps=con.prepareStatement("delete from invclasswise where invid=?") ;
      ps.setInt(1,Integer.parseInt(id));
      ps.executeUpdate();

       ps=con.prepareStatement("delete from involddeposit where invname=?") ;
      ps.setInt(1,Integer.parseInt(id));
      ps.executeUpdate();

      ps=con.prepareStatement("delete from studentinventorypurchase where inventoryid=?") ;
      ps.setInt(1,Integer.parseInt(id));
      ps.executeUpdate();

      showAllInventory();
         }
      }

     }catch(Exception e)
     {
         e.printStackTrace();
     }
     }
    }

    public void showAsset()
    {
         try
        {
            p = con.prepareStatement("select * from inventorydeposit left join invclasswise on InventoryId=invid where type=1");
            rs = p.executeQuery();
         commonFilter(rs);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    public void addinventorycategory()
    {
         try{

         ps = con.prepareStatement("select * from invcategorysetup order by invcategory");

             rs = ps.executeQuery();

            while (rs.next())
        category.addItem(rs.getString(1));

    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
    }
    public void addClass()
    {
         //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try{

         ps = con.prepareStatement("select * from classsetup");

             rs = ps.executeQuery();

            while (rs.next())
        schoolclass.addItem(rs.getString(1));

    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
    }

   public void addVendor()
    {
        try{

       ps = con.prepareStatement("select * from inventorysellersetup");

             rs = ps.executeQuery();


            while (rs.next())
        vendor.addItem(rs.getString(1));

    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
    }
   public void addInventoryName()
    {
        try{


         ps = con.prepareStatement("select * from inventorydeposit order by invname");

             rs = ps.executeQuery();

            while (rs.next())
        name.addItem(rs.getString(3));


    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
    }
   public void addMode()
   {
       try{

         ps = con.prepareStatement("select * from inventorymodesetup");

             rs = ps.executeQuery();


            while (rs.next())
        mode.addItem(rs.getString(1));

    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
   }

   public void addProperty1()
   {
       try{

         ps = con.prepareStatement("select * from inventorydeposit");

             rs = ps.executeQuery();
            while (rs.next())
            {
        property1.addItem(rs.getString(12));
             property1.removeItem("null");
            }

    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }

   }

     public void addProperty2()
   {
       try{

         ps = con.prepareStatement("select * from inventorydeposit");

             rs = ps.executeQuery();


            while (rs.next())
            {
             property2.addItem(rs.getString(13));
            property2.removeItem("null");
            }
    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }

   }
       public void addProperty3()
   {
       try{
      ps = con.prepareStatement("select * from inventorydeposit");

        rs = ps.executeQuery();


            while (rs.next())
            {
             property3.addItem(rs.getString(14));
            property3.removeItem("null");
            }
      // con.close();
       System.out.println("Database connection closed");

    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }

   }
 public void inventoryStockSearch()
    {
         JRTableModelDataSource src = new JRTableModelDataSource(dm);
        HashMap map = new HashMap();
        BufferedImage bimg = null;
       try {
            bimg = ImageIO.read(new File("images/logo.jpg"));
//bimg = ImageIO.read(new File("./img/SchoolPlusLogo.jpg"));

        } catch (Exception ex) {
            Logger.getLogger(InventorySearch1.class.getName()).log(Level.SEVERE, null, ex);
        }
       map.put("logo",bimg);
        try {
                JasperReport js = JasperCompileManager.compileReport("reports/nameSameJustTheHead/inventorystocksearch.jrxml");
              // JasperReport js = JasperCompileManager.compileReport("./reports/report2.jrxml");
                JasperPrint pr = JasperFillManager.fillReport(js, map,src);
                JasperViewer jv = new JasperViewer(pr, false);
                jv.setVisible(true);
            }
            catch (Exception ex) {
                Logger.getLogger(InventorySearch1.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

   




    public void commonFilter(ResultSet rs)
    {
        int i = 0,j=0;

        try
        {
            while(rs.next())

            {
                j++;
            }
            rs.first();
            rs.previous();
            dm.setRowCount(j);
            while(rs.next())
            {
                dm.setValueAt(rs.getInt(1), i, 0);//id
                dm.setValueAt(categoryc.get(rs.getInt(2)), i, 1);//category
                dm.setValueAt(rs.getString(3), i, 2);//name
                dm.setValueAt(rs.getDouble(5), i, 3);//quatity
                 dm.setValueAt(rs.getDouble(6), i, 4);//opening balance
                dm.setValueAt(modem.get(rs.getInt(9)), i, 5);//mode
                dm.setValueAt(rs.getDouble(7), i, 6);//cp
                dm.setValueAt(rs.getDouble(8), i, 7);//sp
                 dm.setValueAt(vendornamev.get(rs.getInt(10)), i, 8);//vendor
                dm.setValueAt(classmap.get(rs.getInt(17)), i, 9);//class
                 dm.setValueAt(rs.getString(12), i,10);//p1
                dm.setValueAt(rs.getString(13), i, 11);//p2



                i++;
                // con.close();
            System.out.println();
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

    }

     public void createQuery()
    {

     String command="";

    if(namecheck.isSelected())
    command+=" invname = '"+ name.getSelectedItem().toString()  +"' and ";

   if(idcheck.isSelected())
    command+=" classid = '"+ classmap1.get(schoolclass.getSelectedItem()).toString()  +"' and ";

    if(modecheck.isSelected())
    command+=" mode = '"+ mode1.get(mode.getSelectedItem()).toString()  +"' and ";

    if(vendorcheck.isSelected())
    command+=" vendorname = '"+ vendorname1.get(vendor.getSelectedItem()).toString()  +"' and ";

    if(property1check.isSelected())
    command+=" property1 = '"+ property1.getSelectedItem().toString()  +"' and ";

    if(property2check.isSelected())
    command+=" property2 = '"+ property2.getSelectedItem().toString()  +"' and ";

    if(property3check.isSelected())
    command+=" property3 = '"+ property3.getSelectedItem().toString()  +"' and ";

    if(categorycheck.isSelected())
    command+=" invcategory = '"+ category1.get(category.getSelectedItem()).toString()  +"' and ";

   command+=" InventoryId > 0";
   inventorySearch(command);
    }


    public void inventorySearch(String command)
    {

      // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {
            p = con.prepareStatement("select * from inventorydeposit left join invclasswise on InventoryId=invid where" + command);
            rs = p.executeQuery();
            commonFilter(rs);
         }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
 public void showAllInventory()
    {

       //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {
            p = con.prepareStatement("select * from inventorydeposit left join invclasswise on InventoryId=invid");
            rs = p.executeQuery();
         commonFilter(rs);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }


    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox category;
    private javax.swing.JCheckBox categorycheck;
    private javax.swing.JButton exitButton;
    private javax.swing.JCheckBox idcheck;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTable jXTable1;
    private javax.swing.JComboBox mode;
    private javax.swing.JCheckBox modecheck;
    private javax.swing.JComboBox name;
    private javax.swing.JCheckBox namecheck;
    private javax.swing.JButton printStockList;
    private javax.swing.JButton printStockList1;
    private javax.swing.JComboBox property1;
    private javax.swing.JCheckBox property1check;
    private javax.swing.JComboBox property2;
    private javax.swing.JCheckBox property2check;
    private javax.swing.JComboBox property3;
    private javax.swing.JCheckBox property3check;
    private javax.swing.JComboBox schoolclass;
    private javax.swing.JButton searchStock;
    private javax.swing.JButton showAllInventory;
    private javax.swing.JComboBox vendor;
    private javax.swing.JCheckBox vendorcheck;
    // End of variables declaration//GEN-END:variables
//public Connection con;
   public  PreparedStatement ps,p;
   public  ResultSet rs;
}
