/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WithDrawalHistory1.java
 *
 * Created on Sep 30, 2009, 9:34:57 AM
 */

package com.duc.SpecialDepartment.InventorySection.InventoryDepartment;
import com.duc.ImportSection.MapForIndex;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.text.MessageFormat;
import java.util.HashMap;
import javax.swing.JTable.PrintMode;
import static com.duc.DatabaseConnection.DatabaseConnection.*;
/**
 *
 * @author Ravi Dangaich
 */
public class WithDrawalHistory1 extends javax.swing.JInternalFrame {
DefaultTableModel dm1;
DefaultTableModel dm2;
//MapForIndex mp1=new MapForIndex();
HashMap otherfeemap1=mp.getLedgerOtherFeeIndexFromName();
    /** Creates new form WithDrawalHistory1 */
    public WithDrawalHistory1() {
        initComponents();
        pack();
       
         dm1 = (DefaultTableModel) jTable1.getModel();
        dm1.setRowCount(0);

        dm2 = (DefaultTableModel) jTable2.getModel();
        dm2.setRowCount(0);
        showAllSoldInventory();
        totalAmount();
        fromSession();
    }

    public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");

           rs = ps.executeQuery();
           // int i = 0,j=0;
          while(rs.next())
            {

              if(rs.getInt(3)==1)
                  sessionValue=rs.getInt(2);

            }



         }
         catch(Exception e)
         {
             e.printStackTrace();
    }
 }
    public void totalAmount()
    {
        Double total=0.0;
        int i=0;
        try
        {
            //i=jTable1.getRowCount();
            for(i=0;i<jTable1.getRowCount();i++)
            total+=Double.parseDouble(jTable1.getValueAt(i,3).toString());
            balanceOfStudent.setText(total.toString());

        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        admissionNotext = new javax.swing.JTextField();
        studentName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        printStudentPurchasedButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        studentReturnedButton = new javax.swing.JButton();
        exchangeButton = new javax.swing.JButton();
        balanceOfStudent = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        updateButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();

        jMenuItem1.setText("Return Inventory");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setClosable(true);
        setIconifiable(true);
        setTitle("Inventory History");

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        jLabel1.setText("Admission No."); // NOI18N

        jLabel2.setText("Name "); // NOI18N

        admissionNotext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admissionNotextActionPerformed(evt);
            }
        });
        admissionNotext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                admissionNotextKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                admissionNotextKeyTyped(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(204, 204, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "InventoryId", "Inventory Name", "quantity", "Amount", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setComponentPopupMenu(jPopupMenu1);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel3.setText("                Inventory History"); // NOI18N

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setEditable(false);
        jTextPane2.setFont(new java.awt.Font("Tahoma", 0, 18));
        jTextPane2.setText("                                           Student Inventory History and Exchange"); // NOI18N
        jScrollPane3.setViewportView(jTextPane2);

        jTextPane3.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane3.setEditable(false);
        jTextPane3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextPane3.setText("History of the Inventory Purchased by a student of this school. It will help you to maintain the student records and future references. For returning , select the inventory to be returned and a right click."); // NOI18N
        jScrollPane4.setViewportView(jTextPane3);

        printStudentPurchasedButton.setText("Print"); // NOI18N
        printStudentPurchasedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printStudentPurchasedButtonActionPerformed(evt);
            }
        });

        jTable2.setBackground(new java.awt.Color(204, 204, 255));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Inventory Id", "Inventory Name", "quantity", "Amount", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable2);

        studentReturnedButton.setText("Print"); // NOI18N
        studentReturnedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentReturnedButtonActionPerformed(evt);
            }
        });

        exchangeButton.setText("Exchange"); // NOI18N
        exchangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exchangeButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Total Amount"); // NOI18N

        jLabel5.setText("*For Exchange,Firstly Click Current purchased item and then item to be returned"); // NOI18N

        exitButton.setText("Exit"); // NOI18N
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        updateButton1.setText("Refresh"); // NOI18N
        updateButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setBackground(new java.awt.Color(102, 102, 255));
        jCheckBox1.setText("Returned Inventory");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(102, 0, 102));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentReturnedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 323, Short.MAX_VALUE)
                .addComponent(updateButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(223, 223, 223)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 858, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 858, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(printStudentPurchasedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(232, 232, 232)
                        .addComponent(exchangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(balanceOfStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(admissionNotext, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104)
                                .addComponent(jCheckBox1)))
                        .addGap(98, 98, 98)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(6, 6, 6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(admissionNotext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(balanceOfStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(9, 9, 9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printStudentPurchasedButton)
                    .addComponent(jLabel5)
                    .addComponent(exchangeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentReturnedButton)
                    .addComponent(exitButton)
                    .addComponent(updateButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void admissionNotextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admissionNotextActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_admissionNotextActionPerformed

    private void admissionNotextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_admissionNotextKeyPressed
        int keycode=evt.getKeyCode();

        if(keycode==KeyEvent.VK_ENTER)
        {
            if(jCheckBox1.isSelected())
            {

            showStudentReturnedInventory();
            jLabel6.setText("Selected Student Returned Inventory Record");
            }
            else
            {
            showHistory();
            jLabel6.setText("Selected Student Sold Inventory Record");
            }
            totalAmount();
        }
    // TODO add your handling code here:
}//GEN-LAST:event_admissionNotextKeyPressed

    private void admissionNotextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_admissionNotextKeyTyped
        // TODO add your handling code here:
}//GEN-LAST:event_admissionNotextKeyTyped

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        // TODO add your handling code here:
}//GEN-LAST:event_jTable1MouseClicked

    private void printStudentPurchasedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printStudentPurchasedButtonActionPerformed

        try
        {
        String s="Student Inventory History";
        MessageFormat header=new MessageFormat(s);
        jTable1.print(PrintMode.FIT_WIDTH, header, null);
        }

        catch(Exception e)
        {
         System.err.println("Error in printing student search");
        }
}//GEN-LAST:event_printStudentPurchasedButtonActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_jTable2MouseClicked

    private void studentReturnedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentReturnedButtonActionPerformed
        try {
            jTable2.print();
        } catch(Exception e) {
            e.printStackTrace();
        }// TODO add your handling code here:
}//GEN-LAST:event_studentReturnedButtonActionPerformed

        private void exchangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exchangeButtonActionPerformed
            doupdate++;
            System.out.println("click times"+doupdate);
            if(doupdate==1) {
                currentrow=jTable1.getSelectedRow();
                int currentcolumn=jTable1.getSelectedColumn();
                int count=jTable1.getRowCount();
                
                int invid=Integer.parseInt(jTable1.getValueAt(currentrow,0).toString());
                String name= String.valueOf(jTable1.getValueAt(currentrow, 1));
                Double quantity= Double.parseDouble(jTable1.getValueAt(currentrow, 2).toString());
                Double amount= Double.parseDouble(jTable1.getValueAt(currentrow, 3).toString());
                String date= String.valueOf(jTable1.getValueAt(currentrow, 4));
                String time=String.valueOf(jTable1.getValueAt(currentrow, 5));
                dm2.setRowCount(count);
                try{
                    dm2.setValueAt(invid, currentrow, 0);
                    dm2.setValueAt(name, currentrow, 1);//inventoryname
                    dm2.setValueAt(quantity, currentrow, 2);//quantity
                    dm2.setValueAt(amount, currentrow, 3);//amount
                    dm2.setValueAt(date, currentrow, 4);//date
                   dm2.setValueAt(date, currentrow, 5);//time


                    System.out.println("Current quantity"+jTable1.getValueAt(currentrow, 2));

             } catch(Exception e) {

               }
            }

            if(doupdate==2) {
                doupdate=0;
                oldrow=jTable1.getSelectedRow();
                int oldcolumn=jTable1.getSelectedColumn();
                int count=jTable1.getRowCount();
                //System.out.println(""+i);
                int invid=Integer.parseInt(jTable1.getValueAt(oldrow,0).toString());
                String name= String.valueOf(jTable1.getValueAt(oldrow, 1));
                Double quantity= Double.parseDouble(jTable1.getValueAt(oldrow, 2).toString());
                Double amount= Double.parseDouble(jTable1.getValueAt(oldrow, 3).toString());
                String date= String.valueOf(jTable1.getValueAt(oldrow, 4));
                String time=String.valueOf(jTable1.getValueAt(oldrow, 5));

                dm2.setRowCount(count);
                try{
                    dm2.setValueAt(invid, oldrow, 0);//id
                    dm2.setValueAt(name, oldrow, 1);//inventoryname
                    dm2.setValueAt(quantity, oldrow, 2);//quantity
                    dm2.setValueAt(amount, oldrow, 3);//amount
                    dm2.setValueAt(date, oldrow, 4);//date
dm2.setValueAt(time, oldrow, 5);//time

                    System.out.println("to be exchanged quantity"+jTable1.getValueAt(oldrow, 3));

                    Double balanceamount=  Double.parseDouble(jTable1.getValueAt(oldrow, 3).toString()) - Double.parseDouble(jTable1.getValueAt(currentrow, 3).toString());
                    System.out.println("Balance "+balanceamount);
                    if(balanceamount<0) {
                        balanceamount=-balanceamount;
                       // balanceOfStudent.setText(balanceamount.toString());
                        JOptionPane.showConfirmDialog(null,"pay "+balanceamount,"pay to School",JOptionPane.OK_CANCEL_OPTION);
                        exchangeUpdate(oldrow,currentrow);
                    } else {
                        //balanceOfStudent.setText(balanceamount.toString());
                        JOptionPane.showConfirmDialog(null,"pay "+balanceamount,"pay to student",JOptionPane.OK_CANCEL_OPTION);
                        exchangeUpdate(oldrow,currentrow);
                    }
                } catch(Exception e) {

                }
            }
            // TODO add your handling code here:
}//GEN-LAST:event_exchangeButtonActionPerformed

        private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
            this.dispose();        // TODO add your handling code here:
}//GEN-LAST:event_exitButtonActionPerformed

        private void updateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButton1ActionPerformed
            showHistory();
}//GEN-LAST:event_updateButton1ActionPerformed

        private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
           returnInventory();
           showHistory();
        }//GEN-LAST:event_jMenuItem1ActionPerformed

        private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
           if(jCheckBox1.isSelected())
           {
               showReturnedInventory();
                totalAmount();
                jLabel6.setText("All Student Returned Inventory Record");
           }
           else
           {
               showAllSoldInventory();
                totalAmount();
                jLabel6.setText("All Student Sold Inventory Record");
           }
        }//GEN-LAST:event_jCheckBox1ActionPerformed
 public void showStudentReturnedInventory()
 {
      int i = 0,j=0;

       // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {

            ps = con.prepareStatement("select * from studentinventorypurchase where studentid=? and returnstatus=? and session=?");
            ps.setString(1,admissionNotext.getText());
            ps.setInt(2, 1);
            ps.setInt(3, sessionValue);
            rs = ps.executeQuery();
            if(rs.next())
            {
                rs.first();
                rs.previous();
            while(rs.next())

            {
                j++;
            }
            rs.first();

            rs.previous();
            dm1.setRowCount(j);
            dm2.setRowCount(j);
            while(rs.next())
            {
                dm1.setValueAt(rs.getString(1), i, 0);

                dm1.setValueAt(rs.getString(2), i, 1);//inventoryname
                dm1.setValueAt(rs.getDouble(4), i, 2);//quantity
                dm1.setValueAt(rs.getDouble(5), i, 3);//amount
                dm1.setValueAt(rs.getString(6), i, 4);//date
                 dm1.setValueAt(rs.getString(7), i, 5);//time

                i++;
                // con.close();
            System.out.println();
            }  }
            else
            {


                JOptionPane.showConfirmDialog(null,"No Returned Inventory Record","No Reutrned Record",JOptionPane.OK_OPTION);

            }ps=con.prepareStatement("select * from studententry where id=?");
                    ps.setString(1,admissionNotext.getText());
                    rs=ps.executeQuery();
                    while(rs.next())
                    {
                        studentName.setText(rs.getString(2));
            int status=rs.getInt(14);
  if(status==0)
     JOptionPane.showConfirmDialog(null,"Ex Student","Ex Student Prompt",JOptionPane.OK_CANCEL_OPTION);
                    }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
 }

        public void showReturnedInventory()
        {
             int i = 0,j=0;

       // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {

            ps = con.prepareStatement("select * from studentinventorypurchase where returnstatus=? and session=?");
            ps.setInt(1,1);
            ps.setInt(2, sessionValue);
            rs = ps.executeQuery();
            if(rs.next())
            {
                rs.first();
                rs.previous();
            while(rs.next())

            {
                j++;
            }
            rs.first();

            rs.previous();
            dm1.setRowCount(j);
            dm2.setRowCount(j);
            while(rs.next())
            {
                dm1.setValueAt(rs.getString(1), i, 0);

                dm1.setValueAt(rs.getString(2), i, 1);//inventoryname
                dm1.setValueAt(rs.getDouble(4), i, 2);//quantity
                dm1.setValueAt(rs.getDouble(5), i, 3);//amount
                dm1.setValueAt(rs.getString(6), i, 4);//date
                 dm1.setValueAt(rs.getString(7), i, 5);//time

                i++;
                // con.close();
            System.out.println();
            }  }
            else
            {


                JOptionPane.showConfirmDialog(null,"No Returned Inventory Record","No Reutrned Record",JOptionPane.OK_OPTION);

            }ps=con.prepareStatement("select * from studententry where id=?");
                    ps.setString(1,admissionNotext.getText());
                    rs=ps.executeQuery();
                    while(rs.next())
                    {
                        studentName.setText(rs.getString(2));
            int status=rs.getInt(14);
  if(status==0)
     JOptionPane.showConfirmDialog(null,"Ex Student","Ex Student Prompt",JOptionPane.OK_CANCEL_OPTION);
                    }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        }
        public void returnInventory()
        {
             int selection=JOptionPane.showConfirmDialog(null,"Do you want to return this inventory","Return Inventory",JOptionPane.OK_OPTION);
Double olddeposit1=0.0,newdeposit1=0.0;
     if(selection==JOptionPane.OK_OPTION)
 {
 try
 {
int returncolumn=jTable1.getSelectedRow();
//System.out.println("row")
     ps=con.prepareStatement("select * from inventorydeposit where inventoryid=?");
             ps.setInt(1,Integer.parseInt(jTable1.getValueAt(returncolumn,0).toString()));

             System.out.println("t1");
             rs=ps.executeQuery();

               rs.next();
            olddeposit1=rs.getDouble(5);


              System.out.println("t4");
             newdeposit1= olddeposit1 +Double.parseDouble(jTable1.getValueAt(returncolumn,2).toString());

             ps=con.prepareStatement("update inventorydeposit set invdeposit=? where inventoryid=?");
ps.setDouble(1,newdeposit1);
ps.setInt(2,Integer.parseInt(jTable1.getValueAt(returncolumn,0).toString()));
ps.executeUpdate();
System.out.println("New Deposit for removed data");
             System.out.println("old deposit"+olddeposit1);
              System.out.println("new  deposit"+newdeposit1);

              ps=con.prepareStatement("update studentinventorypurchase set returnstatus=? where time=? and inventoryid=? and date=? limit 1 ");
               ps.setInt(1,1);
             ps.setString(2, jTable1.getValueAt(returncolumn,4).toString());
             ps.setInt(3,Integer.parseInt(jTable1.getValueAt(returncolumn,0).toString()));
             ps.setString(4,jTable1.getValueAt(returncolumn,5).toString());

             ps.executeUpdate();
             System.out.println("removed entry is deleted");

           ps=con.prepareStatement("delete from feedues where studentid=? and head=? and dues=? and date=? and feetype=3 and session=? and groupid=? limit 1 ");
ps.setString(1,admissionNotext.getText().trim());
ps.setInt(2,Integer.parseInt(otherfeemap1.get("Inventory Purchase").toString()));
ps.setDouble(3,Double.parseDouble(jTable1.getValueAt(returncolumn,3).toString()));
ps.setString(4,jTable1.getValueAt(returncolumn,4).toString());
ps.setInt(5,sessionValue);
ps.setInt(6,Integer.parseInt(jTable1.getValueAt(returncolumn,0).toString()));
ps.executeUpdate();
 }catch(Exception e)
 {
e.printStackTrace();
 }
 }
 else
     System.out.println("database not updated");
        }

        public void exchangeUpdate(int oldrow,int currentrow)
    {
     int selection=JOptionPane.showConfirmDialog(null,"Do you want update the database","Database update",JOptionPane.OK_CANCEL_OPTION);

     if(selection==JOptionPane.OK_OPTION)
 {
 try
 {

     ps=con.prepareStatement("select * from inventorydeposit where inventoryid=?");
             ps.setInt(1,Integer.parseInt(jTable2.getValueAt(oldrow,0).toString()));

             System.out.println("t1");
             rs=ps.executeQuery();

               rs.next();
            olddeposit=rs.getDouble(5);


              System.out.println("t4");
             newdeposit= olddeposit +Double.parseDouble(jTable2.getValueAt(oldrow,2).toString());

             ps=con.prepareStatement("update inventorydeposit set invdeposit=? where inventoryid=?");
ps.setDouble(1,newdeposit);
ps.setInt(2,Integer.parseInt(jTable2.getValueAt(oldrow,0).toString()));
ps.executeUpdate();
System.out.println("New Deposit for removed data");
             System.out.println("old deposit"+olddeposit);
              System.out.println("new  deposit"+newdeposit);

              ps=con.prepareStatement("update studentinventorypurchase set returnstatus=? where time=? and inventoryid=? and date=? ");
             ps.setInt(1,1);
              ps.setString(2, jTable2.getValueAt(oldrow,4).toString());
             ps.setInt(3,Integer.parseInt(jTable2.getValueAt(oldrow,0).toString()));
             ps.setString(4,jTable2.getValueAt(oldrow,5).toString());

             ps.executeUpdate();
             System.out.println("removed entry is deleted");

 }catch(Exception e)
 {
e.printStackTrace();
 }
 }
 else
     System.out.println("database not updated");

    }

    public void showHistory()
{
     int i = 0,j=0;

       // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {

            ps = con.prepareStatement("select * from studentinventorypurchase where studentid=? and returnstatus=? and session=?");
            ps.setString(1,admissionNotext.getText().trim());
            ps.setInt(2,0);
            ps.setInt(3,sessionValue);
            rs = ps.executeQuery();
            if(rs.next())
            {
                rs.first();
                rs.previous();
            while(rs.next())

            {
                j++;
            }
            rs.first();
            
            rs.previous();
            dm1.setRowCount(j);
            dm2.setRowCount(j);
            while(rs.next())
            {
                dm1.setValueAt(rs.getString(1), i, 0);

                dm1.setValueAt(rs.getString(2), i, 1);//inventoryname
                dm1.setValueAt(rs.getDouble(4), i, 2);//quantity
                dm1.setValueAt(rs.getDouble(5), i, 3);//amount
                dm1.setValueAt(rs.getString(6), i, 4);//date
                 dm1.setValueAt(rs.getString(7), i, 5);//time

 dm2.setValueAt("", i, 0);

                dm2.setValueAt("", i, 1);//inventoryname
                dm2.setValueAt(0, i, 2);//quantity
                dm2.setValueAt(0, i, 3);//amount
                dm2.setValueAt("", i, 4);
dm2.setValueAt("", i, 5);

                i++;
                // con.close();
            System.out.println();
            }  }
            else
            {
                 //
 dm1.setRowCount(1);
 dm1.setValueAt("", i, 0);
                dm1.setValueAt("", i, 1);//inventoryname
                dm1.setValueAt(0, i, 2);//quantity
                dm1.setValueAt(0, i, 3);//amount
                dm1.setValueAt("", i, 4);//date
dm1.setValueAt("", i, 5);//time

                JOptionPane.showConfirmDialog(null,"No Inventory Record","No Inventory Record",JOptionPane.OK_OPTION);

            }ps=con.prepareStatement("select * from studententry where id=?");
                    ps.setString(1,admissionNotext.getText());
                    rs=ps.executeQuery();
                    while(rs.next())
                    {
                        studentName.setText(rs.getString(2));
            int status=rs.getInt(14);
  if(status==0)
     JOptionPane.showConfirmDialog(null,"Ex Student","Ex Student Prompt",JOptionPane.OK_CANCEL_OPTION);
                    }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
}

     public void showAllSoldInventory()
{
     int i = 0,j=0;

       // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {

            ps = con.prepareStatement("select * from studentinventorypurchase where returnstatus=0 and session=?");
           ps.setInt(1,sessionValue);
            rs = ps.executeQuery();
            if(rs.next())
            {
                rs.first();
                rs.previous();
            while(rs.next())

            {
                j++;
            }
            rs.first();

            rs.previous();
            dm1.setRowCount(j);
            dm2.setRowCount(j);
            while(rs.next())
            {
                dm1.setValueAt(rs.getString(1), i, 0);

                dm1.setValueAt(rs.getString(2), i, 1);//inventoryname
                dm1.setValueAt(rs.getDouble(4), i, 2);//quantity
                dm1.setValueAt(rs.getDouble(5), i, 3);//amount
                dm1.setValueAt(rs.getString(6), i, 4);//date
                 dm1.setValueAt(rs.getString(7), i, 5);//time

 dm2.setValueAt("", i, 0);

                dm2.setValueAt("", i, 1);//inventoryname
                dm2.setValueAt(0, i, 2);//quantity
                dm2.setValueAt(0, i, 3);//amount
                dm2.setValueAt("", i, 4);
dm2.setValueAt("", i, 5);

                i++;
                // con.close();
            System.out.println();
            jLabel6.setText("All Student Sold Inventory Record");
            }  }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

      totalAmount();
}
    public void setAdmissionNo(String id)
    {
        admissionNotext.setText(id);
        int keycode=KeyEvent.VK_ENTER;
if(keycode==KeyEvent.VK_ENTER)
{
   if(!admissionNotext.getText().isEmpty())
   {
            showHistory();
            totalAmount();
    }

}
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField admissionNotext;
    private javax.swing.JTextField balanceOfStudent;
    private javax.swing.JButton exchangeButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JButton printStudentPurchasedButton;
    private javax.swing.JTextField studentName;
    private javax.swing.JButton studentReturnedButton;
    private javax.swing.JButton updateButton1;
    // End of variables declaration//GEN-END:variables
PreparedStatement ps;
ResultSet rs;
//Connection con;
Double olddeposit=0.0,newdeposit=0.0;
public static int doupdate=0,oldrow=0,currentrow=0;
 public Integer sessionValue=0;
}
