/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Withdrawal1.java
 *
 * Created on Sep 30, 2009, 9:34:30 AM
 */

package com.duc.SpecialDepartment.InventorySection.InventoryDepartment;
import com.duc.ImportSection.MapForIndex;
import com.duc.ImportSection.MapForInventoryIndex;

import java.sql.*;
import javax.swing.*;
import java.awt.event.*;
import java.net.InetAddress;
import java.text.Format;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Formatter;
import java.util.HashMap;
import javax.swing.JTable.PrintMode;
import javax.swing.table.DefaultTableModel;
import static com.duc.DatabaseConnection.DatabaseConnection.*;
/**
 *
 * @author Ravi Dangaich
 */
public class WithDrawal1 extends javax.swing.JInternalFrame {
    DefaultTableModel dm;
// MapForIndex mp=new MapForIndex();
 //MapForInventoryIndex mp1=new MapForInventoryIndex();
 HashMap classmap=mp.getClassIndexName();
  HashMap classmap1=mp.getClassIndexFromName();
  HashMap month1=mp.mapMonth1();

  HashMap category=mpi.getCategoryIndexToName();
  HashMap category1=mpi.getCategoryIndexFromName();
  HashMap vendor=mpi.getVendorNameIndexToName();
  HashMap vendor1=mpi.getVendorNameIndexFromName();
  HashMap invname1=mpi.getInventoryNameToIndex();
  //HashMap otherfeemap1=mp.getLedgerOtherFeeIndexFromName();
 // HashMap session1=mp.getSessionIndexToName();
    /** Creates new form Withdrawal1 */
    public WithDrawal1() {
        initComponents();
         pack();
        dm = (DefaultTableModel) jTable1.getModel();
        dm.setRowCount(0);

         fromInventoryName();
          updateInventoryStock1.setEnabled(false);
         

Format formatter = new SimpleDateFormat("MMMM");
    monthofadmission = formatter.format(new java.util.Date());
    fromSession();

    }
 public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");

           rs = ps.executeQuery();
           // int i = 0,j=0;
          while(rs.next())
            {

              if(rs.getInt(3)==1)
                  sessionValue=rs.getInt(2);

            }



         }
         catch(Exception e)
         {
             e.printStackTrace();
    }
 }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        availableQuantitytext = new javax.swing.JTextField();
        withdrawalQuantityText = new javax.swing.JTextField();
        newAvailableQuantity = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        updateInventoryStock = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        inventoryNameCombo = new javax.swing.JComboBox();
        sellinPrice = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        inventoryId = new javax.swing.JTextField();
        loadInventoryButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        admissionnotext = new javax.swing.JTextField();
        studentHistory = new javax.swing.JButton();
        studentclass = new javax.swing.JTextField();
        studentname = new javax.swing.JTextField();
        rollnumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane4 = new javax.swing.JTextPane();
        jLabel31 = new javax.swing.JLabel();
        admissionfeecheckbox2 = new javax.swing.JCheckBox();
        exitButton1 = new javax.swing.JButton();
        updateInventoryStock1 = new javax.swing.JButton();
        exitButton2 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new org.jdesktop.swingx.JXTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Issue Inventory");

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel6.setText("Current Available Quantity");

        jLabel7.setText("Withdrawal Quantity");

        jLabel8.setText("New Available Quantity");

        withdrawalQuantityText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawalQuantityTextActionPerformed(evt);
            }
        });

        newAvailableQuantity.setBackground(new java.awt.Color(204, 204, 204));
        newAvailableQuantity.setEditable(false);
        newAvailableQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAvailableQuantityActionPerformed(evt);
            }
        });

        jTextPane3.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane3.setEditable(false);
        jTextPane3.setFont(new java.awt.Font("Tahoma", 0, 18));
        jTextPane3.setText("                                                        Withdraw Inventory");
        jScrollPane3.setViewportView(jTextPane3);

        updateInventoryStock.setText("Update");
        updateInventoryStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateInventoryStockActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        jLabel2.setText("Inventory Name");

        jLabel4.setText("Selling Price");

        inventoryNameCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryNameComboMouseClicked(evt);
            }
        });
        inventoryNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryNameComboActionPerformed(evt);
            }
        });

        jLabel12.setText("Inventory Id");

        loadInventoryButton.setText("History");
        loadInventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadInventoryButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("*Inventory Sale History");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inventoryId, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sellinPrice)
                    .addComponent(inventoryNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadInventoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(inventoryNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sellinPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadInventoryButton))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inventoryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addGap(68, 68, 68))
        );

        jPanel3.setBackground(new java.awt.Color(102, 255, 204));

        jLabel5.setText("Student Name");

        jLabel9.setText("Roll Number");

        jLabel10.setText("Class");

        jLabel11.setText("Admission No.");

        admissionnotext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                admissionnotextKeyPressed(evt);
            }
        });

        studentHistory.setText("History");
        studentHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentHistoryActionPerformed(evt);
            }
        });

        studentclass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                studentclassKeyPressed(evt);
            }
        });

        studentname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                studentnameKeyPressed(evt);
            }
        });

        rollnumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rollnumberKeyPressed(evt);
            }
        });

        jLabel1.setText("*Student Purchase History");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(admissionnotext)
                            .addComponent(studentname, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                            .addComponent(rollnumber)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentclass, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentHistory)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(admissionnotext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentclass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(studentHistory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rollnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        jSeparator2.setBackground(new java.awt.Color(51, 0, 51));

        jTextPane4.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane4.setEditable(false);
        jTextPane4.setText("Enter admission no . and enter , then all the inventories particular to this student class will be seen on the table(R.H.S.). Fill the Quantity withdrawn and press total,then print(if required) and after verification, press update.\nSure refresh after every transaction.   *****Inventory once sold, should not be returned****.");
        jScrollPane4.setViewportView(jTextPane4);

        jLabel31.setText("Set Ledger"); // NOI18N

        admissionfeecheckbox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admissionfeecheckbox2ActionPerformed(evt);
            }
        });

        exitButton1.setText("Total");
        exitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButton1ActionPerformed(evt);
            }
        });

        updateInventoryStock1.setText("Update");
        updateInventoryStock1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateInventoryStock1ActionPerformed(evt);
            }
        });

        exitButton2.setText("Print");
        exitButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButton2ActionPerformed(evt);
            }
        });

        jLabel13.setForeground(new java.awt.Color(255, 0, 51));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "S.No.", "Inv. Id", "Category", "Inventory", "Publisher", "Price", "Available", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnControlVisible(true);
        jScrollPane5.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);

        jCheckBox1.setBackground(new java.awt.Color(0, 204, 204));
        jCheckBox1.setText("General Inventories for all");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Remove Zero Unit Items");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jLabel14.setText("---SMS Confirmation---");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(948, Short.MAX_VALUE))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(64, 64, 64)
                        .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(withdrawalQuantityText)
                            .addComponent(newAvailableQuantity)
                            .addComponent(availableQuantitytext, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(admissionfeecheckbox2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(updateInventoryStock, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(exitButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(exitButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(updateInventoryStock1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jCheckBox2)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCheckBox1)
                                    .addComponent(jLabel14))
                                .addGap(4, 4, 4)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5, 0, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(12, 12, 12)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(withdrawalQuantityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel8)
                                        .addComponent(newAvailableQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(availableQuantitytext, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(updateInventoryStock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(exitButton)
                                    .addComponent(jLabel13)
                                    .addComponent(exitButton1)
                                    .addComponent(updateInventoryStock1)
                                    .addComponent(exitButton2))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(231, 231, 231)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel31)
                            .addComponent(admissionfeecheckbox2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(350, 350, 350)
                        .addComponent(jCheckBox2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void withdrawalQuantityTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawalQuantityTextActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_withdrawalQuantityTextActionPerformed

    private void newAvailableQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAvailableQuantityActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_newAvailableQuantityActionPerformed

    private void updateInventoryStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateInventoryStockActionPerformed

        if(admissionnotext.getText().isEmpty())
            JOptionPane.showConfirmDialog(null,"Reminding window","plz fill Student Id and then Load Student",JOptionPane.OK_CANCEL_OPTION);
        else{
            if(availableQuantitytext.getText().isEmpty())
                JOptionPane.showConfirmDialog(null,"No Transaction possible","No Quantity Present",JOptionPane.OK_CANCEL_OPTION);

            else if(Double.parseDouble(availableQuantitytext.getText())<=0.0)
                JOptionPane.showConfirmDialog(null,"No Transaction possible","No Quantity Present",JOptionPane.OK_CANCEL_OPTION);
            else {
                if(withdrawalQuantityText.getText().isEmpty())
                    JOptionPane.showConfirmDialog(null,"Reminding window","withdrawal inventory quantity empty",JOptionPane.OK_CANCEL_OPTION);
                else if(Double.parseDouble(withdrawalQuantityText.getText())<=0.0)
                    JOptionPane.showConfirmDialog(null,"WithDrawal cant be negative","Negative Withdrawal",JOptionPane.OK_CANCEL_OPTION);
                else {
                    inventoryDepositUpdate();
                    // TODO add your handling code here:
}//GEN-LAST:event_updateInventoryStockActionPerformed
            }}}
                private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
                    this.dispose();        // TODO add your handling code here:
}//GEN-LAST:event_exitButtonActionPerformed

                private void inventoryNameComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryNameComboMouseClicked
                    inventoryNameFilter();
                }//GEN-LAST:event_inventoryNameComboMouseClicked

                private void inventoryNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryNameComboActionPerformed
                    
}//GEN-LAST:event_inventoryNameComboActionPerformed

                private void loadInventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadInventoryButtonActionPerformed
                    if(!inventoryId.getText().isEmpty()) {
                        com.duc.SpecialDepartment.InventorySection.ViewDepartment.SoldInventory1 r =new  com.duc.SpecialDepartment.InventorySection.ViewDepartment.SoldInventory1();
                        r.setInventoryId(Integer.parseInt(inventoryId.getText()));
                        r.setVisible(true);
                        this.add(r,0);
                    }

                    else
                        JOptionPane.showConfirmDialog(null,"Reminding Window","The InventoryId is empty", JOptionPane.OK_CANCEL_OPTION);// TODO add your handling code here:
                    // TODO add your handling code here:
}//GEN-LAST:event_loadInventoryButtonActionPerformed

                private void admissionnotextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_admissionnotextKeyPressed
                    if(!admissionnotext.getText().isEmpty()) {
                        int keycode=evt.getKeyCode();
                        if(keycode==KeyEvent.VK_ENTER)
                        {
                            loadStudent();
                            jLabel14.setText("--SMS Confirmation--");
                        }
                         updateInventoryStock1.setEnabled(false);

                    }// TODO add your handling code here:
}//GEN-LAST:event_admissionnotextKeyPressed

                private void studentHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentHistoryActionPerformed
                    // TODO add your handling code here:
                    //  WithDrawalHistory.man();
                    WithDrawalHistory1 r =new WithDrawalHistory1();
                    r.setAdmissionNo(admissionnotext.getText());
                    this.add(r,0);
                    r.setVisible(true);
}//GEN-LAST:event_studentHistoryActionPerformed

                private void studentclassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_studentclassKeyPressed
                    // TODO add your handling code here:
}//GEN-LAST:event_studentclassKeyPressed

                private void studentnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_studentnameKeyPressed
                    // TODO add your handling code here:
}//GEN-LAST:event_studentnameKeyPressed

                private void rollnumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rollnumberKeyPressed
                    // TODO add your handling code here:
}//GEN-LAST:event_rollnumberKeyPressed

                private void admissionfeecheckbox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admissionfeecheckbox2ActionPerformed

                    com.duc.FeeDepartment.LedgerSection.Setup.LedgerOtherFeeHeadSetup r=new com.duc.FeeDepartment.LedgerSection.Setup.LedgerOtherFeeHeadSetup();
r.setReference("Inventory Purchase");
                    r.setVisible(true);
                    this.add(r,0);
}//GEN-LAST:event_admissionfeecheckbox2ActionPerformed

                private void exitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButton1ActionPerformed
//loadTable();
                    totalStrength();
                    updateInventoryStock1.setEnabled(true);// TODO add your handling code here:
                }//GEN-LAST:event_exitButton1ActionPerformed

                private void updateInventoryStock1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateInventoryStock1ActionPerformed
 updateInventoryStock1.setEnabled(false);

 //ps=con.prepareStatement("select * from feedues ")
                    dm.removeRow(dm.getRowCount()-1);
                    int i=0,j=0;
                    if(admissionnotext.getText().isEmpty())
            JOptionPane.showConfirmDialog(null,"Reminding window","plz fill Student Id and then Load Student",JOptionPane.OK_CANCEL_OPTION);
        else{
         
           
                    BulkInventoryDepositUpdate();
                   // loadTable();
                  //  smsInventorySell();
                    // smsAddStudent();
                    try
 {
        ps=con.prepareStatement("select access from smsaccess where module=? ");
    ps.setString(1,"Inventory Department");
    rs=ps.executeQuery();
    if(rs.next())
    {
    if(rs.getInt(1)==1)
         smsInventorySell();
    else jLabel14.setText("Add SMS package");

      //else JOptionPane.showConfirmDialog(null,"Add SMS package access from Accessories","Contact Administrator",JOptionPane.OK_OPTION);
      
    }else jLabel14.setText("Add SMS package");
    //else JOptionPane.showConfirmDialog(null,"Add SMS package access from Accessories","Contact Administrator",JOptionPane.OK_OPTION);
      }catch(Exception e)
{
    e.printStackTrace();
}

        }
             
                }//GEN-LAST:event_updateInventoryStock1ActionPerformed

                private void exitButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButton2ActionPerformed
try
{
 String s="Adm.No.="+admissionnotext.getText()+"     Inventory Purchase";
        MessageFormat header=new MessageFormat(s);
        jTable1.print(PrintMode.FIT_WIDTH, header, null);
}catch(Exception e)
{
    e.printStackTrace();
}// TODO add your handling code here:
                }//GEN-LAST:event_exitButton2ActionPerformed

                private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
if(jCheckBox1.isSelected())
                    showGeneralInventory();
else loadTable();
    // TODO add your handling code here:
                }//GEN-LAST:event_jCheckBox1ActionPerformed

                private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
                    // TODO add your handling code here:
                    if(jCheckBox2.isSelected())
                        removeZeroFromTable();
                }//GEN-LAST:event_jCheckBox2ActionPerformed

                public void smsInventorySell()
                {
                    // int crow=jTable1.getSelectedRow();

      String id = null;
    String msg="Thanks for Inventory purchase of Rs."+total1;
    System.out.println("message"+msg);

    //if(jCheckBox1.isSelected())
     //   id=jTextField2.getText().trim();
    //else
       // System.out.println("ravi"+dm.getValueAt(crow,5));
    String newmsg=msg.replace(" ","%20");
    System.out.println("New message"+newmsg);
    try
    {
    ps=con.prepareStatement("select phone from studententry where id=?");
                ps.setString(1,admissionnotext.getText());
                rs=ps.executeQuery();
                if(rs.next())
                {
                  id=rs.getString(1);
                }
               if(id.isEmpty())
          {
          JOptionPane.showConfirmDialog(null,"Mobile no. is not valid","Mobile No. Invalid",JOptionPane.OK_OPTION);
      }
      else
      {

                    System.out.println("message"+newmsg);
                    System.out.println("Number"+id);
          InetAddress thisIp =InetAddress.getLocalHost();
            String ip=thisIp.getHostAddress();
      new com.duc.Accessories.SendSms().SmsCommon(admissionnotext.getText(),id,newmsg,ip);
      }
             }catch(Exception e)
    {
     e.printStackTrace();
    }
                }
                public void removeZeroFromTable()
                {
                    int r=0;
                    int count=dm.getRowCount();
                    try
                    {
                        for(r=0;r<count;r++)
                        {
                            while(Double.parseDouble(dm.getValueAt(r, 7).toString())==0.0)
                            {
                                dm.removeRow(r);
                                System.out.println("Removed row="+r);
                               // r++;
                            }

                        }

                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                }

                 public void totalStrength()
    {
        Double total=0.0,newdeposit=0.0;
        for(int i=0;i<dm.getRowCount();i++)
        {
             newdeposit=Double.parseDouble(dm.getValueAt(i, 6).toString())- Double.parseDouble(dm.getValueAt(i, 7).toString());
  if(newdeposit>=0.0)
  {
if(Double.parseDouble(dm.getValueAt(i, 7).toString())>0.0)
            total+=Double.parseDouble(dm.getValueAt(i,5).toString())*Double.parseDouble(dm.getValueAt(i,7).toString());
        //totalstrength.setText(String.valueOf(total));
  }
        }
        int rowcount=dm.getRowCount();
     System.out.println("row"+rowcount);
    dm.setRowCount(rowcount+1);

   dm.setValueAt("Total", rowcount, 0);
    dm.setValueAt(total, rowcount, 5);
    total1=total;
    }
public void fromInventoryName()
   {
        try{

//con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();


         ps = con.prepareStatement("select * from inventorydeposit where type=0");

             rs = ps.executeQuery();


            while (rs.next())
        inventoryNameCombo.addItem(rs.getString(3));




    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
   }
public void StudentPurchaseHistory()
{
    String time=null;
    Double amount=Double.parseDouble(withdrawalQuantityText.getText()) * Double.parseDouble(sellinPrice.getText());
    //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {
            ps=con.prepareStatement("insert into studentinventorypurchase (inventoryid,inventoryname,studentid,withdrawalquantity,amount,time,date,session) values(?,?,?,?,?,?,?,?)");
            ps.setInt(1,Integer.parseInt(inventoryId.getText()));
            ps.setString(2,inventoryNameCombo.getSelectedItem().toString());
             ps.setString(3,admissionnotext.getText());
           
             ps.setDouble(4,Double.parseDouble(withdrawalQuantityText.getText()));
             ps.setDouble(5,amount);
             ps.setString(6,datum);
             Calendar cal=Calendar.getInstance();
                    time= new Formatter().format("%tl:%tM",cal,cal).toString();
          ps.setString(7,time );
ps.setInt(8,sessionValue);

            ps.executeUpdate();
            System.out.println("Student purchase history  executed");
            //con.close();
            //System.out.print("Database connection closed");

        }catch(Exception e)
        {
            e.printStackTrace();
        }
}

   public void BulkInventoryDepositUpdate()
 {
int i=0,j=0;
Double newdeposit=0.0;


for(i=0;i<dm.getRowCount();i++)
{
  newdeposit=Double.parseDouble(dm.getValueAt(i, 6).toString())- Double.parseDouble(dm.getValueAt(i, 7).toString());
  if(newdeposit<0.0 || Double.parseDouble(dm.getValueAt(i, 7).toString())<0.0 )
  {
      if(Double.parseDouble(dm.getValueAt(i, 7).toString())<0.0)
      {
          JOptionPane.showConfirmDialog(null,dm.getValueAt(i, 2).toString()+" is negative/Zero", "Re-Enter Correct values",JOptionPane.OK_CANCEL_OPTION);

          return;
      }
      JOptionPane.showConfirmDialog(null,dm.getValueAt(i, 3).toString()+" not available", "Re-Enter Correct values",JOptionPane.OK_CANCEL_OPTION);
      return;
  }
      }

//i=0;
//int k=0;
for(i=0;i<dm.getRowCount();i++)
{
    /*if(dm.getValueAt(i, 0).toString().equals("Total"))
        k=i-1;
    else k=i;
    */
    newdeposit=Double.parseDouble(dm.getValueAt(i, 6).toString())- Double.parseDouble(dm.getValueAt(i, 7).toString());
 
BulkDatabaseDepositUpdate(newdeposit,Integer.parseInt(dm.getValueAt(i, 1).toString()));
 BulkStudentPurchaseHistory(Double.parseDouble(dm.getValueAt(i, 7).toString()),Double.parseDouble(dm.getValueAt(i, 5).toString()),dm.getValueAt(i, 3).toString(),Integer.parseInt(dm.getValueAt(i,1).toString()));
 BulkUpdateIntoDues(Double.parseDouble(dm.getValueAt(i, 7).toString()),Double.parseDouble(dm.getValueAt(i, 5).toString()),Integer.parseInt(dm.getValueAt(i,1).toString()));

//System.out.println()
}

 
if(i+1==dm.getRowCount())
{
    jLabel13.setText("Operation finished");
    JOptionPane.showConfirmDialog(null,"Inventory Issued","Inventory Issue",JOptionPane.OK_OPTION);
    //loadTable();

}
   }

    public void BulkUpdateIntoDues(Double withdraw,Double sp,int id)
    {
        int ledcode=0,feeid=0;
        //int sessionValue=0;
        Double amount=withdraw*sp;
    //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
System.out.println("111111111111111111111111111111");
        int studentclass1;
        int section;
        try
        {
            ps=con.prepareStatement("select * from studententry where id=?");

            ps.setString(1,admissionnotext.getText());
            rs=ps.executeQuery();
            rs.next();
            studentclass1=rs.getInt(9);

             section=rs.getInt(10);

                    int roll=rs.getInt(11);

 ps=con.prepareStatement("select * from ledgerotherfeeheadcode where feehead=?");
            ps.setString(1,"Inventory Purchase");
            rs=ps.executeQuery();
            if(!rs.next())
            {
                 ps=con.prepareStatement("insert into ledgerotherfeeheadcode (feehead) values(?)");
                ps.setString(1,"Inventory Purchase");
                ps.executeUpdate();
            }
           // else
            {
           ps=con.prepareStatement("select * from ledgerotherfeeheadcode where feehead=?");
            ps.setString(1,"Inventory Purchase");
            rs=ps.executeQuery();
            rs.next();
            ledcode=rs.getInt(2);
                feeid=rs.getInt(3);
            }


            /*    ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");

           rs = ps.executeQuery();
           // int i = 0,j=0;
          while(rs.next())
            {
                //j++;
              //sessionCombo.addItem(rs.getString(1));

              if(rs.getInt(3)==1)
                  sessionValue=rs.getInt(2);

            }*/
            ps=con.prepareStatement("insert into feedues values(?,?,?,?,?,?,?,?,?)");
            ps.setString(1,admissionnotext.getText());

             ps.setInt(2,feeid);
             ps.setDouble(3,amount);
             ps.setInt(4, Integer.parseInt(month1.get(monthofadmission).toString()));
             ps.setString(5,datum);
             ps.setInt(6,id);
ps.setInt(7,ledcode);
ps.setInt(8,3);
ps.setInt(9, sessionValue);
            ps.executeUpdate();
            System.out.println("fee dues debit exceuted");
         //   con.close();
            System.out.print("Database connection closed");

        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    public void BulkDatabaseDepositUpdate(Double depo,Integer invid)
    {

    //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {
            ps=con.prepareStatement("update inventorydeposit set invdeposit=? where inventoryid=?");
            ps.setDouble(1,depo);
             ps.setInt(2,invid);
            ps.executeUpdate();
            System.out.println("update exceuted");
         //   con.close();
            System.out.print("Database connection closed");

        }catch(Exception e)
        {
            e.printStackTrace();
        }

    }

public void BulkStudentPurchaseHistory(Double withdrawquantity,Double sp,String invname,Integer invid)
{
    String time=null;
    Double amount= withdrawquantity * sp;
    //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {
            if(withdrawquantity>0.0)
            {
            ps=con.prepareStatement("insert into studentinventorypurchase (inventoryid,inventoryname,studentid,withdrawalquantity,amount,time,date,session) values(?,?,?,?,?,?,?,?)");
            ps.setInt(1,invid);
            ps.setString(2,invname);
             ps.setString(3,admissionnotext.getText());

             ps.setDouble(4,withdrawquantity);
             ps.setDouble(5,amount);
             ps.setString(6,datum);
Calendar cal=Calendar.getInstance();
                    time= new Formatter().format("%tl:%tM",cal,cal).toString();
          ps.setString(7,time );
          ps.setInt(8,sessionValue);
            ps.executeUpdate();

            System.out.println("Student purchase history  executed");
            //con.close();
            //System.out.print("Database connection closed");
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
}
public void getAdmissionNumber()
{
 // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();

        try{
         ps = con.prepareStatement("select * from studententry where class=? and name=? and roll=?");
        ps.setInt(1,Integer.parseInt(classmap1.get(studentclass.getText()).toString()));
         ps.setString(2,studentname.getText());
         ps.setInt(3,Integer.parseInt(rollnumber.getText()));

             rs = ps.executeQuery();

                    rs.next();

                    admissionnotext.setText(rs.getString(1).toString());
                 //    con.close();
             JOptionPane.showMessageDialog(null,"data loaded successfully","report",JOptionPane.PLAIN_MESSAGE);



            System.out.print("Database connection closed");

    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }


}

 public void inventoryNameFilter()
    {
     //   con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {
            ps = con.prepareStatement("select * from inventorydeposit where invname=?");
            ps.setString(1, inventoryNameCombo.getSelectedItem().toString());
             rs = ps.executeQuery();
            int i = 0,j=0;

 rs.next();



               sellinPrice.setText(String.valueOf(rs.getDouble(8)));

                availableQuantitytext.setText(String.valueOf(rs.getDouble(5)));

                inventoryId.setText(String.valueOf(rs.getInt(1)));





        }  catch(Exception e)
        {
            e.printStackTrace();
        }

    }
    public void inventoryDepositUpdate()
 {

  Double newdeposit=Double.parseDouble(availableQuantitytext.getText())- Double.parseDouble(withdrawalQuantityText.getText());
  if(newdeposit>=0)
  {
  newAvailableQuantity.setText(String.valueOf(newdeposit));
  databaseDepositUpdate();
  StudentPurchaseHistory();
 updateIntoDues(Integer.parseInt(inventoryNameCombo.getSelectedItem().toString()));
  }else
      JOptionPane.showConfirmDialog(null,"Not available window", "Quantity entered is not available",JOptionPane.OK_CANCEL_OPTION);
 }

    public void updateIntoDues(int id)
    {
        int ledcode=0,feeid=0;
      //  int sessionValue=0;
        Double amount=Double.parseDouble(withdrawalQuantityText.getText()) * Double.parseDouble(sellinPrice.getText());
   // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
System.out.println("111111111111111111111111111111");
        int studentclass1;
        int section;
        try
        {
            ps=con.prepareStatement("select * from studententry where id=?");

            ps.setString(1,admissionnotext.getText());
            rs=ps.executeQuery();
            rs.next();
            studentclass1=rs.getInt(9);

             section=rs.getInt(10);

                    int roll=rs.getInt(11);

 ps=con.prepareStatement("select * from ledgerotherfeeheadcode where feehead=?");
            ps.setString(1,"Inventory Purchase");
            rs=ps.executeQuery();
            if(!rs.next())
            {
                 ps=con.prepareStatement("insert into ledgerotherfeeheadcode (feehead) values(?)");
                ps.setString(1,"Inventory Purchase");
                ps.executeUpdate();
            }
           ps=con.prepareStatement("select * from ledgerotherfeeheadcode where feehead=?");
            ps.setString(1,"Inventory Purchase");
            rs=ps.executeQuery();
            rs.next();
            ledcode=rs.getInt(2);
                feeid=rs.getInt(3);


              /*  ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");

           rs = ps.executeQuery();
           // int i = 0,j=0;
          while(rs.next())
            {
                //j++;
              //sessionCombo.addItem(rs.getString(1));

              if(rs.getInt(3)==1)
                  sessionValue=rs.getInt(2);

            }*/
            ps=con.prepareStatement("insert into feedues values(?,?,?,?,?,?,?,?,?)");
            ps.setString(1,admissionnotext.getText());
           
             ps.setInt(2,feeid);
             ps.setDouble(3,amount);
             ps.setInt(4, Integer.parseInt(month1.get(monthofadmission).toString()));
             ps.setString(5,datum);
             ps.setInt(6,id);
ps.setInt(7,ledcode);
ps.setInt(8,3);
ps.setInt(9, sessionValue);
            ps.executeUpdate();
            System.out.println("fee dues debit exceuted");
         //   con.close();
            System.out.print("Database connection closed");

        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    public void databaseDepositUpdate()
    {

    //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        try
        {
            ps=con.prepareStatement("update inventorydeposit set invdeposit=? where inventoryid=?");
            ps.setDouble(1,Double.parseDouble(newAvailableQuantity.getText()));
             ps.setInt(2,Integer.parseInt(inventoryId.getText()));
            ps.executeUpdate();
            System.out.println("update exceuted");
         //   con.close();
            System.out.print("Database connection closed");

        }catch(Exception e)
        {
            e.printStackTrace();
        }

    }
  
    public void loadStudent()
    {
         //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
int feeid=0;
//int sessionValue=0;
        try{

             ps = con.prepareStatement("select * from studententry where id=?");
         ps.setString(1,admissionnotext.getText());

             rs = ps.executeQuery();

                    if(!rs.next())
                    {
                         JOptionPane.showMessageDialog(null,"Invalid student Admission No.","Invalid",JOptionPane.PLAIN_MESSAGE);
                    }
        // ps = con.prepareStatement("select * from studententry where id=?");
         //ps.setString(1,admissionnotext.getText());

           //  rs = ps.executeQuery();

                   // if(rs.next())
                    else
                    {

                    studentclass.setText(classmap.get(rs.getInt(9)).toString());
                    studentname.setText(rs.getString(2).trim());
                    rollnumber.setText(String.valueOf(rs.getInt(11)));

 int status=rs.getInt(14);
  if(status==0)
  {

     JOptionPane.showConfirmDialog(null,"Ex Student Can't have transactions","Ex Student Prompt",JOptionPane.OK_CANCEL_OPTION);
     admissionnotext.setText("");
  }
  else
  {
     ps=con.prepareStatement("select * from ledgerotherfeeheadcode where feehead=?");
            ps.setString(1,"Inventory Purchase");
            rs=ps.executeQuery();
            if(rs.next())
            feeid=rs.getInt(3);

     ps=con.prepareStatement("select * from feedues where studentid=? and head=? and feetype=? and session=?");
    // ps=con.prepareStatement("select * from feedues where studentid=?");
            ps.setString(1,admissionnotext.getText());
     ps.setInt(2,feeid);
      ps.setInt(3,3);
     ps.setInt(4,sessionValue);
     rs=ps.executeQuery();
     if(rs.next())
     {
       int choose=JOptionPane.showConfirmDialog(null,"Inventory Purchase Record Exists,Click 'History' to verify","Inventory Record Present",JOptionPane.OK_OPTION);
     if(choose==JOptionPane.OK_OPTION)
  loadTable();
       System.out.println("Fee Dues prsent");
     }
     else
     {
         System.out.println("No Fee Dues prsent");
        loadTable();
     }

  }
  //con.close();
            // JOptionPane.showMessageDialog(null,"data loaded successfully","report",JOptionPane.PLAIN_MESSAGE);

            //System.out.println("DataBase Connection Closed");
            
                    }

           
    }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
    }

    public void loadTable()
    {
        int i=0,j=0;
        dm.setRowCount(0);
        try
        {
            ps=con.prepareStatement("select * from inventorydeposit left join invclasswise on InventoryId=invid where classid=?");
             ps.setInt(1,Integer.parseInt(classmap1.get(studentclass.getText()).toString()));
            rs=ps.executeQuery();
            if(rs.next())
            {
                 rs.first();
            rs.previous();

                 while(rs.next())

            {
                j++;
            }
            rs.first();
            rs.previous();
            dm.setRowCount(j);
                 while(rs.next())
            {
                     dm.setValueAt(i+1, i, 0);
                dm.setValueAt(rs.getInt(1),i, 1);
                 dm.setValueAt(category.get(rs.getInt(2)),i,2);

                 dm.setValueAt(rs.getString(3),i, 3);
                 dm.setValueAt(vendor.get(rs.getInt(10)),i, 4);
                 dm.setValueAt(rs.getDouble(8),i, 5);

                 dm.setValueAt(rs.getInt(5),i, 6);
                // if(rs.getString(2).equals("BookSet") ||rs.getString(2).equals("Stationary") )
                 dm.setValueAt(1,i, 7);
                // else
                  //   dm.setValueAt(0,i, 7);
                 //dm.setValueAt(category.get(rs.getInt(2)),i, 5);
                 //dm.setValueAt(rs.getInt(1),i, 6);
                // dm.setValueAt(category.get(rs.getInt(2)),i, 1);
                 i++;

            }
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    public void showGeneralInventory()
{
    int i=0,j=0;
        dm.setRowCount(0);
        try
        {
            ps=con.prepareStatement("select * from inventorydeposit left join invclasswise on InventoryId=invid where classid=?");
             ps.setInt(1,Integer.parseInt(classmap1.get("General").toString()));
            rs=ps.executeQuery();
            if(rs.next())
            {
                 rs.first();
            rs.previous();

                 while(rs.next())

            {
                j++;
            }
            rs.first();
            rs.previous();
            dm.setRowCount(j);
                 while(rs.next())
            {
                     dm.setValueAt(i+1, i, 0);
                dm.setValueAt(rs.getInt(1),i, 1);
                 dm.setValueAt(category.get(rs.getInt(2)),i,2);

                 dm.setValueAt(rs.getString(3),i, 3);
                 dm.setValueAt(vendor.get(rs.getInt(10)),i, 4);
                 dm.setValueAt(rs.getDouble(8),i, 5);

                 dm.setValueAt(rs.getInt(5),i, 6);
                
                    dm.setValueAt(0,i, 7);
                
                 i++;

            }
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
}
     public void classFilter()
    {


    }
   public void setAdmissionNo(String id)
    {
        admissionnotext.setText(id);
        int keycode=KeyEvent.VK_ENTER;
        if(keycode==KeyEvent.VK_ENTER)
            loadStudent();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox admissionfeecheckbox2;
    private javax.swing.JTextField admissionnotext;
    private javax.swing.JTextField availableQuantitytext;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exitButton1;
    private javax.swing.JButton exitButton2;
    private javax.swing.JTextField inventoryId;
    private javax.swing.JComboBox inventoryNameCombo;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator2;
    private org.jdesktop.swingx.JXTable jTable1;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JTextPane jTextPane4;
    private javax.swing.JButton loadInventoryButton;
    private javax.swing.JTextField newAvailableQuantity;
    private javax.swing.JTextField rollnumber;
    private javax.swing.JTextField sellinPrice;
    private javax.swing.JButton studentHistory;
    private javax.swing.JTextField studentclass;
    private javax.swing.JTextField studentname;
    private javax.swing.JButton updateInventoryStock;
    private javax.swing.JButton updateInventoryStock1;
    private javax.swing.JTextField withdrawalQuantityText;
    // End of variables declaration//GEN-END:variables
//private Connection con;
    private  PreparedStatement ps;
    ResultSet rs;
    public int screenheight,screenwidth;
    public String m;
    public String monthofadmission;
    public Integer sessionValue=0;
    public Double total1=0.0;
}
