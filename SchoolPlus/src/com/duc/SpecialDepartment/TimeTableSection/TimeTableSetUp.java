/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimeTableSetUp.java
 *
 * Created on Oct 5, 2009, 6:01:57 PM
 */

package com.duc.SpecialDepartment.TimeTableSection;

import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable.PrintMode;
import java.text.MessageFormat;
import java.util.HashMap;
import com.duc.ImportSection.MapForIndex;
import static com.duc.DatabaseConnection.DatabaseConnection.*;
/**
 *
 * @author sourabh
 */
public class TimeTableSetUp extends javax.swing.JInternalFrame {

          // MapForIndex mp=new MapForIndex();
           HashMap classmap1=mp.getClassIndexFromName();
           HashMap subjectmap1=mp.getSubjectIndexFromName();
           HashMap classmap=mp.getClassIndexName();
           HashMap subjectmap=mp.getSubjectIndexToName();
           HashMap sectionmap=mp.getSectionIndexName();
           HashMap sectionmap1=mp.getSectionIndexFromName();

     private DefaultTableModel model;
     private DefaultTableModel dm;

     private ArrayList<Integer> recess = new ArrayList<Integer> ();
     private ArrayList<ClassPeriods> cps = new ArrayList<ClassPeriods> ();
     private ArrayList<TeacherDetail> td = new ArrayList<TeacherDetail> ();
     private ArrayList<TeacherTotalPeriods> tp=new ArrayList<TeacherTotalPeriods>();
     private ArrayList<String> tcodes = new ArrayList<String> ();

    /** Creates new form TimeTableSetUp */
    public TimeTableSetUp()
    {
        initComponents();

        jTable1.setHorizontalScrollEnabled(true);
        jTable1.setHighlighters(HighlighterFactory.createAlternateStriping());
        jTable2.setHighlighters(HighlighterFactory.createAlternateStriping());

        model = new TimeTableModel(0).createDefaultModel();
        jTable1.setModel(model);
       
        dm = (DefaultTableModel) jTable2.getModel();
        dm.setRowCount(0);

         recess.clear();
         cps.clear();
         tp.clear();
         td.clear();
         
         loadDays();
         addClass();
         loadRecessColumns();
         
    }


    public void loadRecessColumns()
    {
        recess.add(0);

        try
       {
      //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        ps=con.prepareStatement("select recess,id from timetableperiods order by id");
        rs=ps.executeQuery();

        int i=1;
        while(rs.next())
        {
         if(rs.getInt(1)==1)
         recess.add(i);         
         i++;
        }
          // con.close();
        }
        catch(Exception e)
        {
         System.err.println("Error is ..."+e);
        }

    }

      public void addClass()
    {
       try
       {
        // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         ps=con.prepareStatement("select classtitle from classsetup ");
         rs=ps.executeQuery();

         while(rs.next())
         cmbClass.addItem(rs.getString(1));
         //con.close();

       }
       catch(Exception e)
       {
        System.err.println("Exception is..."+e);
       }
    }


    public void loadDays()
    {
      model.setRowCount(6);
      model.setValueAt("MON", 0,0);
      model.setValueAt("TUE", 1,0);
      model.setValueAt("WED", 2,0);
      model.setValueAt("THU", 3,0);
      model.setValueAt("FRI", 4,0);
      model.setValueAt("SAT", 5,0);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jDialog1 = new javax.swing.JDialog();
        cmbTeacher = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new org.jdesktop.swingx.JXTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbSection = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new org.jdesktop.swingx.JXTable();
        jButton2 = new javax.swing.JButton();
        sectionLabel = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        jScrollPane2.setViewportView(jTextPane2);

        jDialog1.setTitle("Choose Teacher and subject");
        jDialog1.setAlwaysOnTop(true);
        jDialog1.setBackground(new java.awt.Color(0, 204, 204));
        jDialog1.setBounds(new java.awt.Rectangle(100, 100, 400, 350));

        cmbTeacher.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        cmbTeacher.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTeacherItemStateChanged(evt);
            }
        });

        jLabel3.setText("Teacher");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable2);

        jButton3.setText("OK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Left Blank");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Close");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jDialog1Layout.createSequentialGroup()
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jDialog1.getAccessibleContext().setAccessibleParent(jTable2);

        setBackground(new java.awt.Color(0, 204, 204));
        setClosable(true);
        setIconifiable(true);
        setTitle("Time Table Setup");

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jTextPane1.setText("                                                                                              Class Time Table");
        jScrollPane1.setViewportView(jTextPane1);

        jLabel1.setText("Class");

        cmbClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        cmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClassItemStateChanged(evt);
            }
        });

        jLabel2.setText("Section");

        cmbSection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbSectionMouseClicked(evt);
            }
        });
        cmbSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSectionItemStateChanged(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("Print");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnControlVisible(true);
        jTable1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jTable1.setRowHeight(90);
        jTable1.setSortable(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable1);

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        sectionLabel.setText("        ");

        jButton8.setText("+");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("-");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9)
                    .addComponent(jButton8)
                    .addComponent(sectionLabel)
                    .addComponent(jButton5)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(cmbTeacher.getSelectedIndex()<=0)
        return;

        int j=dm.getRowCount();
        if(j<=0)
        return;
       
       int i=jTable2.getSelectedRow();
       if(i==-1)
       return;

       boolean b=checkForMaxPeriods();  
       if(b==true)
       {
       System.out.println("setting block ");
       setBlock();       
       }
       else
       {
        jDialog1.setVisible(false);
        JOptionPane.showMessageDialog(null,"Max no. of periods have already been configured for this teacher.", "Error Message", JOptionPane.ERROR_MESSAGE);
       }
       jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    public void setBlock()
    {
    //System.out.println("inside bllock"+ jTable1.getSelectedColumn());

    int row=jTable1.getSelectedRow();
    int column=jTable1.getSelectedColumn();
    String teachercode=td.get(cmbTeacher.getSelectedIndex()-1).code;
    String subject=String.valueOf(dm.getValueAt(jTable2.getSelectedRow(),0));

    try
    {
    //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
      ps=con.prepareStatement("select subject from periodallotment where teachercode=? and row=? and `periodallotment`.`column`=?");
      ps.setString(1,teachercode);
      ps.setInt(2, row);
      ps.setInt(3, column);
      rs=ps.executeQuery();

      if(rs.next())
      {
      jDialog1.setVisible(false);
      JOptionPane.showMessageDialog(null, "Teacher is already configured for a period in same time in some another class.", "Error Report",JOptionPane.ERROR_MESSAGE);
      return;
      }
    }
    catch(Exception e)
    {
     System.err.println("Error in checking existing periods..."+e);
     return;
    }
   

    String s=null;
    try
    {
     s=model.getValueAt(row, column).toString();
    }
    catch(Exception e)
    {
    System.err.println(e);
    }
    
    System.out.println("object value is " +s);
    
    if(s!=null )
    {
    System.out.println("Block is not empty.");

    int i=0;
    for(ClassPeriods c : cps)
    {
     if(c.column==column && c.row==row)
     {
     TeacherTotalPeriods ttp=new TeacherTotalPeriods();
     String tcode=cps.get(i).teachercode;
     System.out.println("Previous teachercode= "+ tcode);
     ttp.teachercode=tcode;

     int index=tcodes.indexOf(tcode);
     System.out.println("Index in teacher's list "+ index);

     int k=tp.get(index).totalperiods-1;
     System.out.println("Value of modified periods "+ k);

     ttp.totalperiods=k;

     tp.set(index, ttp);
     cps.remove(i);
     break;
     }
     i++;
    }     
    }
    else
    {
     System.out.println("Block is empty.");
    }


    ClassPeriods cp =new ClassPeriods();
    cp.row=row;
    cp.column=column;    
    cp.teachercode=teachercode;
    cp.subject=Integer.parseInt(String.valueOf(subjectmap1.get(subject)));
    cps.add(cp);

   title="<html><font color='blue'>"+cmbTeacher.getSelectedItem().toString()+"</font><br /><font color='green'>"+subject +"</font></html>";
   model.setValueAt(title, row, column);;

  TeacherTotalPeriods ttp=new TeacherTotalPeriods();
  ttp.teachercode=teachercode;
  int p=tp.get(cmbTeacher.getSelectedIndex()-1).totalperiods+1;
  ttp.totalperiods=p;
  tp.set(cmbTeacher.getSelectedIndex()-1, ttp);
  
    }
    
    private void cmbTeacherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTeacherItemStateChanged
        // TODO add your handling code here:
        if(cmbTeacher.getSelectedIndex()<=0)
        {
           dm.setRowCount(0);
           return;
        }
       
        loadSubjects();
    }//GEN-LAST:event_cmbTeacherItemStateChanged

    public void loadSubjects()
    {
        TeacherDetail t= new TeacherDetail();
        t=td.get(cmbTeacher.getSelectedIndex()-1);

        try
      {
       // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        ps=con.prepareStatement("select subject from subjectallotment where teachercode=? and class=? ");
        ps.setString(1, t.code);
        ps.setInt(2,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
        rs=ps.executeQuery();

        int i=0,j=0;
        while(rs.next())
        {
         j++;
        }
        dm.setRowCount(j);
        rs.first();
        rs.previous();

        while(rs.next())
        {
            dm.setValueAt(String.valueOf(subjectmap.get(rs.getInt(1))), i, 0);
            i++;
        }
      
       // con.close();
      }
      catch(Exception e)
      {
         System.err.println("Error in loading teachers..."+e);
      }

    }

    private void cmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClassItemStateChanged
        // TODO add your handling code here:
        if(cmbClass.getSelectedIndex()<=0)
        {
         sectionLabel.setText("");
         fillEmptyTimeTable();
         return;
        }
        loadSection();
        if(cmbSection.getSelectedItem().toString().isEmpty())
        {
         fillEmptyTimeTable();
         sectionLabel.setText("");
         return;
        }
        sectionLabel.setText(cmbSection.getSelectedItem().toString());
        loadTeachers();
        process();
    }//GEN-LAST:event_cmbClassItemStateChanged

     public void process()
    {
        cps.clear();
        System.out.println("loading class time table now................");
        loadClassTimeTable();
    }


    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        setBlank();
    }//GEN-LAST:event_jButton4ActionPerformed

    public void setBlank()
 {
    int row=jTable1.getSelectedRow();
    int column=jTable1.getSelectedColumn();
    int i=0;  

    String s=null;
    try
    {
     s=model.getValueAt(row, column).toString();
    }
    catch(Exception e)
    {
    System.err.println(e);
    }

    System.out.println("object value is " +s);

    if(s!=null )
    {
    System.out.println("Block is not empty.");
     i=0;
    for(ClassPeriods c : cps)
    {
     if(c.column==column && c.row==row)
     {
     TeacherTotalPeriods ttp=new TeacherTotalPeriods();
     String tcode=cps.get(i).teachercode;
     System.out.println("Previous teachercode= "+ tcode);
     ttp.teachercode=tcode;

     int index=tcodes.indexOf(tcode);
     System.out.println("Index in teacher's list "+ index);

     int k=tp.get(index).totalperiods-1;
     System.out.println("Value of modified periods "+ k);

     ttp.totalperiods=k;

     tp.set(index, ttp);
     cps.remove(i);
     break;
     }
     i++;
    }
    }
    else
    {
     System.out.println("Block is empty.");
    }
    model.setValueAt("", row, column);
    jDialog1.setVisible(false);
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try
        {
        String s="Time Table For (";
        s+=" Class : "+cmbClass.getSelectedItem().toString()+" , Section : "+cmbSection.getSelectedItem().toString()+" )";
        MessageFormat header=new MessageFormat(s);
        jTable1.print(PrintMode.FIT_WIDTH, header, null);
        }
        
        catch(Exception e)
        {
         System.err.println("Error in printing timetable");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(cmbClass.getSelectedIndex()<=0)
        return;

        if(cmbSection.getSelectedItem().toString().isEmpty())
        return;
        
        savePeriods();
    }//GEN-LAST:event_jButton1ActionPerformed

    public boolean checkForMaxPeriods()
    {
    System.out.println("checking for max periods");
    boolean c=true;
    String teachercode=td.get(cmbTeacher.getSelectedIndex()-1).code;
    System.out.println("For teachercode "+ teachercode);
    try
    {
    ps=con.prepareStatement("select maxperiods from teachermaxperiods where teachercode=?");
    ps.setString(1,teachercode);
    rs=ps.executeQuery();
    if(!rs.next())
    {
    return c;
    }
    else
    {
        int max_periods=rs.getInt(1);
        System.out.println("Max periods for this teacher "+ max_periods);
        
        int total_periods=tp.get(cmbTeacher.getSelectedIndex()-1).totalperiods;
        System.out.println("Total periods for teacher "+ total_periods);
        if(total_periods>=max_periods)
        c=false;      
    }
    }
    catch(Exception e)
    {
    e.printStackTrace();
    }
    return c;
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        System.out.println("row is .."+jTable1.getSelectedRow()+" Column is..."+jTable1.getSelectedColumn());
        //this.add(jDialog1);
        int j=jTable1.getSelectedColumn();
        if(recess.contains(j))
            ;
        else {
            jDialog1.setVisible(true);
            cmbTeacher.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void cmbSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSectionItemStateChanged
        // TODO add your handling code here:       
    }//GEN-LAST:event_cmbSectionItemStateChanged

    private void cmbSectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbSectionMouseClicked
        // TODO add your handling code here:
         if(cmbSection.getSelectedItem().toString().isEmpty())
        {
         fillEmptyTimeTable();
         sectionLabel.setText("");
         return;
        }
        sectionLabel.setText(cmbSection.getSelectedItem().toString());
        process();
    }//GEN-LAST:event_cmbSectionMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        super.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        int i=jTable1.getRowHeight();
        jTable1.setRowHeight(i+5);
}//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        int i=jTable1.getRowHeight();
        if(i>30)
            jTable1.setRowHeight(i-5);
}//GEN-LAST:event_jButton9ActionPerformed

    public void fillEmptyTimeTable()
    {
      int row=0,column=0;
      int j=model.getColumnCount();
      System.out.println("Filling empty time table.");
      for( column=1;column<j;column++)
      {
         for ( row=0;row<=5;row++)
         {
          model.setValueAt("", row, column);  
         }
      }

    }
    
    public void loadClassTimeTable()
    {
      int row=0,column=0,subject=0;
      String code="",name="";
      try
      {
       int cls= Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString())));
       int sec= Integer.parseInt(String.valueOf(sectionmap1.get(cmbSection.getSelectedItem().toString()))) ;

       System.out.println("Class: "+cls+" Section: "+sec);

       ps=con.prepareStatement("select row,`periodallotment`.`column`,teachercode,name,subject from periodallotment, staffentry where teachercode=code and  class=? and section=?");
       ps.setInt(1,cls);
       ps.setInt(2,sec);
       rs=ps.executeQuery();
       cps.clear();
      
       fillEmptyTimeTable();       

       while(rs.next())
       {
       row=rs.getInt(1);
       column=rs.getInt(2);
       code=rs.getString(3);
       name=rs.getString(4);
       subject=rs.getInt(5);

       ClassPeriods cp= new ClassPeriods();
       cp.column=column;
       cp.row=row;
       cp.teachercode=code;
       cp.subject=subject;
       cps.add(cp);

       System.out.println("Row: "+row+" Column: "+column+" Name: "+name +" Subject: "+subject);
       String period="<html><font color='blue'>"+code+" [ "+name+" ]"+"</font><br /><font color='green'>"+String.valueOf(subjectmap.get(cp.subject ))+"</font></html>";
       model.setValueAt(period, row, column);
       }
      }
      catch(Exception e)
      {
       System.err.println("Error in loading class time table..."+e);
      }
    }

    public void savePeriods()
    {
     int j= cps.size();
     if(j<=0)
     return;

     int cls= Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString())));
     int sec= Integer.parseInt(String.valueOf(sectionmap1.get(cmbSection.getSelectedItem().toString()))) ;
     
     try
     {
    // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
     ps=con.prepareStatement("delete from periodallotment where class=? and section=? ");
     ps.setInt(1,cls);
     ps.setInt(2,sec);
     ps.executeUpdate();

     for(ClassPeriods c : cps)
     {
     ps=con.prepareStatement("insert into periodallotment (teachercode,class,section,subject,row,`periodallotment`.`column`) values (?,?,?,?,?,?)");
     ps.setString(1, c.teachercode);
     ps.setInt(2, cls);
     ps.setInt(3, sec);
     ps.setInt(4,c.subject);
     ps.setInt(5, c.row);
     ps.setInt(6, c.column);
     ps.executeUpdate();
     }
     JOptionPane.showMessageDialog(null, "Time Table Saved.", "Message", JOptionPane.INFORMATION_MESSAGE) ;
   //  con.close();
    }     
     catch(Exception e)
     {
      System.err.println("Error in saving periods..."+e);
     }
    }

    
  public void loadTeachers()
    {
        if(cmbClass.getSelectedIndex()<=0)
        return;
        
       try
      {
      //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
        ps=con.prepareStatement("select distinct teachercode,name from subjectallotment,staffentry where teachercode=code and class=? and status=1");
        ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
        rs=ps.executeQuery();
       
        td.clear(); tp.clear(); tcodes.clear();
        
        cmbTeacher.removeAllItems();
        cmbTeacher.addItem("Choose");

        while(rs.next())
        {
         TeacherDetail t=new TeacherDetail();
         TeacherTotalPeriods ttp=new TeacherTotalPeriods();

         t.code=rs.getString(1);   ttp.teachercode=rs.getString(1); 
         t.name=rs.getString(2);   ttp.totalperiods=0;
         td.add(t); tp.add(ttp); tcodes.add(rs.getString(1));
         cmbTeacher.addItem(t.code+" [ "+t.name+" ]");
        }

        ps=con.prepareStatement("select teachercode,count(*) from periodallotment group by teachercode ");
        //ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
        rs=ps.executeQuery();      
        System.out.println(ps) ;
        
        String tempcode=""; int i=0;
        while(rs.next())
       {
        if(tcodes.contains(rs.getString(1)))
         {
        tempcode=rs.getString(1);
        i=tcodes.indexOf(tempcode);
        System.out.println("index is "+i);
        TeacherTotalPeriods ttp=new TeacherTotalPeriods();
        ttp.teachercode=tempcode;
        ttp.totalperiods=rs.getInt(2);
        System.out.println("Teachercode: "+tempcode +" ; Periods: "+rs.getInt(2));
        tp.set(i, ttp);
         }
       }
      }
      catch(Exception e)
      {
         System.err.println("Error in loading teachers..."+e);
      }
    }

    
    public void loadSection()
{
        if(cmbClass.getSelectedIndex()<=0)
        return;
       try
       {
         System.out.println("Loading Sections Now......");
         ps=con.prepareStatement("select sectiontitle from sectionsetup where classtitle=?");
         ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
         rs=ps.executeQuery();

         cmbSection.removeAllItems();

         while(rs.next())
         {
         cmbSection.addItem(String.valueOf(sectionmap.get(rs.getInt(1))));
         }
       }
       catch(Exception e)
       {
        System.err.println("Error is..."+e);
       }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JComboBox cmbSection;
    private javax.swing.JComboBox cmbTeacher;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private org.jdesktop.swingx.JXTable jTable1;
    private org.jdesktop.swingx.JXTable jTable2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JLabel sectionLabel;
    // End of variables declaration//GEN-END:variables

  // Connection con;
   PreparedStatement ps;
   ResultSet rs;
}
