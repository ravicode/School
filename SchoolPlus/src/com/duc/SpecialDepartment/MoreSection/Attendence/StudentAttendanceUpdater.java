/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentAttendanceUpdater.java
 *
 * Created on Oct 2, 2009, 11:56:26 AM
 */

package com.duc.SpecialDepartment.MoreSection.Attendence;

import java.sql.*;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import javax.swing.JOptionPane;
import java.util.HashMap;

import java.net.InetAddress;
import static com.duc.DatabaseConnection.DatabaseConnection.*;


/**
 *
 * @author sourabh
 */
public class StudentAttendanceUpdater extends javax.swing.JInternalFrame
{
          // MapForIndex mp=new MapForIndex();
           HashMap classmap1=mp.getClassIndexFromName();
           //HashMap subjectmap1=mp.getSubjectIndexFromName();
           //HashMap classmap=mp.getClassIndexName();
         // HashMap subjectmap=mp.getSubjectIndexToName();
           HashMap sectionmap=mp.getSectionIndexName();
           HashMap sectionmap1=mp.getSectionIndexFromName();
           DefaultTableModel dm;
    /** Creates new form StudentAttendanceUpdater */
    public StudentAttendanceUpdater() {
        initComponents();
       // DateFormat df= new SimpleDateFormat("yyyy-MM-dd");
        cmbDate.setDateFormat(df);
        dm = (DefaultTableModel) table.getModel();
        dm.setRowCount(0);
        table.setHighlighters(HighlighterFactory.createAlternateStriping());
        addClass();
    }

    public void addClass()
    {
       try
       {
        // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         ps=con.prepareStatement("select * from classsetup ");
         rs=ps.executeQuery();

         while(rs.next())         
         cmbClass.addItem(rs.getString(1));        

         //con.close();

       }
       catch(Exception e)
       {
        System.err.println("Exception is..."+e);
       }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbDate = new datechooser.beans.DateChooserCombo();
        cmbClass = new javax.swing.JComboBox();
        cmbSection = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new org.jdesktop.swingx.JXTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();

        setBackground(new java.awt.Color(0, 204, 204));
        setClosable(true);
        setIconifiable(true);
        setTitle("Students' Attendances");

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jTextPane1.setText("                                                                         Student Attendance Updater");
        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setText("Date");

        jLabel2.setText("Class");

        jLabel3.setText("Section");

        cmbClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<--Select-->" }));
        cmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClassItemStateChanged(evt);
            }
        });
        cmbClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClassActionPerformed(evt);
            }
        });

        jButton1.setText("Load Students");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbSection, 0, 153, Short.MAX_VALUE)
                                .addComponent(cmbClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(cmbDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Admission No.", "Roll No.", "Name", "Absent", "Reason"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setEditable(false);
        jTextPane2.setText("Select a date and update the students' attendances of a particular class and section. Past attendances can be updated on any date .");
        jScrollPane3.setViewportView(jTextPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        super.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClassItemStateChanged
        // TODO add your handling code here:
        loadSection();
    }//GEN-LAST:event_cmbClassItemStateChanged

    private void cmbClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClassActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmbClassActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        loadStudents();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        saveAbsents();
    /*    try
 {
        ps=con.prepareStatement("select access from smsaccess where module=? ");
    ps.setString(1,"Attendance Section");
    rs=ps.executeQuery();
    if(rs.next())
    {
    if(rs.getInt(1)==1)
       sendSMSToAbsents();
      else JOptionPane.showConfirmDialog(null,"Add SMS package access from Accessories","Contact Administrator",JOptionPane.OK_OPTION);
       // jCheckBox1.setSelected(false);

    }else JOptionPane.showConfirmDialog(null,"Add SMS package access from Accessories","Contact Administrator",JOptionPane.OK_OPTION);
      }catch(Exception e)
{
    e.printStackTrace();
}
*/
       // sendSMSToAbsents();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void sendSMSToAbsents()
    {
        int i=0;
        String id=null;
        try
        {
        for(i=0;i<dm.getRowCount();i++)
        {
            if(Boolean.parseBoolean(dm.getValueAt(i, 3).toString()))
            {
                ps=con.prepareStatement("select phone from studententry where id=?");
                ps.setString(1,dm.getValueAt(i, 0).toString());
                rs=ps.executeQuery();
                if(rs.next())
                {
                  id=rs.getString(1);
                }
               if(id.isEmpty())
          {
          JOptionPane.showConfirmDialog(null,"Mobile no. is not valid","Mobile No. Invalid",JOptionPane.OK_OPTION);
      }
      else
      {
                    String msg="Admission no"+dm.getValueAt(i, 0)+"is absent today";
                    String newmsg=msg.replace(" ","%20");
                    System.out.println("message"+newmsg);
                    System.out.println("Number"+id);
          InetAddress thisIp =InetAddress.getLocalHost();
            String ip=thisIp.getHostAddress();
      new com.duc.Accessories.SendSms().SmsCommon(dm.getValueAt(i, 0).toString(),id,newmsg,ip);
      }
            }
        }
    }catch(Exception e)
    {
     e.printStackTrace();
    }
    }
public void loadSection()
{
 try
       {
         //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         ps=con.prepareStatement("select sectiontitle from sectionsetup where classtitle=?");
         ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
         rs=ps.executeQuery();

         cmbSection.removeAllItems();

         while(rs.next())
         {
         cmbSection.addItem(String.valueOf(sectionmap.get(rs.getInt(1))));
         }
         // con.close();
       }
       catch(Exception e)
       {
        System.err.println("Error is..."+e);
       }
}

public void loadStudents()
{
    try
    {
    // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
     ps=con.prepareStatement("select id, roll, name from studententry where class=? and section=? and status!=0");
     ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
     ps.setInt(2,Integer.parseInt(String.valueOf(sectionmap1.get(cmbSection.getSelectedItem().toString()))));
     rs=ps.executeQuery();
     int i=0,j=0;
     while(rs.next())
     {
      j++;
     }
     dm.setRowCount(j);
     rs.first();
     rs.previous();

    i=0;
    while( rs.next())
     {     
       dm.setValueAt(rs.getString(1), i, 0);
       dm.setValueAt(Integer.parseInt(rs.getString(2)), i, 1);
       dm.setValueAt(rs.getString(3), i, 2);
       i++;
     }
    //con.close();
    }
    catch(Exception e)
    {
      System.out.println("Error is ..."+e);
    }
    
}

public void saveAbsents()
{
  boolean b=false;
  try
  {
 //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();

   ps=con.prepareStatement("delete from studentattendance using `studentattendance`,`studententry` where id_no=id and class=? and section=? and date=?");
   ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))) );
   ps.setInt(2, Integer.parseInt(String.valueOf(sectionmap1.get(cmbSection.getSelectedItem().toString()))));
   ps.setString(3, cmbDate.getText());
   ps.executeUpdate();
   System.out.println("Deleted for  class"+cmbClass.getSelectedItem().toString()+"....");

   int j=dm.getRowCount();
   for(int i=0;i<j;i++)
   {
       b=false;
       try
       {
        b=(Boolean)dm.getValueAt(i, 3);
        System.out.println(" value is true...");
       }
         catch(Exception e)
         {
         System.err.println("Exception is..."+e);
         }
          if(b==true)
          {
           ps=con.prepareStatement("insert into studentattendance (id_no,date,reason) values(?,?,?)");
           ps.setString(1,(String) dm.getValueAt(i, 0));
           ps.setString(2,cmbDate.getText());
           ps.setString(3,(String) dm.getValueAt(i, 4));
           ps.executeUpdate();
          }
   }
   ps=con.prepareStatement("insert into classlastattendance(class,lastdate,section) values(?,?,?)");
   ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
   ps.setString(2,cmbDate.getText());
   ps.setInt(3,Integer.parseInt(String.valueOf(sectionmap1.get(cmbSection.getSelectedItem().toString()))));
   ps.executeUpdate();

   JOptionPane.showMessageDialog(null,"Attendances saved successfully.", "Message",JOptionPane.INFORMATION_MESSAGE );
  // con.close();
  }

  catch(Exception e)
  {
   System.err.println("Error is ...."+e);
  }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbClass;
    private datechooser.beans.DateChooserCombo cmbDate;
    private javax.swing.JComboBox cmbSection;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private org.jdesktop.swingx.JXTable table;
    // End of variables declaration//GEN-END:variables
  // Connection con;
   PreparedStatement ps;
   ResultSet rs;
}
