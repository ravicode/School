/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentBookCirculation.java
 *
 * Created on Sep 25, 2009, 8:02:04 PM
 */

package com.duc.SpecialDepartment.MoreSection.Library;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
//import java.util.HashMap;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.engine.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import java.util.HashMap;
import static com.duc.DatabaseConnection.DatabaseConnection.*;

/**
 *
 * @author sourabh
 */
public class StudentBookCirculation extends javax.swing.JInternalFrame {
    MapForLibrary mp=new MapForLibrary();
    HashMap class1=mp.getClassIndexFromName();
    HashMap section1=mp.getSectionIndexFromName();
    HashMap classindex=mp.getClassIndexName();
    HashMap section=mp.getSectionIndexName();
    int sessionValue=0;

    /** Creates new form StudentBookCirculation */
    public StudentBookCirculation()
    {
        initComponents();
        dm = (DefaultTableModel) bookdetail.getModel();
        dm.setRowCount(0);
        addClass();
        addSection();
        addRollNo();
        fromSession();
    }

    public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");
           rs = ps.executeQuery();
           while(rs.next())
            {
              if(rs.getInt(3)==1)
              sessionValue=rs.getInt(2);
            }
         }
          catch(Exception e)
          {
            // e.printStackTrace();
             System.out.println("Error in session loading  "+e);
          }
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */

       public void addClass()
    {
       try
       {
         //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         ps=con.prepareStatement("select * from classsetup ");
         rs=ps.executeQuery();

         while(rs.next())
         cmbClass.addItem(rs.getString(1));

         //con.close();

       }
       catch(Exception e)
       {
        System.err.println("Exception is..."+e);
       }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAdmission = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        cmbSection = new javax.swing.JComboBox();
        cmbRoll = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtAccession = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookdetail = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        count = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jMenuItem1.setText("Return This Book");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setClosable(true);
        setIconifiable(true);
        setTitle("Student Book Circulation - Issue and Return");

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jTextPane1.setText("                                                     Issue & Return of books.");
        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Student Details");

        jLabel2.setForeground(new java.awt.Color(51, 51, 255));
        jLabel2.setText("Admission No");

        txtAdmission.setToolTipText("Enter Admission Number and press Enter.");
        txtAdmission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAdmissionActionPerformed(evt);
            }
        });
        txtAdmission.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAdmissionKeyPressed(evt);
            }
        });

        jLabel4.setText("Name");

        jLabel5.setText("Class");

        jLabel6.setText("Section");

        jLabel12.setText("Roll No.");

        cmbClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        cmbClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbClassMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cmbClassMouseEntered(evt);
            }
        });
        cmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClassItemStateChanged(evt);
            }
        });

        cmbSection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        cmbSection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbSectionMouseClicked(evt);
            }
        });
        cmbSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSectionItemStateChanged(evt);
            }
        });

        cmbRoll.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose" }));
        cmbRoll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbRollMouseClicked(evt);
            }
        });
        cmbRoll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbRollItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbSection, 0, 160, Short.MAX_VALUE)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(txtAdmission, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(cmbClass, 0, 160, Short.MAX_VALUE)
                            .addComponent(cmbRoll, 0, 160, Short.MAX_VALUE))))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbRoll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
        );

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Book Issue Column");

        jLabel7.setForeground(new java.awt.Color(51, 51, 255));
        jLabel7.setText("Book Accession Number");

        txtAccession.setToolTipText("Enter  Book Accession Number and then press Enter");
        txtAccession.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAccessionKeyPressed(evt);
            }
        });

        jLabel8.setText("Title");

        jLabel9.setText("Author");

        jLabel10.setText("Issue Book to selected student");

        jButton1.setText("Issue");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAccession, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(txtTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(txtAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtAccession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel10))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 204, 204));

        bookdetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, new Integer(0)},
                {null, null, null, null, new Integer(0)},
                {null, null, null, null, new Integer(0)},
                {null, null, null, null, new Integer(0)}
            },
            new String [] {
                "Book Accession Number", "Title", "Issue Date", "Due Date", "Fine (Rs.)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookdetail.setToolTipText("Select a book and right click to return the book");
        bookdetail.setColumnSelectionAllowed(true);
        bookdetail.setComponentPopupMenu(jPopupMenu1);
        jScrollPane2.setViewportView(bookdetail);

        jLabel11.setForeground(new java.awt.Color(0, 0, 255));
        jLabel11.setText("Total Book Issued to Student :");

        count.setText("0");

        jButton2.setText("Show Total  Issued Books");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(313, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(426, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAdmissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAdmissionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAdmissionActionPerformed

    private void txtAdmissionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAdmissionKeyPressed
        // TODO add your handling code here:
         int keycode=evt.getKeyCode();
        if(keycode==KeyEvent.VK_ENTER) 
        {
           int i=txtAdmission.getText().length();
           System.out.println(" 1. Length is "+i);
           loadStudentdData();
        }
    }//GEN-LAST:event_txtAdmissionKeyPressed

     public void loadStudentdData()
    {
     try
     {
     //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
     ps=con.prepareStatement("select name, class, section, roll from studententry where id=?");
     ps.setString(1, txtAdmission.getText());
     rs=ps.executeQuery();
     
     if(rs.next())
     {
      txtName.setText(rs.getString(1));
      cmbClass.setSelectedItem(String.valueOf(classindex.get(rs.getInt(2))));
      cmbSection.setSelectedItem(String.valueOf(section.get(rs.getInt(3))));
      cmbRoll.setSelectedItem(rs.getString(4));
      loadIssuedBooks();
     }

     else
     {
       JOptionPane.showMessageDialog(null,"Invalid Admisiion Number", "Error", JOptionPane.ERROR_MESSAGE);
       txtAdmission.setText("");
       txtName.setText("");
       
       cmbClass.setSelectedIndex(0);
       cmbSection.setSelectedIndex(0);
       cmbRoll.setSelectedIndex(0);

       dm.setRowCount(0);
       count.setText("0");
     }
      // con.close();
     }
     catch(Exception e)
     {
         System.err.println("Error is ...." +e);
     }
    }


    private void txtAccessionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccessionKeyPressed
        // TODO add your handling code here:
         int keycode=evt.getKeyCode();
        if(keycode==KeyEvent.VK_ENTER) {
            loadBookData();
        }
    }//GEN-LAST:event_txtAccessionKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(txtTitle.getText().isEmpty())
        return;
        
          try
       {
        // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         ps=con.prepareStatement("select status from studententry where id=?");
         ps.setString(1,txtAdmission.getText());
         rs=ps.executeQuery();

         while(rs.next())
         {
             int status=rs.getInt(1);
             if(status==0)
             {
                  JOptionPane.showConfirmDialog(null,"Ex Student","Ex Student Prompt",JOptionPane.OK_CANCEL_OPTION);
                  return;
         }
         }
          }
          catch(Exception e)
          {
              //e.printStackTrace();
              System.out.println("Error Occured " +e);
          }
        issueBook();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        int i=bookdetail.getSelectedRow();
        String id=(String)dm.getValueAt(i, 0);
        int b= JOptionPane.showConfirmDialog(null, "Return Book. Accession No. is "+id,"Return Book Confirmation",JOptionPane.YES_NO_OPTION);
        if(b==0)
        returnBook(id);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String command="";
        printIssuedBooks(command);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClassItemStateChanged
        // TODO add your handling code here:         
    }//GEN-LAST:event_cmbClassItemStateChanged


public void addSection()
{

       try
       {
         //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         ps=con.prepareStatement("select distinct sectiontitle from sectionsetuplist ");
         rs=ps.executeQuery();         

         while(rs.next())
         {
         cmbSection.addItem(rs.getString(1));
         }
        //  con.close();
       }
       catch(Exception e)
       {
        System.err.println("Error is..."+e);
       }
}

    public void addRollNo()
    {
      try
       {
        // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         ps=con.prepareStatement("select distinct roll from studententry order by roll asc");
         rs=ps.executeQuery();

         while(rs.next())
         {
         cmbRoll.addItem(rs.getString(1));
         }
          //con.close();
       }
       catch(Exception e)
       {
        System.err.println("Error is..."+e);
       }
    }
    
    private void cmbSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSectionItemStateChanged
        // TODO add your handling code here:
                           
    }//GEN-LAST:event_cmbSectionItemStateChanged

    private void cmbRollItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRollItemStateChanged
        // TODO add your handling code here:
                 
    }//GEN-LAST:event_cmbRollItemStateChanged

    private void cmbSectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbSectionMouseClicked
        // TODO add your handling code here:
         int i=txtAdmission.getText().length();
          System.out.println(" 3. Length is "+i);

          if(cmbRoll.getSelectedIndex()>0 && cmbSection.getSelectedIndex()>0 && cmbClass.getSelectedIndex()>0 )
         loadData();
         else
         {
          txtAdmission.setText("");
          txtName.setText("");
         }
    }//GEN-LAST:event_cmbSectionMouseClicked

    private void cmbRollMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbRollMouseClicked
        // TODO add your handling code here:
        int i=txtAdmission.getText().length();
          System.out.println(" 4. Length is "+i);

         if(cmbRoll.getSelectedIndex()>0 && cmbSection.getSelectedIndex()>0 && cmbClass.getSelectedIndex()>0 )
         loadData();
         else
         {
          txtAdmission.setText("");
          txtName.setText("");
         }
    }//GEN-LAST:event_cmbRollMouseClicked

    private void cmbClassMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbClassMouseEntered
        // TODO add your handling code here:       

    }//GEN-LAST:event_cmbClassMouseEntered

    private void cmbClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbClassMouseClicked
        // TODO add your handling code here:
         int i=txtAdmission.getText().length();
         System.out.println(" 2. Length is "+i);

         if(cmbRoll.getSelectedIndex()>0 && cmbSection.getSelectedIndex()>0 && cmbClass.getSelectedIndex()>0 )
         loadData();
         else
         {
          txtAdmission.setText("");
          txtName.setText("");
         }
    }//GEN-LAST:event_cmbClassMouseClicked

   
 public void loadData()
 {
   try
       {
        // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
         ps=con.prepareStatement("select id,name from studententry where class=? and section=? and roll=?");
         ps.setInt(1, Integer.parseInt(String.valueOf(class1.get(cmbClass.getSelectedItem().toString()))));
         ps.setInt(2, Integer.parseInt(String.valueOf(section1.get(cmbSection.getSelectedItem().toString()))));
         ps.setInt(3, Integer.parseInt(cmbRoll.getSelectedItem().toString()));
         rs=ps.executeQuery();

         if(rs.next())
         {
         txtAdmission.setText(rs.getString(1));
         txtName.setText(rs.getString(2));
         loadIssuedBooks();
         }
         else
         {
          txtAdmission.setText("");
          txtName.setText("");
         }
       }
   catch(Exception e)
   {
     System.err.println("Error Occured... "+e);
   }
 }
 
    public void printIssuedBooks(String command)
    {
        try
        {
         // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
          HashMap map = new HashMap();

          ps=con.prepareStatement("select institutename, instituteaddress from instituteregistration" );
          rs = ps.executeQuery();
          rs.next();
          map.put("schoolname",rs.getString(1));
          map.put("schooladdress",rs.getString(2));

           BufferedImage bimg = null;
          try
          {
            bimg = ImageIO.read(new File("images/logo.jpg"));
          }
         catch (Exception ex)
        {
          System.err.println("Error in image printing "+ex);
        }
          map.put("logo",bimg);

          ps=con.prepareStatement("select studentid,name, booknumber,booktitle,date_format(issuedate,'%d-%m-%Y') as issuedate  from `studentlibraryrecord` left join `studententry` on studentid=id where `studententry`.`status`=1 and `studentlibraryrecord`.`status`=1 " + command +" order by booknumber asc");
          rs = ps.executeQuery();
         

          if(!rs.next())
          {
            JOptionPane.showMessageDialog(null,"No result found !", "Message", JOptionPane.INFORMATION_MESSAGE);
            return;
          }
               rs.first();
               rs.previous();
                JRResultSetDataSource src = new JRResultSetDataSource(rs);
                JasperReport js = JasperCompileManager.compileReport("reports/library/book_issued.jrxml");
                JasperPrint pr = JasperFillManager.fillReport(js, map,src);
                JasperViewer jv = new JasperViewer(pr, false);
                jv.setTitle("Issued Book details ");
                jv.setVisible(true);

          //  con.close();
        }
        catch(Exception e)
        {
           System.out.println("Error is "+ e);
        }
    }



    public void returnBook(String id)
    {
      int ledcode=0,feeid=0;

       System.out.println("Book id is... "+id);
        try
        {
         //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();

         int i=bookdetail.getSelectedRow();
         int fine=0;
         try
         {
         fine=Integer.parseInt(String.valueOf(dm.getValueAt(i, 4)));
         }
         catch(Exception e)
         {
           System.err.println("Error is..."+e);
           System.out.println("thryntryn ");
         }

         System.out.println("Fine is "+fine);

         if(fine>0)
         {
        System.out.println("Fine is "+fine);

        ps=con.prepareStatement("Select * from ledgerotherfeeheadcode where feehead=?");
         ps.setString(1,"Library Fine");
         rs=ps.executeQuery();

         if(!rs.next())
         {
        ps=con.prepareStatement("insert into ledgerotherfeeheadcode (feehead) values(?)");
                ps.setString(1,"Library Fine");
                ps.executeUpdate();
         }

        ps=con.prepareStatement("Select * from ledgerotherfeeheadcode where feehead=?");
         ps.setString(1,"Library Fine");
         rs=ps.executeQuery();

         if(rs.next())
         {
         ledcode=rs.getInt(2);
         feeid=rs.getInt(3);
         }

          System.out.println("LLLLLLLLLLLLLLL");
          ps=con.prepareStatement("insert into feedues (studentid,head,dues,month,date,groupid,ledgercode,feetype,session) values(?,?,?,(select(date_format(current_date(),'%m'))),(select current_date()),?,?,?,?)");
          ps.setString(1, txtAdmission.getText());
          ps.setInt(2, feeid);
          ps.setDouble(3,Double.parseDouble(String.valueOf(fine)));
          ps.setInt(4,0);
          ps.setInt(5,ledcode);
          ps.setInt(6,3);
          ps.setInt(7, sessionValue);
          System.out.println(ps);
          ps.executeUpdate();
          
          System.out.println("Library Fine is imposed.");
        } 
         ps=con.prepareStatement("update bookstatus set available=1 where booknumber=?");
         ps.setString(1, id);
         ps.executeUpdate();

         ps=con.prepareStatement("update  studentlibraryrecord set status=0, returndate=(select current_date()),fine=? where studentid=? and booknumber=? and status=1");
         ps.setInt(1, fine);
         ps.setString(2, txtAdmission.getText());
         ps.setString(3,id);
         ps.executeUpdate();

         // JOptionPane.showMessageDialog(null,"Book Returned.", "Message", JOptionPane.INFORMATION_MESSAGE);
         loadIssuedBooks();
        // con.close();
        
        }
        catch(Exception e)
        {
        System.err.println("Error is ..."+e);
        }
    }


   public void  issueBook()
    {
        int maxbooks=0;
        if(txtAdmission.getText().isEmpty())
        {
         JOptionPane.showMessageDialog(null,"Enter Admission number First", "Error", JOptionPane.ERROR_MESSAGE);
         return;
        }

         if(txtAccession.getText().isEmpty())
        {
         JOptionPane.showMessageDialog(null,"Enter Book Accession  number First", "Error", JOptionPane.ERROR_MESSAGE);
         return;
        }

        try
        {
    
         //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();

         ps=con.prepareStatement("select available from bookstatus where booknumber=?");
         ps.setString(1, txtAccession.getText());
         rs=ps.executeQuery();
         
         if(rs.next())
         {
           int i=rs.getInt(1);
           if(i==0)
           {
            JOptionPane.showMessageDialog(null,"Book Not Available.Already Issued.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
           }
           if(i==2)
           {
            JOptionPane.showMessageDialog(null,"This Book is weeded out.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
           }
           if(i==3)
           {
            JOptionPane.showMessageDialog(null,"This Book is lost.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
           }
         }
         
         else
         {
          JOptionPane.showMessageDialog(null,"Invalid Book Accession  Number !", "Error", JOptionPane.ERROR_MESSAGE);
          return;
         }
          System.out.println("wwwwwwww");
         ps=con.prepareStatement("select maxbooks from bookfine");
         rs=ps.executeQuery();
         if(rs.next())
         {
            maxbooks=rs.getInt(1);
         }


         if(maxbooks>0)
         {
         int j=dm.getRowCount();

         if(j==maxbooks)
         {
         JOptionPane.showMessageDialog(null,"Max. Books have already issued to the student", "Error", JOptionPane.ERROR_MESSAGE);
         return;
         }
         System.out.println("ooooo");
         }
         

         ps=con.prepareStatement("update bookstatus set available=0,issuedate=(select current_date()) where booknumber=?");
         ps.setString(1, txtAccession.getText());
         ps.executeUpdate();

         System.out.println("ggggggggggg"+"rrrrrrr");

         ps=con.prepareStatement("select mode,daysallowed from bookfine ");
         rs=ps.executeQuery();
         rs.next();
         int i=0;
         if(rs.getInt(1)==1)
         {
         i=rs.getInt(2);
         }
         

         ps=con.prepareStatement("insert into studentlibraryrecord (studentid,booknumber,booktitle,status,issuedate,duedate) values (?,?,?,1,(select current_date()),(select adddate(current_date(),?)))");
         ps.setString(1, txtAdmission.getText());
         ps.setString(2, txtAccession.getText());
         ps.setString(3, txtTitle.getText());
         ps.setInt(4, i);
         ps.executeUpdate();

         loadIssuedBooks();
         //JOptionPane.showMessageDialog(null,"Book Issued.", "Message", JOptionPane.INFORMATION_MESSAGE);
         resetData();         
       //  con.close();
        }
        catch(Exception e)
        {
            //e.printStackTrace();
            System.err.println("Error in issue book ...."+e);
        }   

    }


   public void resetData()
   {
    // txtAdmission.setText("");
     txtAccession.setText("");
    // txtName.setText("");
    // txtClass.setText("");
    // txtSection.setText("");
     txtAuthor.setText("");
     txtTitle.setText("");
   }

    public void loadBookData()
    {
        try
     {
     //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
     
     ps=con.prepareStatement("select booktitle,author from bookinformation where accession_no=?");
     ps.setString(1, txtAccession.getText());
     rs=ps.executeQuery();
     if(rs.next())
     {
     txtTitle.setText(rs.getString(1));
     txtAuthor.setText(rs.getString(2));    
     } 
     else
     {
       JOptionPane.showMessageDialog(null,"Invalid Accession Number", "Error", JOptionPane.ERROR_MESSAGE);
       txtAccession.setText("");
       txtAuthor.setText("");
       txtTitle.setText("");
     }
     //con.close();
     }
     catch(Exception e)
     {
         System.err.println("Error is ...." +e);
     }
    }

    public void loadIssuedBooks()
    {
        System.out.println("loading issued books....");

        try
     {
            
     ps=con.prepareStatement("select booknumber,booktitle,date_format(issuedate,'%d-%m-%Y'),date_format(duedate,'%d-%m-%Y'),(TO_DAYS(current_date())-TO_DAYS(issuedate)) as days from studentlibraryrecord where studentid= ? and status=1");
     ps.setString(1, txtAdmission.getText());
     rs=ps.executeQuery();
     System.out.println("AA");
    if(!rs.next())
    {
     dm.setRowCount(0);
     count.setText("0");
     return;
    }
     System.out.println("BB");
    rs.previous();
    int p=0,q=0;    
    while(rs.next())
    p++;

    count.setText(String.valueOf(p));

    dm.setRowCount(p);

    rs.first();
    rs.previous();
     System.out.println("CC");
    while(rs.next())
    {
    dm.setValueAt(rs.getString(1), q, 0);
    dm.setValueAt(rs.getString(2), q, 1);
    dm.setValueAt(rs.getString(3), q, 2);
    dm.setValueAt(rs.getString(4), q, 3);
    q++;
    }    
   System.out.println("DD");
    setfine();
    }
      catch(Exception e)
      {
       System.err.println("Error in loading books  ...."+ e);
      }
    }

    public void setfine()
    {        
     if(dm.getRowCount()<=0)
     return;

     try
     {
     //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
     ps=con.prepareStatement("select * from bookfine");
     rs=ps.executeQuery();     
     rs.next();

     int mode=rs.getInt(1);
     int days=rs.getInt(2);
     int amount=rs.getInt(3);

     System.out.println("EE");

     if(mode==0)
     return;

     int i=0,j=0,totaldays=0,fine;
     j=dm.getRowCount();

     ps=con.prepareStatement("select (TO_DAYS(current_date())-TO_DAYS(issuedate)) as days from studentlibraryrecord where studentid= ? and status=1");
     ps.setString(1, txtAdmission.getText());
     rs=ps.executeQuery();
     
     while(rs.next())
     {
     fine=0;     
     totaldays=rs.getInt(1);

     if(totaldays>days)
     fine=amount*(totaldays-days);
     dm.setValueAt(fine,i,4);
     i++;
     }     
     // con.close();
     System.out.println("FF");
     }
     catch(Exception e)
     {
      System.err.println("Error in setting fine ...." +e);
     }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookdetail;
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JComboBox cmbRoll;
    private javax.swing.JComboBox cmbSection;
    private javax.swing.JLabel count;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextField txtAccession;
    private javax.swing.JTextField txtAdmission;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
  // public Connection con;
   public  PreparedStatement ps;
   public  ResultSet rs;
   public  ResultSet rs1;
   DefaultTableModel dm;
}
