/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentExamReport.java
 *
 * Created on Dec 20, 2009, 12:31:01 AM
 */

package com.duc.ExaminationDepartment.ResultSection;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.duc.DatabaseConnection.DatabaseConnection;
import com.duc.ImportSection.MapForIndex;
//import java.util.ArrayList;
//import java.util.Vector;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.engine.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
//import java.util.HashMap;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import java.util.*;
import java.text.*;
import static com.duc.DatabaseConnection.DatabaseConnection.*;


/**
 *
 * @author sourabh
 */
public class StudentExamReportGeneral extends javax.swing.JInternalFrame
{
      ArrayList<Integer> subjectcodes=new ArrayList<Integer>();
     // Connection con=DatabaseConnection.con;
     // MapForIndex mp= new MapForIndex();
      HashMap classmap1= mp.getClassIndexFromName();
      HashMap sectiomap1=mp.getSectionIndexFromName();
      HashMap sessionmap1=mp.getSessionIndexFromName();
      int sessionValue=0;
    /** Creates new form StudentExamReport */
    public StudentExamReportGeneral()
    {
        initComponents();
        addClass();
        addSection();
        addRollNo();
        addSession();
        fromSession();
        dm = (DefaultTableModel)jXTable1.getModel();
        dm.setRowCount(1);

        dm1=(DefaultTableModel)jXTable2.getModel();
        dm1.setRowCount(0);
        
        setMaxMarks();
    }

        public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");
           rs = ps.executeQuery();
           while(rs.next())
            {
              if(rs.getInt(3)==1)
              sessionValue=rs.getInt(2);
            }
         }
          catch(Exception e)
          {
             e.printStackTrace();
          }
    }


    public void setMaxMarks()
    {
        try
       {
         ps=con.prepareStatement("Select exam_max_marks from examsetup order by examid");
         rs=ps.executeQuery();
         for(int i=1; i<=6;i++)
         {
         rs.next();
         dm.setValueAt(rs.getInt(1), 0, i);
         }
       }
        catch(Exception e)
        {
         e.printStackTrace();
        }
    }

    public void addClass()
{
        try
        {
        ps = con.prepareStatement("select * from classsetup");
        rs = ps.executeQuery();
        while (rs.next())
        cmbClass.addItem(rs.getString(1));
       }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
}

   public void addSection()
 {
     try
        {
        ps = con.prepareStatement("select sectiontitle from sectionsetuplist");
        rs = ps.executeQuery();
        while (rs.next())
        cmbSection.addItem(rs.getString(1));
        }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
 }

   public void addRollNo()
 {
     try
        {
        ps = con.prepareStatement("select distinct roll from studententry order by roll");
        rs = ps.executeQuery();
        while (rs.next())
        cmbRoll.addItem(String.valueOf(rs.getInt(1)));
        }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
 }


   public void addSession()
    {
        try
        {
         ps=con.prepareStatement("select sessiontitle from sessionsetup order by sessionid desc");
         rs=ps.executeQuery();
         while(rs.next())
         cmbSession.addItem(rs.getString(1));
        }
        catch(Exception e)
        {
         System.err.println("Error "+e);
        }
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtAdmission = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jLabel2 = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cmbSection = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbRoll = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbSession = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jXTable2 = new org.jdesktop.swingx.JXTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtFinalPer = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtGrade = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtResult = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        checku2 = new javax.swing.JCheckBox();
        checku3 = new javax.swing.JCheckBox();
        checku4 = new javax.swing.JCheckBox();
        checkt1 = new javax.swing.JCheckBox();
        checkt2 = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Student Wise Result Report / General Pattern");

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTextPane1.setText("                                                                          View Students' Annual Result");
        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setText("Admission No.");

        jButton1.setText("Show Result");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Subjects/Max. Marks", "U1", "U2", "T1", "U3", "U4", "T2", "F1=U1+U2+T1", "F2=U3+U4+T2", "F=F1+F2", "%"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.setColumnControlVisible(true);
        jXTable1.setHorizontalScrollEnabled(true);
        jXTable1.setSortable(false);
        jScrollPane2.setViewportView(jXTable1);

        jLabel2.setText("Class");

        cmbClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClassItemStateChanged(evt);
            }
        });

        jLabel3.setText("Section");

        cmbSection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSectionItemStateChanged(evt);
            }
        });

        jLabel4.setText("Roll No.");

        cmbRoll.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbRoll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbRollItemStateChanged(evt);
            }
        });

        jLabel5.setText("Session");

        cmbSession.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));

        jXTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Subject Name", "Final % in Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable2.setSortable(false);
        jScrollPane3.setViewportView(jXTable2);

        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("Supplementary Subjects");

        jLabel7.setText("Final %");

        jLabel8.setText("Final Grade");

        jLabel9.setText("Result:");

        jButton2.setText("Print Report Card");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel10.setText("Exclude This Exam");

        checku2.setText("U2");
        checku2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checku2ItemStateChanged(evt);
            }
        });

        checku3.setText("U3");
        checku3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checku3ItemStateChanged(evt);
            }
        });

        checku4.setText("U4");
        checku4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checku4ItemStateChanged(evt);
            }
        });

        checkt1.setText("T1");
        checkt1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkt1ItemStateChanged(evt);
            }
        });

        checkt2.setText("T2");
        checkt2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkt2ItemStateChanged(evt);
            }
        });
        checkt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkt2ActionPerformed(evt);
            }
        });

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(21, 21, 21))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(checku2)
                        .addGap(18, 18, 18)
                        .addComponent(checkt1))
                    .addComponent(txtAdmission, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                    .addComponent(cmbClass, javax.swing.GroupLayout.Alignment.TRAILING, 0, 111, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSession, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checku3))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbRoll, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(checku4)
                                .addGap(18, 18, 18)
                                .addComponent(checkt2)))))
                .addGap(247, 247, 247))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtResult, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                    .addComponent(txtFinalPer)
                                    .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButton2))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cmbSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbRoll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(checku2)
                    .addComponent(checku4)
                    .addComponent(checkt1)
                    .addComponent(checku3)
                    .addComponent(checkt2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtFinalPer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 928, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dm1.setRowCount(0);
        setMaxMarks();
        boolean c=checkForSaving();
        
        if(c==true)
      {
        loadBasicData();
        boolean b=checkForResult();
        if(b==true)
       {
          loadResultData();          
          loadRowSum();
          setLastTotalRow();
          checkExamNotIncluded();
          if(checku2.isSelected() || checkt1.isSelected() || checku3.isSelected() || checku4.isSelected() || checkt2.isSelected() )
          {
           int column=0;
           txtFinalPer.setText("");
           txtGrade.setText("");
           txtResult.setText("");
           column=9;
           setColumn(column);
           column=10;
           setColumn(column);
           return;
          }
          setGrade();
          setResult();
        }
     }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void checkExamNotIncluded()
    {
      int column=0;

      if(checku2.isSelected())
      {
      column=2;
      setColumn(column);
      }

      if(checku3.isSelected())
      {
       column=4;
       setColumn(column);
      }

      if(checku4.isSelected())
      {
       column=5;
       setColumn(column);
      }

      if(checkt1.isSelected())
      {
        column=3;
        setColumn(column);
      }

      if(checkt2.isSelected())
      {
        column=6;
        setColumn(column);
      }

      if(checku2.isSelected() || checkt1.isSelected())
      {
       column=7;
       setColumn(column);
      }

      if(checku3.isSelected() ||  checku4.isSelected() || checkt2.isSelected())
      {
       column=8;
       setColumn(column);
      }     
   }

    public void setColumn(int column)
    {
        for(int i=0; i<dm.getRowCount();i++)
        {
        dm.setValueAt("-", i, column);
        }
    }

      public boolean checkForSaving()
    {
       if(cmbClass.getSelectedIndex()<=0)
       {
       JOptionPane.showMessageDialog(null, "Select Class First", "Error Message", JOptionPane.ERROR_MESSAGE);
       return false;
       }

       if(cmbSection.getSelectedIndex()<=0)
       {
       JOptionPane.showMessageDialog(null, "Select Section First", "Error Message", JOptionPane.ERROR_MESSAGE);
       return false;
       }

       if(cmbRoll.getSelectedIndex()<=0)
       {
       JOptionPane.showMessageDialog(null, "Select Roll No. First", "Error Message", JOptionPane.ERROR_MESSAGE);
       return false;
       }
       
       return true;
    }

    public void setResult()
    {
       try
       {
        ps=con.prepareStatement(" select min_pass_per,max_supplementary from examcriteria");
        rs=ps.executeQuery();
        rs.next();
        int min_pass_per=rs.getInt(1);
        int max_supp=rs.getInt(2);
        
        if(dm1.getRowCount()>max_supp)
        {
        txtResult.setText("FAILED");
        return;
        }
        else if(dm1.getRowCount()<=max_supp && dm1.getRowCount()>0)
        {
        txtResult.setText("SUPPLEMENTARY");
        return;
        }
        else if(Double.parseDouble(txtFinalPer.getText())<min_pass_per)
        {
          txtResult.setText("FAILED");
          return;
        }
        else
        {
          txtResult.setText("PASSED");
          return;
        }
     }
       catch(Exception e)
       {
        e.printStackTrace();
       }
    }
    
    public void setGrade()
    {
         String grade="";
         
        Double num=Double.parseDouble(txtFinalPer.getText());                   
        int tempper=num.intValue();

        Double middle_value=Double.parseDouble(String.valueOf(tempper).concat(".50"));
        Double actual_per=Double.parseDouble(txtFinalPer.getText());
        int trim_per=0;

        if(actual_per>middle_value)
        trim_per=tempper+1;
        else
        trim_per=tempper;
        
        try
        {
        ps=con.prepareStatement("select lowerlimit,upperlimit, grade from examgrades order by id asc");
        rs=ps.executeQuery();
       
        if(!rs.next())
        {
         JOptionPane.showMessageDialog(null,"Setup Exam Grades First", "Error Message", JOptionPane.ERROR_MESSAGE);
         return;
        }
         rs.first();
         rs.previous();
         
         while(rs.next())
         {
           System.out.println("Searching grade......");
           if(trim_per<=rs.getInt(2) && trim_per>=rs.getInt(1))
           {
           grade=rs.getString(3);
           }
         }
         txtGrade.setText(grade);
        }
        catch(Exception e)
        {
         e.printStackTrace();
         System.out.println("Error is "+e);
        } 
    }

    public void setLastTotalRow()
    {
     Vector v=new Vector();
     DecimalFormat format1=new DecimalFormat("###.##");
     double finalper=0.0;
     int totalmarks=0;
     v.add("Achieved/Total");v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);
     dm.addRow(v);
     
     int total_subjects=dm.getRowCount()-2;
     int lastrowcount=dm.getRowCount()-1;

     for(int column=1;column<=9;column++)
     {
         totalmarks=0;
         for(int row=1;row<lastrowcount;row++)
         {
              if(!dm.getValueAt(row,column).toString().equals("Ab."))
              totalmarks+=Integer.parseInt(dm.getValueAt(row, column).toString());
         }
         dm.setValueAt(totalmarks, lastrowcount, column);
     }
     finalper=(Double.parseDouble(dm.getValueAt(lastrowcount, 9).toString().concat(".00"))/(total_subjects*Integer.parseInt(dm.getValueAt(0,9).toString())))*100;
     dm.setValueAt(format1.format(finalper), lastrowcount, 10);

     for(int x=1;x<=9;x++)
     {
       dm.setValueAt(String.valueOf(dm.getValueAt(lastrowcount, x)+"/"+String.valueOf(total_subjects*Integer.parseInt(dm.getValueAt(0, x).toString()))), lastrowcount, x);
     }
     txtFinalPer.setText(dm.getValueAt(lastrowcount,10).toString());
    }

    public void loadRowSum()
    {
      int t1=0,t2=0,u1=0,u2=0,u3=0,u4=0,f1=0,f2=0,f=0;
      DecimalFormat format1=new DecimalFormat("###.##");
      Double per=0.0;
      try
      {
       ps=con.prepareStatement("select min_pass_per from examcriteria ");
       rs=ps.executeQuery();
       if(rs.next())
       {
       min_pass_per=rs.getInt(1);
       }
       else
       {
       JOptionPane.showMessageDialog(null, "Min. Passing Percentage is not set.", "Error Message", JOptionPane.ERROR_MESSAGE);
       dm.setRowCount(1);
       return;
       }

       for(int row=0; row<dm.getRowCount();row++)
       {
         t1=0;t2=0;u1=0;u2=0;u3=0;u4=0;f1=0;f2=0;f=0;per=0.0;

         if(!dm.getValueAt(row,1).toString().equals("Ab."))
         u1=Integer.parseInt(dm.getValueAt(row, 1).toString());

         if(!dm.getValueAt(row,2).toString().equals("Ab."))
         u2=Integer.parseInt(dm.getValueAt(row, 2).toString());

         if(!dm.getValueAt(row,3).toString().equals("Ab."))
         t1=Integer.parseInt(dm.getValueAt(row, 3).toString());

         if(!dm.getValueAt(row,4).toString().equals("Ab."))
         u3=Integer.parseInt(dm.getValueAt(row, 4).toString());

         if(!dm.getValueAt(row,5).toString().equals("Ab."))
         u4=Integer.parseInt(dm.getValueAt(row, 5).toString());

         if(!dm.getValueAt(row,6).toString().equals("Ab."))
         t2=Integer.parseInt(dm.getValueAt(row, 6).toString());

         f1=u1+u2+t1;
         f2=u3+u4+t2;
         f=f1+f2;
         
         dm.setValueAt(f1, row, 7);
         dm.setValueAt(f2, row, 8);
         dm.setValueAt(f1+f2,row, 9);
         if(Integer.parseInt(dm.getValueAt(0,9).toString())!=0)
         per=(Double.parseDouble(String.valueOf(f).concat(".00"))/Integer.parseInt(dm.getValueAt(0,9).toString()))*100;
         dm.setValueAt(format1.format(per),row, 10);
         if(per<min_pass_per)
         {
          Vector v=new Vector();
          v.add(dm.getValueAt(row, 0));
          v.add(dm.getValueAt(row, 10));
          dm1.addRow(v);
         }
       }
      }
      catch(Exception e)
      {
      System.err.println("Error in setting row sums "+ e);
       e.printStackTrace();
      }
    }
    
    public boolean checkForResult()
    {
    boolean b=false;
    try
    {
     ps=con.prepareStatement("select count(*) from examtemplate where class=? and section=? and sessionid=?");
     ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
     ps.setInt(2,Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
     ps.setInt(3,sessionValue);

     rs=ps.executeQuery();
     if(rs.next())
     {
     int count=rs.getInt(1);
     System.out.println("total result rows  "+count);
     int subjectcount=dm.getRowCount()-1;
     System.out.println("total subjects  "+subjectcount);
     int no_of_exams=6;
     if(count==subjectcount*no_of_exams)
     {
       System.out.println("Found all data");
       b=true;
     }
     else
      {
      JOptionPane.showMessageDialog(null, "Marks are not entered for all exams and all subjects in this class", "Error Message", JOptionPane.ERROR_MESSAGE);
     }
    }
    }
    catch(Exception e)
    {
     e.printStackTrace();
    }
     return b;
    }

    public void loadResultData()
    {
      try
    {
      int exam_status=1;
      ps=con.prepareStatement("select examstatus,marks,subject,examname from `examtemplate`,`studentmarksentry` where id=examtemplateid and studentid=? and sessionid=? order by subject,examname");
      ps.setString(1,txtAdmission.getText());
      ps.setInt(2,sessionValue);
      rs=ps.executeQuery();
      for(int row=1;row<dm.getRowCount();row++)
      {
        for(int column=1; column<7;column++)
       {
         rs.next();
         exam_status=rs.getInt(1);
         if(exam_status==1)
         {
         dm.setValueAt(rs.getInt(2), row, column);
         }
         else
         {
         dm.setValueAt("Ab.", row, column);
         }
       }
     }
    }
      catch(Exception e)
      {
         e.printStackTrace();
      }
    }

    private void cmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClassItemStateChanged
        // TODO add your handling code here:
        setAdmissionNumber();
    }//GEN-LAST:event_cmbClassItemStateChanged

    private void cmbSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSectionItemStateChanged
        // TODO add your handling code here:
        setAdmissionNumber();
    }//GEN-LAST:event_cmbSectionItemStateChanged

    private void cmbRollItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRollItemStateChanged
        // TODO add your handling code here:
        setAdmissionNumber();
    }//GEN-LAST:event_cmbRollItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        printReportCard();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void checkt1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkt1ItemStateChanged
        // TODO add your handling code here:
        if(checkt1.isSelected())
        {
         checku4.setSelected(true);
         checkt2.setSelected(true);
         checku3.setSelected(true);         
        }
    }//GEN-LAST:event_checkt1ItemStateChanged

    private void checku3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checku3ItemStateChanged
        // TODO add your handling code here:
        if(checku3.isSelected())
        {
        checku4.setSelected(true);
        checkt2.setSelected(true);
        }
    }//GEN-LAST:event_checku3ItemStateChanged

    private void checku4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checku4ItemStateChanged
        // TODO add your handling code here:
        if(checku4.isSelected())
        {         
         checkt2.setSelected(true);
        }
    }//GEN-LAST:event_checku4ItemStateChanged

    private void checkt2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkt2ItemStateChanged
        // TODO add your handling code here:
        if(checkt2.isSelected())
        {
            
        }
    }//GEN-LAST:event_checkt2ItemStateChanged

    private void checkt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkt2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkt2ActionPerformed

    private void checku2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checku2ItemStateChanged
        // TODO add your handling code here:
         if(checku2.isSelected())
        {
         checkt2.setSelected(true);
         checkt1.setSelected(true);
         checku3.setSelected(true);
         checku4.setSelected(true);
        }
    }//GEN-LAST:event_checku2ItemStateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        super.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    public void printReportCard()
    {
        try
        {
          ps=con.prepareStatement("select institutename, instituteaddress from instituteregistration" );
          rs = ps.executeQuery();
          rs.next();
          HashMap map = new HashMap();
          map.put("schoolname",rs.getString(1));
          map.put("schooladdress",rs.getString(2));
          map.put("class",cmbClass.getSelectedItem().toString());
          map.put("section",cmbSection.getSelectedItem().toString());
          map.put("roll", cmbRoll.getSelectedItem().toString());
          map.put("admission",txtAdmission.getText());
          map.put("session", cmbSession.getSelectedItem().toString());
          map.put("percentage", txtFinalPer.getText());
          map.put("grade", txtGrade.getText());
          map.put("result", txtResult.getText());

          ps=con.prepareStatement("select name,fathername,mothername from studententry where id=?");
          ps.setString(1,txtAdmission.getText());
          rs=ps.executeQuery();
          rs.next();
          map.put("name",rs.getString(1));
          map.put("fname",rs.getString(2));
          map.put("mname",rs.getString(3));

           BufferedImage bimg = null;
           bimg = ImageIO.read(new File("images/logo.jpg"));
           map.put("logo",bimg);
           
           Vector collection=new Vector();
           dm.setValueAt("Max. Marks", 0,0);
           for(int i=0;i<dm.getRowCount();i++)
           {
            collection.add(new ExamReportTemplate(dm.getValueAt(i, 0).toString(), dm.getValueAt(i,1).toString(),dm.getValueAt(i, 2).toString(), dm.getValueAt(i, 3).toString(), dm.getValueAt(i, 4).toString(), dm.getValueAt(i, 5).toString(), dm.getValueAt(i, 6).toString(), dm.getValueAt(i, 7).toString(), dm.getValueAt(i, 8).toString(), dm.getValueAt(i, 9).toString(),dm.getValueAt(i, 10).toString()));
           }

                JRBeanCollectionDataSource src = new JRBeanCollectionDataSource(collection);
                JasperReport js = JasperCompileManager.compileReport("reports/result/report_card_general.jrxml");
                JasperPrint pr = JasperFillManager.fillReport(js,map,src);
                JasperViewer jv = new JasperViewer(pr, false);
                jv.setTitle("Student Progress Report Card ");
                jv.setVisible(true);
        }
        catch(Exception e)
        {
            System.out.println("Error is ........."+e);
           // e.printStackTrace();
        }
    }

    public void setAdmissionNumber()
    {
     if( cmbClass.getSelectedIndex()<=0 )
     return ;

     if(cmbSection.getSelectedIndex()<=0)
     return;

     if(cmbRoll.getSelectedIndex()<=0)
     return;

     try
     {
      ps=con.prepareStatement("select id from studententry where class=? and section=? and roll=?");
      ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
      ps.setInt(2,Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
      ps.setInt(3, Integer.parseInt(cmbRoll.getSelectedItem().toString()));
      rs=ps.executeQuery();
      if(rs.next())
      {
      txtAdmission.setText(rs.getString(1));
      }
     }
     catch(Exception e)
     {
       e.printStackTrace();
     }
    }

 public void loadBasicData()
 {
  try
 {
 ps=con.prepareStatement("select subjectid,subjectlist.subjecttitle from subjectsetup,subjectlist where applicable_for_result=1 and subjectlist.subjectid=subjectsetup.subjecttitle and classtitle=? order by subjectid");
 ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
 rs=ps.executeQuery();
 int i=0;
 while(rs.next())
 i++;

 rs.first();
 rs.previous();
 dm.setRowCount(i+1);

 subjectcodes.clear();

 i=1;
 while(rs.next())
 {
 dm.setValueAt(rs.getString(2), i, 0) ;
 subjectcodes.add(rs.getInt(1));
 dm.setValueAt(0, i, 1);
 dm.setValueAt(0, i, 2);
 dm.setValueAt(0, i, 3);
 dm.setValueAt(0, i, 4);
 dm.setValueAt(0, i, 5);
 dm.setValueAt(0, i, 6);
 dm.setValueAt(0, i, 7);
 dm.setValueAt(0, i, 8);
 dm.setValueAt(0, i, 9);
 i++;  
 }
 }
 catch(Exception e)
 {
 e.printStackTrace();
 }
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkt1;
    private javax.swing.JCheckBox checkt2;
    private javax.swing.JCheckBox checku2;
    private javax.swing.JCheckBox checku3;
    private javax.swing.JCheckBox checku4;
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JComboBox cmbRoll;
    private javax.swing.JComboBox cmbSection;
    private javax.swing.JComboBox cmbSession;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.swingx.JXTable jXTable2;
    private javax.swing.JTextField txtAdmission;
    private javax.swing.JTextField txtFinalPer;
    private javax.swing.JTextField txtGrade;
    private javax.swing.JTextField txtResult;
    // End of variables declaration//GEN-END:variables
public  PreparedStatement ps,p;
public  ResultSet rs;
DefaultTableModel dm, dm1;
int min_pass_per=0;
}
