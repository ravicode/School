/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UpdateExamMarks.java
 *
 * Created on Apr 18, 2009, 8:49:44 PM
 */

package com.duc.ExaminationDepartment.ResultSection;
import java.sql.*;

import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import static com.duc.DatabaseConnection.DatabaseConnection.*;


/**
 *
 * @author sourabh
 */
public class UpdateExamMarks extends javax.swing.JInternalFrame {
      //Connection con=DatabaseConnection.con;
     // MapForIndex mp= new MapForIndex();
      HashMap classmap1= mp.getClassIndexFromName();
      HashMap sectiomap1=mp.getSectionIndexFromName();
      HashMap subjectmap1=mp.getSubjectIndexFromName();
      HashMap sessionmap1=mp.getSessionIndexFromName();
      HashMap exams=mp.getExamIndexFromName();
      int globalrow=0,globalcol=0;
      int sessionValue=0;
      ArrayList<String> admnumbers=new ArrayList<String>();
    /** Creates new form UpdateExamMarks */
    public UpdateExamMarks()
    {
     initComponents();
     addClass();
    // addSection();
     fromSession();
     addSession();
     dm = (DefaultTableModel)jXTable1.getModel();
     dm.setRowCount(0);
     loadExams();
    }

           public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");
           rs = ps.executeQuery();
           while(rs.next())
            {
              if(rs.getInt(3)==1)
              sessionValue=rs.getInt(2);
            }
         }
          catch(Exception e)
          {
             e.printStackTrace();
          }
    }



   public void loadExams()
   {
     try
     {
       ps=con.prepareStatement("select examname from examsetup order by examid ");
       rs=ps.executeQuery();
       
       while(rs.next())
       {
        cmbExam.addItem(rs.getString(1));
       }
     }
     catch(Exception e)
     {
       System.out.println(e);
     }
   }

public void addSession()
    {
        try
        {
         ps=con.prepareStatement("select sessiontitle from sessionsetup order by sessionid desc");
         rs=ps.executeQuery();
         while(rs.next())
         cmbSession.addItem(rs.getString(1));
        }
        catch(Exception e)
        {
         System.err.println("Error "+e);
        }
    }

public void addClass()
{ 
        try
        {
        ps = con.prepareStatement("select * from classsetup");
        rs = ps.executeQuery();
        while (rs.next())
        cmbClass.addItem(rs.getString(1));
       }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
}

  public void addSection()
 {
     try
      {
        ps = con.prepareStatement("SELECT `sectionsetuplist`.`sectiontitle` from `sectionsetuplist`,`sectionsetup` where sectionid=`sectionsetup`.`sectiontitle` and classtitle=?");
        ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
        rs = ps.executeQuery();
        cmbSection.removeAllItems();
        cmbSection.addItem("Select");
        while (rs.next())
         {
          cmbSection.addItem(rs.getString(1));
         }
       }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
 }
 
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbSection = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cmbExam = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbSubject = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        maxmarkLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jButton1 = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbSession = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jMenuItem1.setText("Mark as Absent");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setClosable(true);
        setIconifiable(true);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTextPane1.setText("                                                                      Update Exam Marks of Students");
        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setText("Class");

        cmbClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClassItemStateChanged(evt);
            }
        });

        jLabel2.setText("Section");

        cmbSection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSectionItemStateChanged(evt);
            }
        });

        jLabel3.setText("Exam ");

        cmbExam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbExam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbExamItemStateChanged(evt);
            }
        });

        jLabel4.setText("Subject");

        cmbSubject.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbSubject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSubjectItemStateChanged(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setForeground(new java.awt.Color(255, 0, 51));
        jLabel5.setText("Max. Marks Configured for this Exam :");

        maxmarkLabel.setText("0");

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Admission No.", "Stu. Name", "Roll No.", "Marks Obtained"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.setComponentPopupMenu(jPopupMenu1);
        jXTable1.setSortable(false);
        jXTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jXTable1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jXTable1FocusLost(evt);
            }
        });
        jXTable1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jXTable1InputMethodTextChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jXTable1);

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        messageLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        messageLabel.setForeground(new java.awt.Color(51, 51, 255));
        messageLabel.setText("Note: Press Enter key after feeding marks in each row to ensure the correct entry.");

        jLabel6.setText("Session");

        cmbSession.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Print ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbSubject, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbExam, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSection, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSession, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maxmarkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(183, 183, 183))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cmbSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbExam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(maxmarkLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClassItemStateChanged
        // TODO add your handling code here:
        if(cmbClass.getSelectedIndex()>0)
        {
         loadSubjects();
         addSection();
        }
        boolean b=checkForSaving();
        if(b==true)
        loadData();
    }//GEN-LAST:event_cmbClassItemStateChanged

    private void cmbExamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbExamItemStateChanged
        // TODO add your handling code here:
        if(cmbExam.getSelectedIndex()>0)
        loadExamMark();
        boolean b=checkForSaving();
        if(b==true)
        loadData();
    }//GEN-LAST:event_cmbExamItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean b=checkForSaving();
        if(b==true)
        saveExamMarks();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        int j=jXTable1.getSelectedRow();
        dm.setValueAt("Ab.", j, 3);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        super.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmbSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSectionItemStateChanged
        // TODO add your handling code here:
        boolean b=checkForSaving();
        if(b==true)
        loadData();
    }//GEN-LAST:event_cmbSectionItemStateChanged

    private void cmbSubjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSubjectItemStateChanged
        // TODO add your handling code here:
        boolean b=checkForSaving();
        if(b==true)
        loadData();
    }//GEN-LAST:event_cmbSubjectItemStateChanged

    private void jXTable1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jXTable1InputMethodTextChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jXTable1InputMethodTextChanged

    private void jXTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jXTable1FocusLost
        // TODO add your handling code here:
        if(globalcol>=0 && globalrow>=0)
      {
        if(dm.getValueAt(globalrow, globalcol).toString().equals("Ab."))
        {
        System.out.println("Matched Absent");
        return;
        }
        try
        {
         int i=Integer.parseInt(dm.getValueAt(globalrow, globalcol).toString());
         if(i>Integer.parseInt(maxmarkLabel.getText()))
         {
         JOptionPane.showMessageDialog(null, "Value can not be greater than max. marks", "Error", JOptionPane.ERROR_MESSAGE);
         dm.setValueAt(0, globalrow,globalcol);
         System.out.println("graeter than max. marks");
         }
         if(i<0)
         {
         JOptionPane.showMessageDialog(null, "Marks can not be negative", "Error", JOptionPane.ERROR_MESSAGE);
         dm.setValueAt(0, globalrow,globalcol);
         System.out.println("negative value");
         }
        }
        catch(Exception e)
        {
         System.out.println("Not an Integer");
         dm.setValueAt(0, globalrow,globalcol);   
        }
      }
    }//GEN-LAST:event_jXTable1FocusLost

    private void jXTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jXTable1FocusGained
        // TODO add your handling code here:
        globalrow=jXTable1.getSelectedRow();
        globalcol=jXTable1.getSelectedColumn();
    }//GEN-LAST:event_jXTable1FocusGained

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try
        {
          jXTable1.print();
        }
        catch(Exception e)
        {
          System.out.println(e);
          e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void loadData()
   {
     try
     {
     ps=con.prepareStatement("select id from examtemplate where class=? and section=? and examname=? and subject=? and sessionid=?");
     ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
     ps.setInt(2,Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
     ps.setInt(3,Integer.parseInt(String.valueOf(exams.get(cmbExam.getSelectedItem().toString()))));
     ps.setInt(4,Integer.parseInt(String.valueOf(subjectmap1.get(cmbSubject.getSelectedItem().toString()))));
     ps.setInt(5,sessionValue);
     rs=ps.executeQuery();

     
     
     if(!rs.next())
     {
       examid=-1;
       System.out.println("loading blank data");
       loadBlankData();
     }     
     else
     {
         examid=rs.getInt(1);
         loadBlankData();
         loadSavedData();
     }
     }
      catch(Exception e)
      {
       e.printStackTrace();
      }
      //System.out.println(ps);
    }

    public void loadBlankData()
    {
       int i=0;
       try
       {
        ps=con.prepareStatement("select id,name,roll from studententry where class=? and section=? and status=1 order by roll");
        ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
        ps.setInt(2,Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
        rs=ps.executeQuery();
        while(rs.next())
        i++;

        rs.first();
        rs.previous();
        dm.setRowCount(i);
        admnumbers.clear();
        i=0;
        while(rs.next())
        {
         dm.setValueAt(rs.getString(1), i, 0);
         dm.setValueAt(rs.getString(2), i, 1);
         dm.setValueAt(rs.getInt(3), i, 2);
         dm.setValueAt(0, i, 3);
         admnumbers.add(rs.getString(1));
         i++;
        }        
       }
       catch(Exception e)
       {
         e.printStackTrace();
       }
    }

    public void loadSavedData()
    {
       int i=0;
       try
       {
        ps=con.prepareStatement("select studentid,examstatus,marks from studentmarksentry,studententry where id=studentid and examtemplateid=? ");
        ps.setInt(1, examid);
        rs=ps.executeQuery();
        
        i=0;
        while(rs.next())
        {
         i=admnumbers.indexOf(rs.getString(1));         
         if(rs.getInt(2)==1)
         dm.setValueAt(rs.getInt(3), i, 3);
         else
         dm.setValueAt("Ab.", i, 3);      
       
        }
       }
       catch(Exception e)
       {
        e.printStackTrace();
       }
    }
    
    public void saveExamMarks()
    {
     try
   {
      if(examid>0)
     {
       ps=con.prepareStatement("delete from studentmarksentry where examtemplateid=?");
       ps.setInt(1,examid);
       ps.executeUpdate();
     }
      else
  {
     ps=con.prepareStatement("insert into examtemplate(class,section,examname,subject,sessionid,date) values(?,?,?,?,?,(select(current_date())))");
     ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
     ps.setInt(2,Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
     ps.setInt(3,Integer.parseInt(String.valueOf(exams.get(cmbExam.getSelectedItem().toString()))));
     ps.setInt(4,Integer.parseInt(String.valueOf(subjectmap1.get(cmbSubject.getSelectedItem().toString()))));
     ps.setInt(5,sessionValue);
     ps.executeUpdate();

     ps=con.prepareStatement("select Max(id) from examtemplate");
     rs=ps.executeQuery();
     rs.next();
     examid=rs.getInt(1);
   }
      for(int i=0;i<dm.getRowCount();i++)
   {
      ps=con.prepareStatement("insert into studentmarksentry(examtemplateid,studentid,examstatus,marks) values(?,?,?,?)");
      ps.setInt(1, examid);
      ps.setString(2, dm.getValueAt(i, 0).toString());
      if(String.valueOf(dm.getValueAt(i, 3)).equals("Ab."))
      {
       ps.setInt(3, 0);
       ps.setInt(4, 0);
      }
      else
      {
       ps.setInt(3, 1);
       ps.setInt(4, Integer.parseInt(dm.getValueAt(i,3).toString()));
      }
      ps.executeUpdate();
   }
      JOptionPane.showMessageDialog(null, "Saved Successfully", "Message", JOptionPane.INFORMATION_MESSAGE);
    }
     catch(Exception e)
     {
      e.printStackTrace();
     }
    }
    
    public boolean checkForSaving()
    {
       if(cmbClass.getSelectedIndex()<=0)
       {
       //JOptionPane.showMessageDialog(null, "Select Class First", "Error Message", JOptionPane.ERROR_MESSAGE);
       dm.setRowCount(0);
       return false;
       }
       
       if(cmbSection.getSelectedIndex()<=0)
       {
      // JOptionPane.showMessageDialog(null, "Select Section First", "Error Message", JOptionPane.ERROR_MESSAGE);
       dm.setRowCount(0);
       return false;
       }
       
       if(cmbExam.getSelectedIndex()<=0)
       {
       //JOptionPane.showMessageDialog(null, "Select Exam First", "Error Message", JOptionPane.ERROR_MESSAGE);
       dm.setRowCount(0);
       return false;
       }

       if(cmbSubject.getSelectedIndex()<=0)
       {
     //  JOptionPane.showMessageDialog(null, "Select Subject First", "Error Message", JOptionPane.ERROR_MESSAGE);
       dm.setRowCount(0);
       return false;
       }
       
       return true;
    }
    
    public void loadExamMark()
    {
       try
      {
         ps=con.prepareStatement("select exam_max_marks from examsetup where examname=?");
         ps.setString(1, cmbExam.getSelectedItem().toString());
         rs=ps.executeQuery();
         rs.next();
         maxmarkLabel.setText(String.valueOf(rs.getInt(1)));
      }
        catch(Exception e)
        {
         e.printStackTrace();
        }
    }
    
    public void loadSubjects()
    {
        try
        {
        ps=con.prepareStatement("select `subjectlist`.`subjecttitle` from `subjectsetup`,`subjectlist` where classtitle=? and `subjectlist`.`subjectid`=`subjectsetup`.`subjecttitle`and applicable_for_result=1");
        ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
        rs=ps.executeQuery();

        if(!rs.next())
        {
            messageLabel.setText("No Subject is Configured for this class.");
            return;
        }
        else
        messageLabel.setText("");

        rs.previous();
        cmbSubject.removeAllItems();
        cmbSubject.addItem("Select");

         while(rs.next())
         {
         cmbSubject.addItem(rs.getString(1));
         }
        }
        catch(Exception e)
        {
         e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JComboBox cmbExam;
    private javax.swing.JComboBox cmbSection;
    private javax.swing.JComboBox cmbSession;
    private javax.swing.JComboBox cmbSubject;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private org.jdesktop.swingx.JXTable jXTable1;
    private javax.swing.JLabel maxmarkLabel;
    private javax.swing.JLabel messageLabel;
    // End of variables declaration//GEN-END:variables
public  PreparedStatement ps,p;
public  ResultSet rs;
int examid=-1;
DefaultTableModel dm;

}
