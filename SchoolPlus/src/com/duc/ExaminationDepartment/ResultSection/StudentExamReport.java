/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentExamReport.java
 *
 * Created on Dec 20, 2009, 12:31:01 AM
 */

package com.duc.ExaminationDepartment.ResultSection;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
//import java.util.HashMap;
//import java.util.ArrayList;
//import java.util.Vector;
//import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import net.sf.jasperreports.engine.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
//import java.util.HashMap;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import java.util.*;
import java.text.*;
import static com.duc.DatabaseConnection.DatabaseConnection.*;



/**
 *
 * @author sourabh
 */
public class StudentExamReport extends javax.swing.JInternalFrame
{
      ArrayList<Integer> subjectcodes=new ArrayList<Integer>();
     // Connection con=DatabaseConnection.con;
     // MapForIndex mp= new MapForIndex();
      HashMap maxMarks=new HashMap();
      HashMap classmap1= mp.getClassIndexFromName();
      HashMap sectiomap1=mp.getSectionIndexFromName();
      HashMap sessionmap1=mp.getSessionIndexFromName();
      ArrayList<String> grades= new ArrayList<String>();
      int sessionValue=0;

    /** Creates new form StudentExamReport */
    public StudentExamReport()
    {
        initComponents();
        addClass();
        addSection();
        addRollNo();
        addSession();
        fromSession();
        dm = (DefaultTableModel)jXTable1.getModel();
        dm.setRowCount(1);

        dm1=(DefaultTableModel)jXTable2.getModel();
        dm1.setRowCount(0);

        loadMaxMarks();
    }

     public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");
           rs = ps.executeQuery();
           while(rs.next())
            {
              if(rs.getInt(3)==1)
              sessionValue=rs.getInt(2);
            }
         }
          catch(Exception e)
          {
             e.printStackTrace();
          }
    }


    public void loadMaxMarks()
    {
        try
        {
            ps=con.prepareStatement("select examid,exam_max_marks from examsetup");
            rs=ps.executeQuery();
            while(rs.next())
            {
             maxMarks.put(rs.getInt(1), rs.getInt(2));
            }
        }
        catch(Exception e)
        {
         e.printStackTrace();
        }
    }

   
    public void addClass()
{
        try
        {
        ps = con.prepareStatement("select * from classsetup");
        rs = ps.executeQuery();
        while (rs.next())
        cmbClass.addItem(rs.getString(1));
       }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
}

   public void addSection()
 {
     try
        {
        ps = con.prepareStatement("select sectiontitle from sectionsetuplist");
        rs = ps.executeQuery();
        while (rs.next())
        cmbSection.addItem(rs.getString(1));
        }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
 }

   public void addRollNo()
 {
     try
        {
        ps = con.prepareStatement("select distinct roll from studententry order by roll");
        rs = ps.executeQuery();
        while (rs.next())
        cmbRoll.addItem(String.valueOf(rs.getInt(1)));
        }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
 }


   public void addSession()
    {
        try
        {
         ps=con.prepareStatement("select sessiontitle from sessionsetup order by sessionid desc");
         rs=ps.executeQuery();
         while(rs.next())
         cmbSession.addItem(rs.getString(1));
        }
        catch(Exception e)
        {
         System.err.println("Error "+e);
        }
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtAdmission = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbSession = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbRoll = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cmbSection = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        checkfa2 = new javax.swing.JCheckBox();
        checksa1 = new javax.swing.JCheckBox();
        checkfa3 = new javax.swing.JCheckBox();
        checkfa4 = new javax.swing.JCheckBox();
        checksa2 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jXTable2 = new org.jdesktop.swingx.JXTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Student Wise Result Report / CBSE CCE Pattern");
        setMaximumSize(new java.awt.Dimension(400, 400));

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTextPane1.setText("                                                                          View Students' result ( CBSE CCE Pattern )");
        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jLabel1.setText("Admission No.");

        jLabel5.setText("Session");

        cmbSession.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));

        jLabel4.setText("Roll No.");

        cmbRoll.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbRoll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbRollItemStateChanged(evt);
            }
        });

        jLabel2.setText("Class");

        cmbClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClassItemStateChanged(evt);
            }
        });

        jLabel3.setText("Section");

        cmbSection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSectionItemStateChanged(evt);
            }
        });

        jLabel10.setText("Exclude This Exam");

        checkfa2.setText("FA-2");
        checkfa2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkfa2ItemStateChanged(evt);
            }
        });

        checksa1.setText("SA-1");
        checksa1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checksa1ItemStateChanged(evt);
            }
        });

        checkfa3.setText("FA-3");
        checkfa3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkfa3ItemStateChanged(evt);
            }
        });

        checkfa4.setText("FA-4");
        checkfa4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkfa4ItemStateChanged(evt);
            }
        });

        checksa2.setText("SA-2");
        checksa2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checksa2ItemStateChanged(evt);
            }
        });
        checksa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checksa2ActionPerformed(evt);
            }
        });

        jButton1.setText("Show Result");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "10", "10", "20", "10", "10", "40", "40", "60", "100", "100"}
            },
            new String [] {
                "Subjects/Max. Marks", "FA1 (10%)", "FA2 (10%)", "SA1 (20%)", "FA3 (10%)", "FA4 (10%)", "SA2 (40%)", "T1= (FA1) + (FA2) + (SA1) ", "T2= (FA3) + (FA4) + (SA2) ", "F=T1+T2 (100%)", "%"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.setColumnControlVisible(true);
        jXTable1.setHorizontalScrollEnabled(true);
        jXTable1.setSortable(false);
        jScrollPane2.setViewportView(jXTable1);

        jButton2.setText("Print Marks Based Report Card");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jXTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Subject", "FA1", "FA2", "Total (FA) ", "SA1", "Total (FA+SA)", "FA3", "FA4", "Total (FA)", "SA2", "Total (FA+SA)", "Grand Total (FA)", "Grand Total (SA)", "Overall Grade", "Percentile"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable2.setHorizontalScrollEnabled(true);
        jXTable2.setSortable(false);
        jScrollPane3.setViewportView(jXTable2);

        jButton3.setText("Print Grade Based Report Card ( CCE )");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbClass, 0, 106, Short.MAX_VALUE)
                        .addGap(23, 23, 23)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbSection, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbRoll, 0, 78, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbSession, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(281, 281, 281))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkfa2)
                .addGap(18, 18, 18)
                .addComponent(checksa1)
                .addGap(16, 16, 16)
                .addComponent(checkfa3)
                .addGap(18, 18, 18)
                .addComponent(checkfa4)
                .addGap(14, 14, 14)
                .addComponent(checksa2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(310, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(373, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(582, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(cmbRoll, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cmbSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(checkfa2)
                        .addComponent(checksa1)
                        .addComponent(jButton1)
                        .addComponent(checkfa3)
                        .addComponent(checkfa4)
                        .addComponent(checksa2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel10)))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbRollItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRollItemStateChanged
        // TODO add your handling code here:
        setAdmissionNumber();
}//GEN-LAST:event_cmbRollItemStateChanged

    private void cmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClassItemStateChanged
        // TODO add your handling code here:
        setAdmissionNumber();
}//GEN-LAST:event_cmbClassItemStateChanged

    private void cmbSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSectionItemStateChanged
        // TODO add your handling code here:
        setAdmissionNumber();
}//GEN-LAST:event_cmbSectionItemStateChanged

    private void checkfa2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkfa2ItemStateChanged
        // TODO add your handling code here:
        if(checkfa2.isSelected()) {
            checksa2.setSelected(true);
            checksa1.setSelected(true);
            checkfa3.setSelected(true);
            checkfa4.setSelected(true);
        }
}//GEN-LAST:event_checkfa2ItemStateChanged

    private void checksa1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checksa1ItemStateChanged
        // TODO add your handling code here:
        if(checksa1.isSelected()) {
            checkfa4.setSelected(true);
            checksa2.setSelected(true);
            checkfa3.setSelected(true);
        }
}//GEN-LAST:event_checksa1ItemStateChanged

    private void checkfa3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkfa3ItemStateChanged
        // TODO add your handling code here:
        if(checkfa3.isSelected()) {
            checkfa4.setSelected(true);
            checksa2.setSelected(true);
        }
}//GEN-LAST:event_checkfa3ItemStateChanged

    private void checkfa4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkfa4ItemStateChanged
        // TODO add your handling code here:
        if(checkfa4.isSelected()) {
            checksa2.setSelected(true);
        }
}//GEN-LAST:event_checkfa4ItemStateChanged

    private void checksa2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checksa2ItemStateChanged
        // TODO add your handling code here:
        if(checksa2.isSelected()) {

        }
}//GEN-LAST:event_checksa2ItemStateChanged

    private void checksa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checksa2ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_checksa2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dm1.setRowCount(0);

        boolean c=checkForSaving();

        if(c==true) {
            loadBasicData();
            boolean b=checkForResult();
            if(b==true) {
                loadResultData();
                loadRowSum();
                setLastTotalRow();
                checkExamNotIncluded();
                if(checkfa2.isSelected() || checksa1.isSelected() || checkfa3.isSelected() || checkfa4.isSelected() || checksa2.isSelected() ) {
                    int column=0;
                    column=9;
                    setColumn(column);
                    column=10;
                    setColumn(column);
                }
                int j= setFinalGrades();
                if(j>0) {
                    for(int r=0;r<dm1.getRowCount();r++) {
                        for(int col=j;col<dm1.getColumnCount();col++) {
                            dm1.setValueAt("-", r, col);
                        }
                    }
                }
            }
        }
}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        printReportCard();
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        printGradeBasedReportCaed();
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        super.dispose();
}//GEN-LAST:event_jButton4ActionPerformed

    public void checkExamNotIncluded()
    {
      int column=0;

      if(checkfa2.isSelected())
      {
      column=2;
      setColumn(column);
      }

      if(checkfa3.isSelected())
      {
       column=4;
       setColumn(column);
      }

      if(checkfa4.isSelected())
      {
       column=5;
       setColumn(column);
      }

      if(checksa1.isSelected())
      {
        column=3;
        setColumn(column);
      }

      if(checksa2.isSelected())
      {
        column=6;
        setColumn(column);
      }

      if(checkfa2.isSelected() || checksa1.isSelected())
      {
       column=7;
       setColumn(column);
      }

      if(checkfa3.isSelected() ||  checkfa4.isSelected() || checksa2.isSelected())
      {
       column=8;
       setColumn(column);
      }     
   }

    public void setColumn(int column)
    {
        for(int i=1; i<dm.getRowCount();i++)
        {
        dm.setValueAt("-", i, column);
        }
    }

      public boolean checkForSaving()
    {
       if(cmbClass.getSelectedIndex()<=0)
       {
       JOptionPane.showMessageDialog(null, "Select Class First", "Error Message", JOptionPane.ERROR_MESSAGE);
       return false;
       }

       if(cmbSection.getSelectedIndex()<=0)
       {
       JOptionPane.showMessageDialog(null, "Select Section First", "Error Message", JOptionPane.ERROR_MESSAGE);
       return false;
       }

       if(cmbRoll.getSelectedIndex()<=0)
       {
       JOptionPane.showMessageDialog(null, "Select Roll No. First", "Error Message", JOptionPane.ERROR_MESSAGE);
       return false;
       }
       
       return true;
    }

  
    public int setFinalGrades()
    {
     int j=0;
     boolean value=true;
     
     dm1.setRowCount(0);
     grades.clear();
     double fa1,fa2,fa3,fa4,sa1,sa2,f;
     try
     {
        for (int row=1;row<dm.getRowCount()-1;row++)
    {
        fa1=0; fa2=0; fa3=0 ; fa4=0; sa1=0; sa2=0;f=0;
        grades.clear();
        grades.add(dm.getValueAt(row, 0).toString());

        if(dm.getValueAt(row,1).toString().equals("Ab.") || dm.getValueAt(row,1).toString().equals("-"))
        grades.add(dm.getValueAt(row, 1).toString());
        else
        {
         fa1=Double.parseDouble(dm.getValueAt(row, 1).toString());
         grades.add(FindGrade(fa1*10));
        }

        if(dm.getValueAt(row,2).toString().equals("Ab.") || dm.getValueAt(row,2).toString().equals("-"))
        grades.add(dm.getValueAt(row, 2).toString());
        else
        {
         fa2=Double.parseDouble(dm.getValueAt(row, 2).toString());
         grades.add(FindGrade(fa2*10));
        }

        grades.add(FindGrade((fa1+fa2)*5));

        if(dm.getValueAt(row,3).toString().equals("Ab.") || dm.getValueAt(row,3).toString().equals("-"))
        grades.add(dm.getValueAt(row, 3).toString());
        else
        {
         sa1=Double.parseDouble(dm.getValueAt(row, 3).toString());
         grades.add(FindGrade(sa1*5));
        }

        grades.add(FindGrade((fa1+fa2+sa1)*2.5));

        if(dm.getValueAt(row,4).toString().equals("Ab.") || dm.getValueAt(row,4).toString().equals("-"))
        grades.add(dm.getValueAt(row, 4).toString());
        else
        {
         fa3=Double.parseDouble(dm.getValueAt(row, 4).toString());
         grades.add(FindGrade(fa3*10));
        }

        if(dm.getValueAt(row,5).toString().equals("Ab.") || dm.getValueAt(row,5).toString().equals("-"))
        grades.add(dm.getValueAt(row, 5).toString());
        else
        {
         fa4=Double.parseDouble(dm.getValueAt(row, 5).toString());
         grades.add(FindGrade(fa4*10));
        }

        grades.add(FindGrade((fa3+fa4)*5));

        if(dm.getValueAt(row,6).toString().equals("Ab.") || dm.getValueAt(row,6).toString().equals("-"))
        grades.add(dm.getValueAt(row, 6).toString());
        else
        {
         sa2=Double.parseDouble(dm.getValueAt(row, 6).toString());
         grades.add(FindGrade(sa2*2.5));
        }

        grades.add(FindGrade((fa3+fa4+sa2)*1.66));
        grades.add(FindGrade((fa1+fa2+fa3+fa4)*2.5));
        grades.add(FindGrade((sa1+sa2)*1.66));

        if(dm.getValueAt(row,9).toString().equals("Ab.") || dm.getValueAt(row,9).toString().equals("-"))
        grades.add(dm.getValueAt(row, 9).toString());
        else
        {
         f=Double.parseDouble(dm.getValueAt(row, 9).toString());
         grades.add(FindGrade(f));
        }
       Vector v=new Vector(grades);
       dm1.addRow(v);
    }

  }
     catch(Exception e)
     {
         e.printStackTrace();
     }
     if(checkfa2.isSelected() && value==true)
     {
     value=false;
     j=2;
     return j;
     }

     if(checksa1.isSelected() && value==true)
     {
     value=false;
     j=4;
     return j;
     }

     if(checkfa3.isSelected() && value==true)
     {
     value=false;
     j=6;
     return j;
     }

     if(checkfa4.isSelected() && value==true)
     {
     value=false;
     j=7;
     return j;
     }

     if(checksa2.isSelected() && value==true)
     {
     value=false;
     j=9;
     return j;
     }

     return j;
    }


    public String FindGrade(double marks)
    {
        DecimalFormat format1=new DecimalFormat("###");
        String grade="";        
        int grademarks=0;        
        grademarks=Integer.parseInt(format1.format(marks));
        try
        {
          ps=con.prepareStatement("select grade,lowerlimit,upperlimit from examgrades order by id");
          rs=ps.executeQuery();

          while(rs.next())
          {
            if(grademarks>=rs.getInt(2) && grademarks<=rs.getInt(3))
            {
              grade=rs.getString(1) ;
              return grade;
            }
          }
        }
        catch(Exception e)
        {
         e.printStackTrace();
        }
        return grade;
    }

    public void setLastTotalRow()
    {
     Vector v=new Vector();
     
     double finalper=0;
     double totalmarks=0;
     DecimalFormat myFormatter = new DecimalFormat("###.##");

     v.add("Achieved/Total");v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);v.add(0);
     dm.addRow(v);
     
     int total_subjects=dm.getRowCount()-2;
     int lastrowcount=dm.getRowCount()-1;

     for(int column=1;column<=9;column++)
     {
         totalmarks=0;
         for(int row=1;row<lastrowcount;row++)
         {
              if(!dm.getValueAt(row,column).toString().equals("Ab."))
              totalmarks+=Double.parseDouble(dm.getValueAt(row, column).toString());
         }
         dm.setValueAt(myFormatter.format(totalmarks), lastrowcount, column);
     }
     finalper=(Double.parseDouble(dm.getValueAt(lastrowcount, 9).toString())/(total_subjects*Integer.parseInt(dm.getValueAt(0,9).toString())))*100;
     dm.setValueAt(myFormatter.format(finalper), lastrowcount, 10);

     for(int x=1;x<=9;x++)
     {
       dm.setValueAt(String.valueOf(dm.getValueAt(lastrowcount, x)+"/"+String.valueOf(total_subjects*Integer.parseInt(dm.getValueAt(0, x).toString()))), lastrowcount, x);
     }
     
    }

    public void loadRowSum()
    {
      double t1=0,t2=0,u1=0,u2=0,u3=0,u4=0,f1=0,f2=0,f=0;
      DecimalFormat myFormatter = new DecimalFormat("###.##");

      
      try
      {     
      for(int row=1; row<dm.getRowCount();row++)
         {
         t1=0;t2=0;u1=0;u2=0;u3=0;u4=0;f1=0;f2=0;f=0;

         if(!dm.getValueAt(row,3).toString().equals("Ab."))
         t1=Double.parseDouble(dm.getValueAt(row, 3).toString());

         if(!dm.getValueAt(row,6).toString().equals("Ab."))
         t2=Double.parseDouble(dm.getValueAt(row, 6).toString());

         if(!dm.getValueAt(row,1).toString().equals("Ab."))
         u1=Double.parseDouble(dm.getValueAt(row, 1).toString());

         if(!dm.getValueAt(row,2).toString().equals("Ab."))
         u2=Double.parseDouble(dm.getValueAt(row, 2).toString());

         if(!dm.getValueAt(row,4).toString().equals("Ab."))
         u3=Double.parseDouble(dm.getValueAt(row, 4).toString());

         if(!dm.getValueAt(row,5).toString().equals("Ab."))
         u4=Double.parseDouble(dm.getValueAt(row, 5).toString());

         f1=u1+u2+t1;
         f2=u3+u4+t2;
         f=f1+f2;

         //System.out.println("No Pro. here...............................................");
         dm.setValueAt(myFormatter.format(f1), row, 7);
         dm.setValueAt(myFormatter.format(f2), row, 8);
         dm.setValueAt(myFormatter.format(f),row, 9);
         dm.setValueAt(myFormatter.format(f),row,10);
       }
      }
      catch(Exception e)
      {
      System.err.println("Error in setting row sums "+ e);
       e.printStackTrace();
      }
    }
    
    public boolean checkForResult()
    {
    boolean b=false;
    try
    {
     ps=con.prepareStatement("select count(*) from examtemplate where class=? and section=? and sessionid=?");
     ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
     ps.setInt(2,Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
     ps.setInt(3,sessionValue);

     rs=ps.executeQuery();
     if(rs.next())
     {
     int count=rs.getInt(1);
     System.out.println("total result rows  "+count);
     int subjectcount=dm.getRowCount()-1;
     System.out.println("total subjects  "+subjectcount);
     int no_of_exams=6;
     if(count==subjectcount*no_of_exams)
     {
       System.out.println("Found all data");
       b=true;
     }
     else
      {
      JOptionPane.showMessageDialog(null, "Marks are not entered for all exams and all subjects in this class", "Error Message", JOptionPane.ERROR_MESSAGE);
     }
    }
    }
    catch(Exception e)
    {
     e.printStackTrace();
    }
     return b;
    }

    public void loadResultData()
    {
     int con_max_marks=0,actual_max_marks=0;

     DecimalFormat myFormatter = new DecimalFormat("###.##");
     
     double marks=0;

     try
    {
      int exam_status=1;
      ps=con.prepareStatement("select examstatus,marks,subject,examname from `examtemplate`,`studentmarksentry` where id=examtemplateid and studentid=? and sessionid=? order by subject,examname");
      ps.setString(1,txtAdmission.getText());
      ps.setInt(2,sessionValue);
      rs=ps.executeQuery();
      System.out.println("OOOOOOO");
      for(int row=1;row<dm.getRowCount();row++)
      {
        for(int column=1; column<7;column++)
       {
         marks=0;
         rs.next();
         exam_status=rs.getInt(1);
         System.out.println("LLLLLLLLL");
         if(exam_status==1)
         {
         System.out.println("Inside Function"+rs.getInt(4));
         con_max_marks=Integer.parseInt(maxMarks.get(rs.getInt(4)).toString());
         System.out.println("AAAAA");
         actual_max_marks=Integer.parseInt(dm.getValueAt(0, column).toString());
         System.out.println("BBBBBB");
         marks= ((rs.getFloat(2)*actual_max_marks)/con_max_marks);
         System.out.println("CCCCCC");
         dm.setValueAt(myFormatter.format(marks), row, column);
         System.out.println("DDDDD");
         
         }
         else
         {
         dm.setValueAt("Ab.", row, column);
         }
       }
     }
    }
      catch(Exception e)
      {
         e.printStackTrace();
         System.out.println("Error  is "+e);
      }
    }

    public void printGradeBasedReportCaed()
    {
       try
        {
          ps=con.prepareStatement("select institutename, instituteaddress from instituteregistration" );
          rs = ps.executeQuery();
          rs.next();
          HashMap map = new HashMap();
          map.put("schoolname",rs.getString(1));
          map.put("schooladdress",rs.getString(2));
          map.put("class",cmbClass.getSelectedItem().toString());
          map.put("section",cmbSection.getSelectedItem().toString());
          map.put("roll", cmbRoll.getSelectedItem().toString());
          map.put("admission",txtAdmission.getText());
          map.put("session", cmbSession.getSelectedItem().toString());



          ps=con.prepareStatement("select name,fathername,mothername from studententry where id=?");
          ps.setString(1,txtAdmission.getText());
          rs=ps.executeQuery();
          rs.next();
          map.put("name",rs.getString(1));
          map.put("fname",rs.getString(2));
          map.put("mname",rs.getString(3));

           BufferedImage bimg = null;
           bimg = ImageIO.read(new File("images/logo.jpg"));
           map.put("logo",bimg);


                JRTableModelDataSource src = new  JRTableModelDataSource(dm1);
                JasperReport js = JasperCompileManager.compileReport("reports/result/report_card_grades.jrxml");
                JasperPrint pr = JasperFillManager.fillReport(js,map,src);
                JasperViewer jv = new JasperViewer(pr, false);
                jv.setTitle("Student Progress Report Card /CCE Pattern");
                jv.setVisible(true);
        }
        catch(Exception e)
        {
            System.out.println("Error is ........."+e);
        }
    }


    public void printReportCard()
    {
        try
        {
          ps=con.prepareStatement("select institutename, instituteaddress from instituteregistration" );
          rs = ps.executeQuery();
          rs.next();
          HashMap map = new HashMap();
          map.put("schoolname",rs.getString(1));
          map.put("schooladdress",rs.getString(2));
          map.put("class",cmbClass.getSelectedItem().toString());
          map.put("section",cmbSection.getSelectedItem().toString());
          map.put("roll", cmbRoll.getSelectedItem().toString());
          map.put("admission",txtAdmission.getText());
          map.put("session", cmbSession.getSelectedItem().toString());
         
        

          ps=con.prepareStatement("select name,fathername,mothername from studententry where id=?");
          ps.setString(1,txtAdmission.getText());
          rs=ps.executeQuery();
          rs.next();
          map.put("name",rs.getString(1));
          map.put("fname",rs.getString(2));
          map.put("mname",rs.getString(3));

           BufferedImage bimg = null;
           bimg = ImageIO.read(new File("images/logo.jpg"));
           map.put("logo",bimg);
           
           Vector collection=new Vector();
           dm.setValueAt("Max. Marks", 0,0);
           for(int i=0;i<dm.getRowCount();i++)
           {
            collection.add(new ExamReportTemplate(dm.getValueAt(i, 0).toString(), dm.getValueAt(i,1).toString(),dm.getValueAt(i, 2).toString(), dm.getValueAt(i, 3).toString(), dm.getValueAt(i, 4).toString(), dm.getValueAt(i, 5).toString(), dm.getValueAt(i, 6).toString(), dm.getValueAt(i, 7).toString(), dm.getValueAt(i, 8).toString(), dm.getValueAt(i, 9).toString(),dm.getValueAt(i, 10).toString()));
           }

                JRBeanCollectionDataSource src = new JRBeanCollectionDataSource(collection);
                JasperReport js = JasperCompileManager.compileReport("reports/result/report_card1.jrxml");
                JasperPrint pr = JasperFillManager.fillReport(js,map,src);
                JasperViewer jv = new JasperViewer(pr, false);
                jv.setTitle("Student Progress Report Card ");
                jv.setVisible(true);
        }
        catch(Exception e)
        {
            System.out.println("Error is ........."+e);
           // e.printStackTrace();
        }
    }

    public void setAdmissionNumber()
    {
     if( cmbClass.getSelectedIndex()<=0 )
     return ;

     if(cmbSection.getSelectedIndex()<=0)
     return;

     if(cmbRoll.getSelectedIndex()<=0)
     return;

     try
     {
      ps=con.prepareStatement("select id from studententry where class=? and section=? and roll=?");
      ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
      ps.setInt(2,Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
      ps.setInt(3, Integer.parseInt(cmbRoll.getSelectedItem().toString()));
      rs=ps.executeQuery();
      if(rs.next())
      {
      txtAdmission.setText(rs.getString(1));
      }
     }
     catch(Exception e)
     {
       e.printStackTrace();
     }
    }

 public void loadBasicData()
 {
  try
 {
 ps=con.prepareStatement("select subjectid,subjectlist.subjecttitle from subjectsetup,subjectlist where applicable_for_result=1 and subjectlist.subjectid=subjectsetup.subjecttitle and classtitle=? order by subjectid");
 ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
 rs=ps.executeQuery();
 int i=0;
 while(rs.next())
 i++;

 rs.first();
 rs.previous();
 dm.setRowCount(i+1);

 subjectcodes.clear();

 i=1;
 while(rs.next())
 {
 dm.setValueAt(rs.getString(2), i, 0) ;
 subjectcodes.add(rs.getInt(1));
 dm.setValueAt(0, i, 1);
 dm.setValueAt(0, i, 2);
 dm.setValueAt(0, i, 3);
 dm.setValueAt(0, i, 4);
 dm.setValueAt(0, i, 5);
 dm.setValueAt(0, i, 6);
 dm.setValueAt(0, i, 7);
 dm.setValueAt(0, i, 8);
 dm.setValueAt(0, i, 9);
 i++;  
 }
 }
 catch(Exception e)
 {
 e.printStackTrace();
 }
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkfa2;
    private javax.swing.JCheckBox checkfa3;
    private javax.swing.JCheckBox checkfa4;
    private javax.swing.JCheckBox checksa1;
    private javax.swing.JCheckBox checksa2;
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JComboBox cmbRoll;
    private javax.swing.JComboBox cmbSection;
    private javax.swing.JComboBox cmbSession;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.swingx.JXTable jXTable2;
    private javax.swing.JTextField txtAdmission;
    // End of variables declaration//GEN-END:variables
public  PreparedStatement ps,p;
public  ResultSet rs;
DefaultTableModel dm, dm1;
//int min_pass_per=0;
}
