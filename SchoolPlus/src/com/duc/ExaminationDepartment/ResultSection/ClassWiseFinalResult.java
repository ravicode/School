/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StudentExamReport.java
 *
 * Created on Dec 20, 2009, 12:31:01 AM
 */

package com.duc.ExaminationDepartment.ResultSection;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.net.InetAddress;
import java.util.*;
import java.text.*;
import javax.swing.JTable.PrintMode;
import java.util.ArrayList;
import static com.duc.DatabaseConnection.DatabaseConnection.*;


/**
 *
 * @author sourabh
 */
public class ClassWiseFinalResult extends javax.swing.JInternalFrame
{
      ArrayList<Integer> subjectcodes=new ArrayList<Integer>();
     // Connection con=DatabaseConnection.con;
     // MapForIndex mp= new MapForIndex();
      HashMap classmap1= mp.getClassIndexFromName();
      HashMap sectiomap1=mp.getSectionIndexFromName();
      HashMap subjectmap1=mp.getSubjectIndexFromName();
      HashMap sessionmap1=mp.getSessionIndexFromName();
      ArrayList<String> admnumbers= new ArrayList<String>();
      ArrayList<String> tempadnumbers=new ArrayList<String>();
      int grandtotal=0;
      int totalmarks=0;
      double minimumper=0;
      int sessionValue=0;
    /** Creates new form StudentExamReport */
    public ClassWiseFinalResult()
    {
        initComponents();
        addClass();             
        addSession();
        fromSession();
        getMinPer();
        CalculateTotalMarks();
        dm = (DefaultTableModel)jXTable1.getModel();
        dm.setRowCount(1);   
     }

     public void fromSession()
    {
         try
       {
           ps = con.prepareStatement("select sessiontitle,sessionid,status from sessionsetup ");
           rs = ps.executeQuery();
           while(rs.next())
            {
              if(rs.getInt(3)==1)
              sessionValue=rs.getInt(2);
            }
         }
          catch(Exception e)
          {
             e.printStackTrace();
          }
    }


    public void getMinPer()
    {
       try
        {
         ps=con.prepareStatement("select min_pass_per from examcriteria");
         rs=ps.executeQuery();
         if(rs.next())
         minimumper=Double.parseDouble(rs.getString(1));
        }
        catch(Exception e)
        {
        e.printStackTrace();
        }
    }

    public void CalculateTotalMarks()
    {
        try
        {
         ps=con.prepareStatement("select SUM(exam_max_marks) from examsetup");
         rs=ps.executeQuery();
         if(rs.next())
         totalmarks=rs.getInt(1);
        }
        catch(Exception e)
        {
        e.printStackTrace();
        }
    }
   
    public void addClass()
{
        try
        {
        ps = con.prepareStatement("select * from classsetup");
        rs = ps.executeQuery();
        while (rs.next())
        cmbClass.addItem(rs.getString(1));
       }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
}

   public void addSection()
 {
     try
      {
        ps = con.prepareStatement("SELECT `sectionsetuplist`.`sectiontitle` from `sectionsetuplist`,`sectionsetup` where sectionid=`sectionsetup`.`sectiontitle` and classtitle=?");
        ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
        rs = ps.executeQuery();
        cmbSection.removeAllItems();
        cmbSection.addItem("Select");
        while (rs.next())
         {
          cmbSection.addItem(rs.getString(1));
         }
       }
        catch(Exception e)
        {
          System.err.println("Error "+e);
        }
 }


   public void addSession()
    {
        try
        {
         ps=con.prepareStatement("select sessiontitle from sessionsetup order by sessionid desc");
         rs=ps.executeQuery();
         while(rs.next())
         cmbSession.addItem(rs.getString(1));
        }
        catch(Exception e)
        {
         System.err.println("Error "+e);
        }
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jLabel2 = new javax.swing.JLabel();
        cmbClass = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cmbSection = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbSession = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Class Wise Final Result Report ( General pattern)");

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jTextPane1.setText("                                                                          View Class  Wise Final Result");
        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jButton1.setText("Show Result");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Adm. No.", "Roll No.", "Name", "Father's Name", "DOB", "Grand Total", "%age", "Final Grade", "Overall Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.setColumnControlVisible(true);
        jXTable1.setFont(new java.awt.Font("Tahoma", 0, 12));
        jXTable1.setHorizontalScrollEnabled(true);
        jXTable1.setSortable(false);
        jScrollPane2.setViewportView(jXTable1);

        jLabel2.setText("Class");

        cmbClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbClassItemStateChanged(evt);
            }
        });

        jLabel3.setText("Section");

        cmbSection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbSection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSectionItemStateChanged(evt);
            }
        });

        jLabel5.setText("Session");

        cmbSession.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));
        cmbSession.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSessionItemStateChanged(evt);
            }
        });

        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        jLabel1.setText("Note: Overall Result can be edited as per the requirement");

        jButton4.setText("SMS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSession, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 865, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(cmbSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cmbSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 897, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       process(sessionValue);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void process(int session)
    {
       dm.setRowCount(0);
        boolean c=checkForSaving();

        if(totalmarks<=0)
        return;

        if(minimumper<=0.0)
        return;

        grandtotal=0;

        if(c==true)
      {
          calculateGrandTotal();
          if(grandtotal<=0)
          return;
          loadBasicData(session);
          loadResultData(session);
      }
    }

     public void calculateGrandTotal()
     {
         try
         {
         ps=con.prepareStatement("select count(*) from `subjectsetup`,`subjectlist` where classtitle=? and `subjectlist`.`subjectid`=`subjectsetup`.`subjecttitle`and applicable_for_result=1");
         ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
         rs=ps.executeQuery();
         if(rs.next())
         grandtotal=rs.getInt(1)*totalmarks;
         }
         catch(Exception e)
         {
          e.printStackTrace();
         }
     }
    
      public boolean checkForSaving()
    {
       if(cmbClass.getSelectedIndex()<=0)
       {
       JOptionPane.showMessageDialog(null, "Select Class First", "Error Message", JOptionPane.ERROR_MESSAGE);
       return false;
       }

       if(cmbSection.getSelectedIndex()<=0)
       {
       JOptionPane.showMessageDialog(null, "Select Section First", "Error Message", JOptionPane.ERROR_MESSAGE);
       return false;
       }     
       return true;
    } 
    

    
    public void loadResultData(int session)
    {
     DecimalFormat myFormatter = new DecimalFormat("###.##");
     double per=0;String grade="";
      try
   {      
      ps=con.prepareStatement("select studentid, SUM(marks) from `examtemplate`,`studentmarksentry` where id=examtemplateid and  class=? and section=? and sessionid=? group by studentid order by studentid");
      ps.setInt(1, Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
      ps.setInt(2, Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
      ps.setInt(3,session);
      rs=ps.executeQuery();
      int row=0,column=0;      

      while(rs.next())
     {  
        row=admnumbers.indexOf(rs.getString(1))+1;
        System.out.println("Row: "+row+" Index: "+admnumbers.indexOf(rs.getString(1)));
        dm.setValueAt(rs.getInt(2), row, 5);
        per=(Double.parseDouble(rs.getString(2).concat(".00"))/grandtotal)*100;
        dm.setValueAt(myFormatter.format(per), row, 6);
        dm.setValueAt(FindGrade(per), row, 7);
        if(per>=minimumper)
        dm.setValueAt("PASSED", row, 8);
        else
        dm.setValueAt("FAILED", row, 8);   
     }
   }
      catch(Exception e)
      {
         e.printStackTrace();
      }
    }

     public String FindGrade(double marks)
    {
        DecimalFormat format1=new DecimalFormat("###");
        String grade="";
        int grademarks=0;
        grademarks=Integer.parseInt(format1.format(marks));
        try
        {
          ps=con.prepareStatement("select grade,lowerlimit,upperlimit from examgrades order by id");
          rs1=ps.executeQuery();

          while(rs1.next())
          {
            if(grademarks>=rs1.getInt(2) && grademarks<=rs1.getInt(3))
            {
              grade=rs1.getString(1) ;
              return grade;
            }
          }
        }
        catch(Exception e)
        {
         e.printStackTrace();
        }
        return grade;
    }


    private void cmbClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbClassItemStateChanged
        // TODO add your handling code here:
        if(cmbClass.getSelectedIndex()>0)
        {
            addSection();
        }
    }//GEN-LAST:event_cmbClassItemStateChanged

    
    private void cmbSectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSectionItemStateChanged
        // TODO add your handling code here:        
    }//GEN-LAST:event_cmbSectionItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         try
        {
        String s=" ",t="";        
        MessageFormat header=new MessageFormat(s);
        MessageFormat footer=new MessageFormat(t);
        jXTable1.print(PrintMode.FIT_WIDTH, header, footer);
        }
        catch(Exception e)
        {
         System.err.println("Error in printing timetable");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        super.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cmbSessionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSessionItemStateChanged
        // TODO add your handling code here:
        if(cmbSession.getSelectedIndex()>0)
        {
       // process(Integer.parseInt(sessionmap1.get(cmbSession.getSelectedItem().toString()).toString()));
        }
    }//GEN-LAST:event_cmbSessionItemStateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      try
 {
        ps=con.prepareStatement("select access from smsaccess where module=? ");
    ps.setString(1,"Examination Department");
    rs=ps.executeQuery();
    if(rs.next())
    {
    if(rs.getInt(1)==1)
      examResult();
      else JOptionPane.showConfirmDialog(null,"Add SMS package access from Accessories","Contact Administrator",JOptionPane.OK_OPTION);
       // jCheckBox1.setSelected(false);

    }else JOptionPane.showConfirmDialog(null,"Add SMS package access from Accessories","Contact Administrator",JOptionPane.OK_OPTION);
      }catch(Exception e)
{
    e.printStackTrace();
}

    }//GEN-LAST:event_jButton4ActionPerformed

    public void examResult()
    {
         int crow=jXTable1.getSelectedRow();

      String id=null;
    String msg="Result of Admission no."+dm.getValueAt(crow,0)+" as Grand Total="+dm.getValueAt(crow,5)+"and %="+dm.getValueAt(crow,6);
    System.out.println("message"+msg);

    //if(jCheckBox1.isSelected())
     //   id=jTextField2.getText().trim();
    //else
        System.out.println("ravi"+dm.getValueAt(crow,5));
    String newmsg=msg.replace(" ","%20");
    System.out.println("New message"+newmsg);
    try
    {
        ps=con.prepareStatement("select phone from studententry where id=?");
        ps.setString(1,dm.getValueAt(crow,0).toString());
        rs=ps.executeQuery();
        if(rs.next())
        {
            id=rs.getString(1);
        }
  if(id.isEmpty())
      {
          JOptionPane.showConfirmDialog(null,"Mobile no. Field is empty","Mobile Empty",JOptionPane.OK_OPTION);
      }
      else
      {

          if(id.length()!=10)
          {
          JOptionPane.showConfirmDialog(null,"Mobile no. is invalid","Mobile No. Invalid",JOptionPane.OK_OPTION);
      }
     // else*/
          InetAddress thisIp =InetAddress.getLocalHost();
            String ip=thisIp.getHostAddress();
      new com.duc.Accessories.SendSms().SmsCommon(dm.getValueAt(crow,0).toString(),id,newmsg,ip);
     // }
    }
    }
    catch(Exception e)
    {
        JOptionPane.showConfirmDialog(null,"Mobile no. Field is empty","Mobile Empty",JOptionPane.OK_OPTION);

        e.printStackTrace();
    }
    }
 public void loadBasicData(int session)
 {
  try
 {
 ps=con.prepareStatement("select id,roll,name,fathername,date_format(dob,'%d-%m-%Y') from studententry where class=? and section=? order by id");
 ps.setInt(1,Integer.parseInt(String.valueOf(classmap1.get(cmbClass.getSelectedItem().toString()))));
 ps.setInt(2,Integer.parseInt(String.valueOf(sectiomap1.get(cmbSection.getSelectedItem().toString()))));
 
 rs=ps.executeQuery();
 int i=0;
 while(rs.next())
 i++;

 rs.first();
 rs.previous();
 dm.setRowCount(i+1); 
 admnumbers.clear();
 i=1;
 while(rs.next())
 {
  dm.setValueAt(rs.getString(1), i, 0) ;
  dm.setValueAt(rs.getInt(2), i, 1) ;
  dm.setValueAt(rs.getString(3), i,2) ;
  dm.setValueAt(rs.getString(4), i, 3) ;
  dm.setValueAt(rs.getString(5), i, 4) ;
  admnumbers.add(rs.getString(1));
  i++;
 }
 dm.setValueAt(grandtotal, 0, 5);
 }
 catch(Exception e)
 {
 e.printStackTrace();
 }
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbClass;
    private javax.swing.JComboBox cmbSection;
    private javax.swing.JComboBox cmbSession;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables
public  PreparedStatement ps,p;
public  ResultSet rs,rs1;
DefaultTableModel dm, dm1;
int min_pass_per=0;
}
