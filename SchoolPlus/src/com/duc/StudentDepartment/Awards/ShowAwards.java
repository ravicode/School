/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ShowWork.java
 *
 * Created on Sep 18, 2009, 7:40:20 PM
 */

package com.duc.StudentDepartment.Awards;
import com.duc.ImportSection.MapForIndex;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.text.MessageFormat;
import java.util.HashMap;
import javax.swing.JTable.PrintMode;
import javax.swing.table.DefaultTableModel;
import static com.duc.DatabaseConnection.DatabaseConnection.*;
/**
 *
 * @author Ravi Dangaich
 */
public class ShowAwards extends javax.swing.JInternalFrame {
//DateFormat df;
DefaultTableModel dm;

//MapForIndex mp=new MapForIndex();
         HashMap classmap=mp.getClassIndexName();
         HashMap sectionmap=mp.getSectionIndexName();

         HashMap classmap1=mp.getClassIndexFromName();
         HashMap sectionmap1=mp.getSectionIndexFromName();
    /** Creates new form ShowWork */
    public ShowAwards() {
        initComponents();

         
        fromClass();
        fromAwardCategory();
        dm = (DefaultTableModel)jTable1.getModel();
        dm.setRowCount(0);
        //df=new SimpleDateFormat("yyyy-MM-dd");
         dateofevent.setDateFormat(df);

         showAllAward();
    }

    
    
public void fromClass()
{
     try
    {

 //con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();


         ps = con.prepareStatement("select * from classsetup");

             rs = ps.executeQuery();


            while (rs.next())
            {
        classcombo.addItem(rs.getString(1));


            }

 // con.close();
         }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
}

    public void fromAwardCategory()
{
     try
    {

// con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();


         ps = con.prepareStatement("select * from awardcategorysetup");

             rs = ps.executeQuery();


            while (rs.next())
            {
        category.addItem(rs.getString(1));


            }

 // con.close();
         }
    catch(Exception e)
    {
        System.err.println("Error is"+e);
    }
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        printButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        showAllButton = new javax.swing.JButton();
        classcombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        dateofevent = new datechooser.beans.DateChooserCombo();
        jLabel6 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        category = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        position = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        admissionnumber = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 204, 204));
        setClosable(true);
        setIconifiable(true);
        setTitle("Awards Viewer");

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Admission No", "Class", "Award Category", "Position", "Level", "Prize Item", "DateOf Event"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTextPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Tahoma", 0, 24));
        jTextPane1.setText("                                      Awards Exhibition");
        jScrollPane2.setViewportView(jTextPane1);

        jTextPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTextPane2.setEditable(false);
        jTextPane2.setFont(new java.awt.Font("Tahoma", 0, 12));
        jTextPane2.setText("It will show all the class works given to a particular class regarding to a particular subject of a teacher.");
        jScrollPane3.setViewportView(jTextPane2);

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        showAllButton.setText("Show All");
        showAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllButtonActionPerformed(evt);
            }
        });

        classcombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose" }));
        classcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classcomboActionPerformed(evt);
            }
        });

        jLabel2.setText("Class Wise Search");

        jLabel6.setText("Date Wise Search");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Award Category Wise Search");

        category.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose" }));
        category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryActionPerformed(evt);
            }
        });

        jLabel4.setText("Position Wise Search");

        position.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose", "1st", "2nd", "3rd" }));
        position.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionActionPerformed(evt);
            }
        });

        jLabel5.setText("Admission Number");

        admissionnumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                admissionnumberKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(admissionnumber)
                    .addComponent(position, 0, 104, Short.MAX_VALUE)
                    .addComponent(category, 0, 104, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dateofevent, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(96, 96, 96))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(printButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(classcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateofevent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(searchButton))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(admissionnumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(showAllButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        dateWiseSearch(); // TODO add your handling code here:
}//GEN-LAST:event_searchButtonActionPerformed

    private void showAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllButtonActionPerformed
           //   showAllDefaultersList();        // TODO add your handling code here:
}//GEN-LAST:event_showAllButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();            // TODO add your handling code here:
}//GEN-LAST:event_closeButtonActionPerformed
public void dateWiseSearch()
{
   // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
       int i=0,j=0;
   try
     {
       ps=con.prepareStatement("select studentid,class,awardcategory,position,level,award,dateofevent from awardsentry left join studententry on studentid=id where dateofevent=?") ;
      ps.setString(1,dateofevent.getText());
         //ps.setInt(2,id);
      System.out.println("n");
       rs=ps.executeQuery();
      populateTable(rs);

  // con.close();
     }
     catch(Exception e)
   {
e.printStackTrace();
   }
}
    public void showAllAward()
    {
      //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
       int i=0,j=0;
   try
     {
       ps=con.prepareStatement("select studentid,class,awardcategory,position,level,award,dateofevent from awardsentry left join studententry on studentid=id") ;

       rs=ps.executeQuery();
      populateTable(rs);

   //con.close();
     }
     catch(Exception e)
   {
e.printStackTrace();
   }
    }

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try
        {
        String s="Student Awards Result";
        MessageFormat header=new MessageFormat(s);
        jTable1.print(PrintMode.FIT_WIDTH, header, null);
        }

        catch(Exception e)
        {
         System.err.println("Error in printing student awards");
        }
}//GEN-LAST:event_printButtonActionPerformed

    private void categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryActionPerformed
categoryWiseAward();        // TODO add your handling code here:
    }//GEN-LAST:event_categoryActionPerformed

    private void positionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionActionPerformed
   positionWiseSearch();        // TODO add your handling code here:
    }//GEN-LAST:event_positionActionPerformed

    private void admissionnumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_admissionnumberKeyPressed
        int keycode=evt.getID();
            int id;
            if(keycode==KeyEvent.KEY_PRESSED) {
if(!admissionnumber.getText().isEmpty())
                admissionNoWiseSearch();
               

            }
    }//GEN-LAST:event_admissionnumberKeyPressed

    private void classcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classcomboActionPerformed
       classWiseSearch();
    }//GEN-LAST:event_classcomboActionPerformed
public void classWiseSearch()
{
    // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
       int i=0,j=0;
   try
     {
       ps=con.prepareStatement("select studentid,class,awardcategory,position,level,award,dateofevent from awardsentry left join studententry on studentid=id where class=?") ;
      ps.setInt(1,Integer.parseInt(classmap1.get(classcombo.getSelectedItem().toString()).toString()));
         //ps.setInt(2,id);
      System.out.println("n");
       rs=ps.executeQuery();
      populateTable(rs);

  // con.close();
     }
     catch(Exception e)
   {
e.printStackTrace();
   }
}
    public void admissionNoWiseSearch()
    {
      //  con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();
       int i=0,j=0;
   try
     {
       ps=con.prepareStatement("select studentid,class,awardcategory,position,level,award,dateofevent from awardsentry left join studententry on studentid=id where studentid=?") ;
      ps.setString(1,admissionnumber.getText());
         //ps.setInt(2,id);
      System.out.println("n");
       rs=ps.executeQuery();
      populateTable(rs);

  // con.close();
     }
     catch(Exception e)
   {
e.printStackTrace();
   }
    }

    public void categoryWiseAward()
{
    // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();


         int i=0,j=0;

     try
     {
       ps=con.prepareStatement("select studentid,class,awardcategory,position,level,award,dateofevent from awardsentry left join studententry on studentid=id where awardcategory=?") ;
      ps.setString(1,category.getSelectedItem().toString());
         //ps.setInt(2,id);
      System.out.println("n");
       rs=ps.executeQuery();
      populateTable(rs);

  // con.close();
     }
     catch(Exception e)
   {
e.printStackTrace();
   }
}

public void positionWiseSearch()
{
    // con= new com.duc.DatabaseConnection.DatabaseConnection().dataConnection();


         int i=0,j=0;

     try
     {
       ps=con.prepareStatement("select studentid,class,awardcategory,position,level,award,dateofevent from awardsentry left join studententry on studentid=id where position=?") ;
      ps.setString(1,position.getSelectedItem().toString());
         //ps.setInt(2,id);
      System.out.println("n");
       rs=ps.executeQuery();
      populateTable(rs);

  // con.close();
     }
     catch(Exception e)
   {
e.printStackTrace();
   }
}
 public void populateTable(ResultSet rs)
    {
        int i=0,j=0;
        try
        {
             if(rs.next())
            {
            rs.first();
            rs.previous();

            while(rs.next())
            {
                j++;
              
            }

            rs.first();
            rs.previous();
            System.out.println(dateofevent.getText());
            dm.setRowCount(j);

            while(rs.next())
            {
            dm.setValueAt(rs.getString(1), i, 0);
                dm.setValueAt(classmap.get(rs.getInt(2)), i, 1);
                 dm.setValueAt(rs.getString(3), i, 2);
                 dm.setValueAt(rs.getString(4), i, 3);
                dm.setValueAt(rs.getString(5), i, 4);
                 dm.setValueAt(rs.getString(6), i, 5);

                 dm.setValueAt(rs.getString(7), i, 6);

                 i++;
        }
            }
    }catch(Exception e)
    {
e.printStackTrace();
    }
    }

 public void setAdmissionNo(String id)
    {
        admissionnumber.setText(id);
       int keycode=KeyEvent.VK_ENTER;

            if(keycode==KeyEvent.VK_ENTER) {
if(!admissionnumber.getText().isEmpty())
                admissionNoWiseSearch();
               

            }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField admissionnumber;
    private javax.swing.JComboBox category;
    private javax.swing.JComboBox classcombo;
    private javax.swing.JButton closeButton;
    private datechooser.beans.DateChooserCombo dateofevent;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JComboBox position;
    private javax.swing.JButton printButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton showAllButton;
    // End of variables declaration//GEN-END:variables
//Connection con;
ResultSet rs;
 PreparedStatement ps;
}
